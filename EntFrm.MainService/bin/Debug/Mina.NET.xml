<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mina.NET</name>
    </assembly>
    <members>
        <member name="T:Mina.Core.Buffer.AbstractIoBuffer">
            <summary>
            A base implementation of <see cref="T:Mina.Core.Buffer.IoBuffer"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.#ctor(Mina.Core.Buffer.IoBufferAllocator,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.#ctor(Mina.Core.Buffer.AbstractIoBuffer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.AbstractIoBuffer.Order">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.AbstractIoBuffer.MinimumCapacity">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.AbstractIoBuffer.BufferAllocator">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.AbstractIoBuffer.Position">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.AbstractIoBuffer.Limit">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.AbstractIoBuffer.AutoExpand">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.AbstractIoBuffer.AutoShrink">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.AbstractIoBuffer.Derived">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Expand(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Expand(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Sweep">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Sweep(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.FillAndReset(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.FillAndReset(System.Byte,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Fill(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Fill(System.Byte,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetHexDump">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetHexDump(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PrefixedDataAvailable(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PrefixedDataAvailable(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.IndexOf(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetPrefixedString(System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetPrefixedString(System.Int32,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutPrefixedString(System.String,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutPrefixedString(System.String,System.Int32,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetObject">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutObject(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Slice">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetSlice(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetSlice(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Duplicate">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.AsReadOnlyBuffer">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Skip(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Put(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Put(System.Int32,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Put(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Put(Mina.Core.Buffer.IoBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Put(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutString(System.String,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutString(System.String,System.Int32,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetString(System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetString(System.Int32,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.AbstractIoBuffer.RecapacityAllowed">
            <summary>
            Indicating whether recapacity is allowed.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Offset(System.Int32)">
            <summary>
            Gets the actual position in internal buffer of the given index.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutInternal(Mina.Core.Buffer.IoBuffer)">
            <summary>
            Writes an <see cref="T:Mina.Core.Buffer.IoBuffer"/>. Override this method for better implementation.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutInternal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes an array of bytes. Override this method for better implementation.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetInternal(System.Int32)">
            <summary>
            Gets the byte at the given index in internal buffer.
            </summary>
            <param name="i">the index from which the byte will be read</param>
            <returns>the byte at the given index</returns>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutInternal(System.Int32,System.Byte)">
            <summary>
            Pus the given byte into internal buffer at the given index.
            </summary>
            <param name="i">the index at which the byte will be written</param>
            <param name="b">the byte to be written</param>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Slice0">
            <summary>
            <see cref="M:Mina.Core.Buffer.AbstractIoBuffer.Slice"/>
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.Duplicate0">
            <summary>
            <see cref="M:Mina.Core.Buffer.AbstractIoBuffer.Duplicate"/>
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.AsReadOnlyBuffer0">
            <summary>
            <see cref="M:Mina.Core.Buffer.AbstractIoBuffer.AsReadOnlyBuffer"/>
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetChar">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetChar(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutChar(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutChar(System.Int32,System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetInt16">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetInt16(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutInt16(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutInt16(System.Int32,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetInt32">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetInt32(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutInt32(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutInt32(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetInt64">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetInt64(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutInt64(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutInt64(System.Int32,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetSingle">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetSingle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutSingle(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutSingle(System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetDouble">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.GetDouble(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutDouble(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.AbstractIoBuffer.PutDouble(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Buffer.Buffer">
            <summary>
            A container for data of a specific primitive type. 
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new buffer with the given mark, position, limit, and capacity,
            after checking invariants.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.Buffer.Capacity">
            <summary>
            Gets this buffer's capacity.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.Buffer.Position">
            <summary>
            Gets or sets this buffer's position.
            If the mark is defined and larger than the new position then it is discarded.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.Buffer.Limit">
            <summary>
            Gets or sets this buffer's limit.
            If the position is larger than the new limit then it is set to the new limit.
            If the mark is defined and larger than the new limit then it is discarded.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.Buffer.Remaining">
            <summary>
            Gets the number of elements between the current position and the limit.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.Buffer.HasRemaining">
            <summary>
            Tells whether there are any elements between the current position and the limit.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.Buffer.ReadOnly">
            <summary>
            Tells whether or not this buffer is read-only.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.Mark">
            <summary>
            Sets this buffer's mark at its position.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.Reset">
            <summary>
            Resets this buffer's position to the previously-marked position.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.Clear">
            <summary>
            Clears this buffer.
            The position is set to zero, the limit is set to the capacity, and the mark is discarded.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.Flip">
            <summary>
            Flips this buffer.
            The limit is set to the current position and then the position is set to zero.
            If the mark is defined then it is discarded.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.Rewind">
            <summary>
            Rewinds this buffer.
            The position is set to zero and the mark is discarded.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.Buffer.MarkValue">
            <summary>
            Gets current mark.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.Recapacity(System.Int32)">
            <summary>
            Sets capacity.
            </summary>
            <param name="capacity">the new capacity</param>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.CheckIndex(System.Int32)">
            <summary>
            Checks the given index against the limit.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            the index is not smaller than the limit or is smaller than zero
            </exception>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.CheckIndex(System.Int32,System.Int32)">
            <summary>
            Checks the given index against the limit.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            the index + number of bytes is not smaller than the limit or is smaller than zero
            </exception>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.NextGetIndex">
            <summary>
            Checks the current position against the limit,
            and then increments the position.
            </summary>
            <returns>the current position value, before it is incremented</returns>
            <exception cref="T:Mina.Core.Buffer.BufferUnderflowException">
            the current position is not smaller than the limit
            </exception>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.NextGetIndex(System.Int32)">
            <summary>
            Checks the current position against the limit,
            and then increments the position with given number of bytes.
            </summary>
            <returns>the current position value, before it is incremented</returns>
            <exception cref="T:Mina.Core.Buffer.BufferUnderflowException">
            the current position is not enough for the given number of bytes
            </exception>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.NextPutIndex">
            <summary>
            Checks the current position against the limit,
            and then increments the position.
            </summary>
            <returns>the current position value, before it is incremented</returns>
            <exception cref="T:System.OverflowException">
            the current position is not smaller than the limit
            </exception>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.NextPutIndex(System.Int32)">
            <summary>
            Checks the current position against the limit,
            and then increments the position with given number of bytes.
            </summary>
            <returns>the current position value, before it is incremented</returns>
            <exception cref="T:System.OverflowException">
            the current position is not enough for the given number of bytes
            </exception>
        </member>
        <member name="M:Mina.Core.Buffer.Buffer.CheckBounds(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks the bounds.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="T:Mina.Core.Buffer.ByteOrder">
            <summary>
            Byte order
            </summary>
        </member>
        <member name="F:Mina.Core.Buffer.ByteOrder.BigEndian">
            <summary>
            Big-endian
            </summary>
        </member>
        <member name="F:Mina.Core.Buffer.ByteOrder.LittleEndian">
            <summary>
            Little-endian
            </summary>
        </member>
        <member name="T:Mina.Core.Buffer.BufferDataException">
            <summary>
            An exception which is thrown when the data the <see cref="T:Mina.Core.Buffer.IoBuffer"/> contains is corrupt.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.BufferDataException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.BufferDataException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.BufferDataException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.BufferDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.BufferDataException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="T:Mina.Core.Buffer.BufferUnderflowException">
            <summary>
            An exception thrown when a <code>Get</code> operation reaches the source buffer's limit.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.BufferUnderflowException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.BufferUnderflowException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.BufferUnderflowException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.BufferUnderflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.BufferUnderflowException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="T:Mina.Core.Buffer.ByteBuffer">
            <summary>
            A Byte buffer. 
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.#ctor(Mina.Core.Buffer.IoBufferAllocator,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Creates a new buffer with the given mark, position, limit, capacity,
            backing array, and array offset
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.ByteBuffer.Capacity">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.ByteBuffer.HasArray">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.Get">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.Get(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.Get(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.GetRemaining">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.Shrink">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.ByteBuffer.ReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.Compact">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.Free">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.Slice0">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.Duplicate0">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.AsReadOnlyBuffer0">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.PutInternal(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.PutInternal(Mina.Core.Buffer.IoBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.GetInternal(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.PutInternal(System.Int32,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBuffer.Offset(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Buffer.ByteBufferAllocator">
            <summary>
            A simplistic <see cref="T:Mina.Core.Buffer.IoBufferAllocator"/> which simply allocates a new
            buffer every time.
            </summary>
        </member>
        <member name="F:Mina.Core.Buffer.ByteBufferAllocator.Instance">
            <summary>
            Static instace of <see cref="T:Mina.Core.Buffer.ByteBufferAllocator"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBufferAllocator.Allocate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBufferAllocator.Wrap(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.ByteBufferAllocator.Wrap(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Buffer.ByteBufferR">
            <summary>
            A read-only ByteBuffer. 
            </summary>
        </member>
        <member name="T:Mina.Core.Buffer.IoBuffer">
            <summary>
            A byte buffer used by MINA applications.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.IoBuffer.Allocator">
            <summary>
            Gets or sets the allocator used by new buffers.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Allocate(System.Int32)">
            <summary>
            Returns the direct or heap buffer which is capable to store the specified amount of bytes.
            </summary>
            <param name="capacity">the capacity of the buffer</param>
            <returns>the allocated buffer</returns>
            <exception cref="T:System.ArgumentException">If the <paramref name="capacity"/> is a negative integer</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Wrap(System.Byte[])">
            <summary>
            Wraps the specified byte array into MINA buffer.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Wrap(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Wraps the specified byte array into MINA buffer.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            If the preconditions on the <paramref name="offset"/> and <paramref name="length"/>
            parameters do not hold
            </exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.NormalizeCapacity(System.Int32)">
            <summary>
            Normalizes the specified capacity of the buffer to power of 2, which is
            often helpful for optimal memory usage and performance. If it is greater
            than or equal to <see cref="F:System.Int32.MaxValue"/>, it returns
            <see cref="F:System.Int32.MaxValue"/>. If it is zero, it returns zero.
            </summary>
            <param name="requestedCapacity"></param>
            <returns></returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.IoBuffer.BufferAllocator">
            <summary>
            Gets the the allocator used by this buffer.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.IoBuffer.Order">
            <summary>
            Gets or sets the current byte order.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.IoBuffer.Capacity">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBuffer.Position">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBuffer.Limit">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBuffer.Remaining">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBuffer.HasRemaining">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBuffer.AutoExpand">
            <summary>
            Turns on or off auto-expanding.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.IoBuffer.AutoShrink">
            <summary>
            Turns on or off auto-shrinking.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.IoBuffer.Derived">
            <summary>
            Checks if this buffer is derived from another buffer
            via <see cref="M:Mina.Core.Buffer.IoBuffer.Duplicate"/>, <see cref="M:Mina.Core.Buffer.IoBuffer.Slice"/> or <see cref="M:Mina.Core.Buffer.IoBuffer.AsReadOnlyBuffer"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.IoBuffer.MinimumCapacity">
            <summary>
            Gets or sets the minimum capacity.
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.IoBuffer.HasArray">
            <summary>
            Tells whether or not this buffer is backed by an accessible byte array.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Mark">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Flip">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Rewind">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Expand(System.Int32)">
            <summary>
            Changes the capacity and limit of this buffer so this buffer get the
            specified <paramref name="expectedRemaining"/> room from the current position.
            </summary>
            <param name="expectedRemaining">the expected remaining room</param>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Expand(System.Int32,System.Int32)">
            <summary>
            Changes the capacity and limit of this buffer so this buffer get the
            specified <paramref name="expectedRemaining"/> room from the specified <paramref name="position"/>.
            </summary>
            <param name="position">the start position</param>
            <param name="expectedRemaining">the expected remaining room</param>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Shrink">
            <summary>
            Changes the capacity of this buffer so this buffer occupies
            as less memory as possible while retaining the position,
            limit and the buffer content between the position and limit.
            The capacity of the buffer never becomes less than <see cref="P:Mina.Core.Buffer.IoBuffer.MinimumCapacity"/>.
            The mark is discarded once the capacity changes.
            </summary>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Sweep">
            <summary>
             Clears this buffer and fills its content with zero. The position is
             set to zero, the limit is set to the capacity, and the mark is discarded.
            </summary>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Sweep(System.Byte)">
            <summary>
             Clears this buffer and fills its content with <paramref name="value"/>. The position is
             set to zero, the limit is set to the capacity, and the mark is discarded.
            </summary>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.FillAndReset(System.Int32)">
            <summary>
            Fills this buffer with zero.
            This method does not change buffer position.
            </summary>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.FillAndReset(System.Byte,System.Int32)">
            <summary>
            Fills this buffer with <paramref name="value"/>.
            This method does not change buffer position.
            </summary>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Fill(System.Int32)">
            <summary>
            Fills this buffer with zero.
            This method moves buffer position forward.
            </summary>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Fill(System.Byte,System.Int32)">
            <summary>
            Fills this buffer with <paramref name="value"/>.
            This method moves buffer position forward.
            </summary>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetHexDump">
            <summary>
            Gets hexdump of this buffer.
            </summary>
            <returns>hexidecimal representation of this buffer</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetHexDump(System.Int32)">
            <summary>
            Gets hexdump of this buffer with limited length.
            </summary>
            <param name="lengthLimit">the maximum number of bytes to dump from the current buffer</param>
            <returns>hexidecimal representation of this buffer</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PrefixedDataAvailable(System.Int32)">
            <summary>
            Returns true if this buffer contains a data which has a data
            length as a prefix and the buffer has remaining data as enough as
            specified in the data length field.
            <remarks>
            Please notes that using this method can allow DoS (Denial of Service)
            attack in case the remote peer sends too big data length value.
            It is recommended to use <see cref="M:Mina.Core.Buffer.IoBuffer.PrefixedDataAvailable(System.Int32,System.Int32)"/> instead.
            </remarks>
            </summary>
            <param name="prefixLength">the length of the prefix field (1, 2, or 4)</param>
            <returns>true if data available</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PrefixedDataAvailable(System.Int32,System.Int32)">
            <summary>
            Returns true if this buffer contains a data which has a data
            length as a prefix and the buffer has remaining data as enough as
            specified in the data length field.
            </summary>
            <param name="prefixLength">the length of the prefix field (1, 2, or 4)</param>
            <param name="maxDataLength">the allowed maximum of the read data length</param>
            <returns>true if data available</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.IndexOf(System.Byte)">
            <summary>
            Returns the first occurence position of the specified byte from the
            current position to the current limit.
            </summary>
            <param name="b">the byte to find</param>
            <returns>-1 if the specified byte is not found</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetPrefixedString(System.Text.Encoding)">
            <summary>
            Reads a string which has a 16-bit length field before the actual encoded string.
            This method is a shortcut for <code>GetPrefixedString(2, encoding)</code>.
            </summary>
            <param name="encoding">the encoding of the string</param>
            <returns>the prefixed string</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetPrefixedString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string which has a length field before the actual encoded string.
            </summary>
            <param name="prefixLength">the length of the length field (1, 2, or 4)</param>
            <param name="encoding">the encoding of the string</param>
            <returns>the prefixed string</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutPrefixedString(System.String,System.Text.Encoding)">
            <summary>
            Writes the string into this buffer which has a 16-bit length field
            before the actual encoded string.
            This method is a shortcut for <code>PutPrefixedString(value, 2, encoding)</code>.
            </summary>
            <param name="value">the string to write</param>
            <param name="encoding">the encoding of the string</param>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutPrefixedString(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes the string into this buffer which has a prefixLength field
            before the actual encoded string.
            </summary>
            <param name="value">the string to write</param>
            <param name="prefixLength">the length of the length field (1, 2, or 4)</param>
            <param name="encoding">the encoding of the string</param>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetObject">
            <summary>
            Reads an object from the buffer.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutObject(System.Object)">
            <summary>
            Writes the specified object to the buffer.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Get">
            <summary>
            Reads the byte at this buffer's current position, and then increments the position. 
            </summary>
            <returns>the byte at the buffer's current position</returns>
            <exception cref="T:Mina.Core.Buffer.BufferUnderflowException">
            the buffer's current position is not smaller than its limit
            </exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Get(System.Int32)">
            <summary>
            Reads the byte at the given index.
            </summary>
            <param name="index">the index from which the byte will be read</param>
            <returns>the byte at the given index</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            the index is negative or not smaller than the buffer's limit
            </exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Get(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes of <paramref name="length"/> into <paramref name="dst"/> array.
            </summary>
            <param name="dst">the array into which bytes are to be written</param>
            <param name="offset">the offset within the array of the first byte to be written</param>
            <param name="length">the maximum number of bytes to be written</param>
            <returns>itself</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            the preconditions on the offset and length parameters do not hold
            </exception>
            <exception cref="T:Mina.Core.Buffer.BufferUnderflowException">
            there are fewer than length bytes remaining in this buffer
            </exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetRemaining">
            <summary>
            Gets all remaining bytes as an <see cref="T:System.ArraySegment`1"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Free">
            <summary>
            Declares this buffer and all its derived buffers are not used anymore so
            that it can be reused by some implementations.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Slice">
            <summary>
            Creates a new byte buffer whose content is a
            shared subsequence of this buffer's content.
            </summary>
            <remarks>
            The new buffer's position will be zero, its capacity and its limit
            will be the number of bytes remaining in this buffer, and its mark
            will be undefined.
            </remarks>
            <returns>the new buffer</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Duplicate">
            <summary>
            Creates a new byte buffer that shares this buffer's content. 
            </summary>
            <remarks>
            The two buffers' position, limit, and mark values will be independent.
            </remarks>
            <returns>the new buffer</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.AsReadOnlyBuffer">
            <summary>
            Creates a new, read-only byte buffer that shares this buffer's content.
            </summary>
            <returns>the new, read-only buffer</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Skip(System.Int32)">
            <summary>
            Forwards the position of this buffer as the specified <paramref name="size"/> bytes.
            </summary>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Put(System.Byte)">
            <summary>
            Writes the given byte into this buffer at the current position,
            and then increments the position.
            </summary>
            <param name="b">the byte to be written</param>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Put(System.Int32,System.Byte)">
            <summary>
            Writes the given byte into this buffer at the given index.
            </summary>
            <param name="i">the index at which the byte will be written</param>
            <param name="b">the byte to be written</param>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Put(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given array into this buffer at the current position,
            and then increments the position.
            </summary>
            <param name="src">the array from which bytes are to be read</param>
            <param name="offset">the offset within the array of the first byte to be read</param>
            <param name="length">the number of bytes to be read from the given array</param>
            <returns>itself</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            the preconditions on the offset and length parameters do not hold
            </exception>
            <exception cref="T:System.OverflowException">there is insufficient space in this buffer</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Put(Mina.Core.Buffer.IoBuffer)">
            <summary>
            Writes the content of the specified <paramref name="src"/> into this buffer.
            </summary>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Compact">
            <summary>
            Compacts this buffer.
            </summary>
            <returns>itself</returns>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.Put(System.Byte[])">
            <summary>
            Writes the given array into this buffer at the current position,
            and then increments the position.
            </summary>
            <remarks>
            This method behaves in exactly the same way as
            <example>
            Put(src, 0, src.Length)
            </example>
            </remarks>
            <param name="src">the array from which bytes are to be read</param>
            <returns>itself</returns>
            <exception cref="T:System.OverflowException">there is insufficient space in this buffer</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutString(System.String)">
            <summary>
            Writes the content of <paramref name="s"/> into this buffer using <see cref="P:System.Text.Encoding.UTF8"/>.
            </summary>
            <returns>itself</returns>
            <exception cref="T:System.OverflowException">there is insufficient space in this buffer</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutString(System.String,System.Text.Encoding)">
            <summary>
            Writes the content of <paramref name="s"/> into this buffer using
            the specified <see cref="T:System.Text.Encoding"/>.
            This method doesn't terminate string with <tt>NUL</tt>.
            You have to do it by yourself.
            </summary>
            <returns>itself</returns>
            <exception cref="T:System.OverflowException">there is insufficient space in this buffer</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutString(System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes the content of <paramref name="s"/> into this buffer as a
            <code>NUL</code>-terminated string using the specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <remarks>
            If the charset name of the encoder is UTF-16, you cannot specify odd
            <code>fieldSize</code>, and this method will append two <code>NUL</code>s
            as a terminator.
            Please note that this method doesn't terminate with <code>NUL</code> if
            the input string is longer than <tt>fieldSize</tt>.
            </remarks>
            <param name="s"></param>
            <param name="fieldSize">the maximum number of bytes to write</param>
            <param name="encoding"></param>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetString(System.Text.Encoding)">
            <summary>
            Reads a NUL-terminated string from this buffer using the specified encoding.
            This method reads until the limit of this buffer if no NUL is found.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads a NUL-terminated string from this buffer using the specified decoder and returns it.
            </summary>
            <param name="fieldSize">the maximum number of bytes to read</param>
            <param name="encoding"></param>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetChar">
            <summary>
            Reads the next two bytes at this buffer's current position,
            composing them into a char value according to the current byte order,
            and then increments the position by two.
            </summary>
            <returns>the char value at the buffer's current position</returns>
            <exception cref="T:Mina.Core.Buffer.BufferUnderflowException">there are fewer than two bytes remaining in this buffer</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetChar(System.Int32)">
            <summary>
            Reads two bytes at the given index, composing them into a char value
            according to the current byte order.
            </summary>
            <param name="index">the index from which the bytes will be read</param>
            <returns>the char value at the given index</returns>
            <exception cref="T:System.IndexOutOfRangeException">index is negative or not smaller than the buffer's limit, minus one</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutChar(System.Char)">
            <summary>
            Writes two bytes containing the given char value,
            in the current byte order, into this buffer at the current position,
            and then increments the position by two.
            </summary>
            <param name="value">the char value to be written</param>
            <returns>itself</returns>
            <exception cref="T:System.OverflowException">there are fewer than two bytes remaining in this buffer</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutChar(System.Int32,System.Char)">
            <summary>
            Writes two bytes containing the given char value, in the current byte order,
            into this buffer at the given index.
            </summary>
            <param name="index">the index at which the bytes will be written</param>
            <param name="value">the char value to be written</param>
            <returns>itself</returns>
            <exception cref="T:System.IndexOutOfRangeException">index is negative or not smaller than the buffer's limit, minus one</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetInt16">
            <summary>
            Reads the next two bytes at this buffer's current position,
            composing them into a short value according to the current byte order,
            and then increments the position by two.
            </summary>
            <returns>the short value at the buffer's current position</returns>
            <exception cref="T:Mina.Core.Buffer.BufferUnderflowException">there are fewer than two bytes remaining in this buffer</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetInt16(System.Int32)">
            <summary>
            Reads two bytes at the given index, composing them into a short value
            according to the current byte order.
            </summary>
            <param name="index">the index from which the bytes will be read</param>
            <returns>the short value at the given index</returns>
            <exception cref="T:System.IndexOutOfRangeException">index is negative or not smaller than the buffer's limit, minus one</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutInt16(System.Int16)">
            <summary>
            Writes two bytes containing the given short value,
            in the current byte order, into this buffer at the current position,
            and then increments the position by two.
            </summary>
            <param name="value">the short value to be written</param>
            <returns>itself</returns>
            <exception cref="T:System.OverflowException">there are fewer than two bytes remaining in this buffer</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutInt16(System.Int32,System.Int16)">
            <summary>
            Writes two bytes containing the given short value,
            in the current byte order, into this buffer at the given index.
            </summary>
            <param name="index">the index at which the bytes will be written</param>
            <param name="value">the short value to be written</param>
            <returns>itself</returns>
            <exception cref="T:System.IndexOutOfRangeException">index is negative or not smaller than the buffer's limit, minus one</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetInt32">
            <summary>
            Reads the next four bytes at this buffer's current position,
            composing them into a int value according to the current byte order,
            and then increments the position by four.
            </summary>
            <returns>the int value at the buffer's current position</returns>
            <exception cref="T:Mina.Core.Buffer.BufferUnderflowException">there are fewer than four bytes remaining in this buffer</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetInt32(System.Int32)">
            <summary>
            Reads four bytes at the given index, composing them into a int value
            according to the current byte order.
            </summary>
            <param name="index">the index from which the bytes will be read</param>
            <returns>the int value at the given index</returns>
            <exception cref="T:System.IndexOutOfRangeException">index is negative or not smaller than the buffer's limit, minus three</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutInt32(System.Int32)">
            <summary>
            Writes four bytes containing the given int value,
            in the current byte order, into this buffer at the current position,
            and then increments the position by four.
            </summary>
            <param name="value">the int value to be written</param>
            <returns>itself</returns>
            <exception cref="T:System.OverflowException">there are fewer than four bytes remaining in this buffer</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutInt32(System.Int32,System.Int32)">
            <summary>
            Writes four bytes containing the given int value,
            in the current byte order, into this buffer at the given index.
            </summary>
            <param name="index">the index at which the bytes will be written</param>
            <param name="value">the int value to be written</param>
            <returns>itself</returns>
            <exception cref="T:System.IndexOutOfRangeException">index is negative or not smaller than the buffer's limit, minus three</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetInt64">
            <summary>
            Reads the next eight bytes at this buffer's current position,
            composing them into a long value according to the current byte order,
            and then increments the position by eight.
            </summary>
            <returns>the long value at the buffer's current position</returns>
            <exception cref="T:Mina.Core.Buffer.BufferUnderflowException">there are fewer than eight bytes remaining in this buffer</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetInt64(System.Int32)">
            <summary>
            Reads eight bytes at the given index, composing them into a long value
            according to the current byte order.
            </summary>
            <param name="index">the index from which the bytes will be read</param>
            <returns>the long value at the given index</returns>
            <exception cref="T:System.IndexOutOfRangeException">index is negative or not smaller than the buffer's limit, minus seven</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutInt64(System.Int64)">
            <summary>
            Writes eight bytes containing the given long value,
            in the current byte order, into this buffer at the current position,
            and then increments the position by eight.
            </summary>
            <param name="value">the long value to be written</param>
            <returns>itself</returns>
            <exception cref="T:System.OverflowException">there are fewer than eight bytes remaining in this buffer</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutInt64(System.Int32,System.Int64)">
            <summary>
            Writes eight bytes containing the given long value,
            in the current byte order, into this buffer at the given index.
            </summary>
            <param name="index">the index at which the bytes will be written</param>
            <param name="value">the long value to be written</param>
            <returns>itself</returns>
            <exception cref="T:System.IndexOutOfRangeException">index is negative or not smaller than the buffer's limit, minus seven</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetSingle">
            <summary>
            Reads the next four bytes at this buffer's current position,
            composing them into a float value according to the current byte order,
            and then increments the position by four.
            </summary>
            <returns>the float value at the buffer's current position</returns>
            <exception cref="T:Mina.Core.Buffer.BufferUnderflowException">there are fewer than four bytes remaining in this buffer</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetSingle(System.Int32)">
            <summary>
            Reads four bytes at the given index, composing them into a float value
            according to the current byte order.
            </summary>
            <param name="index">the index from which the bytes will be read</param>
            <returns>the float value at the given index</returns>
            <exception cref="T:System.IndexOutOfRangeException">index is negative or not smaller than the buffer's limit, minus three</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutSingle(System.Single)">
            <summary>
            Writes four bytes containing the given float value,
            in the current byte order, into this buffer at the current position,
            and then increments the position by four.
            </summary>
            <param name="value">the float value to be written</param>
            <returns>itself</returns>
            <exception cref="T:System.OverflowException">there are fewer than four bytes remaining in this buffer</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutSingle(System.Int32,System.Single)">
            <summary>
            Writes four bytes containing the given float value,
            in the current byte order, into this buffer at the given index.
            </summary>
            <param name="index">the index at which the bytes will be written</param>
            <param name="value">the float value to be written</param>
            <returns>itself</returns>
            <exception cref="T:System.IndexOutOfRangeException">index is negative or not smaller than the buffer's limit, minus three</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetDouble">
            <summary>
            Reads the next eight bytes at this buffer's current position,
            composing them into a double value according to the current byte order,
            and then increments the position by eight.
            </summary>
            <returns>the double value at the buffer's current position</returns>
            <exception cref="T:Mina.Core.Buffer.BufferUnderflowException">there are fewer than eight bytes remaining in this buffer</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.GetDouble(System.Int32)">
            <summary>
            Reads eight bytes at the given index, composing them into a double value
            according to the current byte order.
            </summary>
            <param name="index">the index from which the bytes will be read</param>
            <returns>the double value at the given index</returns>
            <exception cref="T:System.IndexOutOfRangeException">index is negative or not smaller than the buffer's limit, minus seven</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutDouble(System.Double)">
            <summary>
            Writes eight bytes containing the given double value,
            in the current byte order, into this buffer at the current position,
            and then increments the position by eight.
            </summary>
            <param name="value">the double value to be written</param>
            <returns>itself</returns>
            <exception cref="T:System.OverflowException">there are fewer than eight bytes remaining in this buffer</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBuffer.PutDouble(System.Int32,System.Double)">
            <summary>
            Writes eight bytes containing the given double value,
            in the current byte order, into this buffer at the given index.
            </summary>
            <param name="index">the index at which the bytes will be written</param>
            <param name="value">the double value to be written</param>
            <returns>itself</returns>
            <exception cref="T:System.IndexOutOfRangeException">index is negative or not smaller than the buffer's limit, minus seven</exception>
            <exception cref="T:System.InvalidOperationException">this buffer is read-only</exception>
        </member>
        <member name="T:Mina.Core.Buffer.IoBufferAllocator">
            <summary>
            Allocates <see cref="T:Mina.Core.Buffer.IoBuffer"/>s and manages them.
            Please implement this interface if you need more advanced memory management scheme.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferAllocator.Allocate(System.Int32)">
            <summary>
            Returns the buffer which is capable of the specified size.
            </summary>
            <param name="capacity">the capacity of the buffer</param>
            <returns>the allocated buffer</returns>
            <exception cref="T:System.ArgumentException">If the <paramref name="capacity"/> is a negative integer</exception>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferAllocator.Wrap(System.Byte[])">
            <summary>
            Wraps the specified byte array into Mina.NET buffer.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferAllocator.Wrap(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Wraps the specified byte array into Mina.NET buffer.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            If the preconditions on the <paramref name="offset"/> and <paramref name="length"/>
            parameters do not hold
            </exception>
        </member>
        <member name="T:Mina.Core.Buffer.IoBufferHexDumper">
            <summary>
            Provides utility methods to dump an <see cref="T:Mina.Core.Buffer.IoBuffer"/> into a hex formatted string.
            </summary>
        </member>
        <member name="T:Mina.Core.Buffer.IoBufferStream">
            <summary>
            Wraps an <see cref="T:Mina.Core.Buffer.IoBuffer"/> as a stream.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferStream.#ctor(Mina.Core.Buffer.IoBuffer)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferStream.Flush">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Buffer.IoBufferWrapper">
            <summary>
            A <see cref="T:Mina.Core.Buffer.IoBuffer"/> that wraps a buffer and proxies any operations to it.
            </summary>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.#ctor(Mina.Core.Buffer.IoBuffer)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferWrapper.BufferAllocator">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferWrapper.Order">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferWrapper.Capacity">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferWrapper.Position">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferWrapper.Limit">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferWrapper.Remaining">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferWrapper.HasRemaining">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferWrapper.AutoExpand">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferWrapper.AutoShrink">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferWrapper.Derived">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferWrapper.MinimumCapacity">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferWrapper.HasArray">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Expand(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Expand(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Shrink">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Sweep">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Sweep(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.FillAndReset(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.FillAndReset(System.Byte,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Fill(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Fill(System.Byte,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetHexDump">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetHexDump(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PrefixedDataAvailable(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PrefixedDataAvailable(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.IndexOf(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetPrefixedString(System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetPrefixedString(System.Int32,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutPrefixedString(System.String,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutPrefixedString(System.String,System.Int32,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetObject">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutObject(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Get">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Get(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Get(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetRemaining">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Free">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Slice">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetSlice(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetSlice(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Duplicate">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.AsReadOnlyBuffer">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Skip(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Put(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Put(System.Int32,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Put(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Put(Mina.Core.Buffer.IoBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Compact">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.Put(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutString(System.String,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutString(System.String,System.Int32,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetString(System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetString(System.Int32,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetChar">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetChar(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutChar(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutChar(System.Int32,System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetInt16">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetInt16(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutInt16(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutInt16(System.Int32,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetInt32">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetInt32(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutInt32(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutInt32(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetInt64">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetInt64(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutInt64(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutInt64(System.Int32,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetSingle">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetSingle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutSingle(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutSingle(System.Int32,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetDouble">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.GetDouble(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutDouble(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Buffer.IoBufferWrapper.PutDouble(System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Buffer.IoBufferWrapper.ReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.File.FileInfoFileRegion">
            <summary>
            <see cref="T:Mina.Core.File.IFileRegion"/> based on a <see cref="T:System.IO.FileInfo"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.File.FileInfoFileRegion.#ctor(System.IO.FileInfo)">
            <summary>
            Instantiates.
            </summary>
            <param name="fileInfo">the file info</param>
        </member>
        <member name="M:Mina.Core.File.FileInfoFileRegion.#ctor(System.IO.FileInfo,System.Int64,System.Int64)">
            <summary>
            Instantiates.
            </summary>
            <param name="fileInfo">the file info</param>
            <param name="position">the start position</param>
            <param name="remainingBytes">the count of remaining bytes</param>
        </member>
        <member name="P:Mina.Core.File.FileInfoFileRegion.FullName">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.File.FileInfoFileRegion.Length">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.File.FileInfoFileRegion.Position">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.File.FileInfoFileRegion.RemainingBytes">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.File.FileInfoFileRegion.WrittenBytes">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.File.FileInfoFileRegion.Read(Mina.Core.Buffer.IoBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.File.FileInfoFileRegion.Update(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.File.IFileRegion">
            <summary>
            Indicates the region of a file to be sent to the remote host.
            </summary>
        </member>
        <member name="P:Mina.Core.File.IFileRegion.FullName">
            <summary>
            Gets the absolute filename for the underlying file.
            </summary>
        </member>
        <member name="P:Mina.Core.File.IFileRegion.Length">
            <summary>
            Gets the total length of the file.
            </summary>
        </member>
        <member name="P:Mina.Core.File.IFileRegion.Position">
            <summary>
            Gets the current file position from which data will be read.
            </summary>
        </member>
        <member name="P:Mina.Core.File.IFileRegion.RemainingBytes">
            <summary>
            Gets the number of bytes remaining to be written from the file
            to the remote host.
            </summary>
        </member>
        <member name="P:Mina.Core.File.IFileRegion.WrittenBytes">
            <summary>
            Gets the total number of bytes already written.
            </summary>
        </member>
        <member name="M:Mina.Core.File.IFileRegion.Read(Mina.Core.Buffer.IoBuffer)">
            <summary>
            Reads as much bytes in to a buffer as the remaining of it.
            </summary>
            <param name="buffer"></param>
            <returns>the actual number of read bytes</returns>
        </member>
        <member name="M:Mina.Core.File.IFileRegion.Update(System.Int64)">
            <summary>
            Updates the current file position based on the specified amount.
            </summary>
        </member>
        <member name="T:Mina.Core.Filterchain.DefaultIoFilterChain">
            <summary>
            A default implementation of <see cref="T:Mina.Core.Filterchain.IoFilterChain"/> that provides
            all operations for developers who want to implement their own
            transport layer once used with <see cref="T:Mina.Core.Session.AbstractIoSession"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.#ctor(Mina.Core.Session.AbstractIoSession)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Filterchain.DefaultIoFilterChain.Session">
            <summary>
            Gets the <see cref="T:Mina.Core.Session.IoSession"/> this chain belongs to.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.FireSessionCreated">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.FireSessionOpened">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.FireSessionClosed">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.FireSessionIdle(Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.FireMessageReceived(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.FireMessageSent(Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.FireExceptionCaught(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.FireInputClosed">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.FireFilterWrite(Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.FireFilterClose">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.OnPreAdd(Mina.Core.Filterchain.Chain{Mina.Core.Filterchain.DefaultIoFilterChain,Mina.Core.Filterchain.IoFilter,Mina.Core.Filterchain.INextFilter}.Entry)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.OnPostAdd(Mina.Core.Filterchain.Chain{Mina.Core.Filterchain.DefaultIoFilterChain,Mina.Core.Filterchain.IoFilter,Mina.Core.Filterchain.INextFilter}.Entry)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.OnPreRemove(Mina.Core.Filterchain.Chain{Mina.Core.Filterchain.DefaultIoFilterChain,Mina.Core.Filterchain.IoFilter,Mina.Core.Filterchain.INextFilter}.Entry)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.OnPostRemove(Mina.Core.Filterchain.Chain{Mina.Core.Filterchain.DefaultIoFilterChain,Mina.Core.Filterchain.IoFilter,Mina.Core.Filterchain.INextFilter}.Entry)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.OnPreReplace(Mina.Core.Filterchain.Chain{Mina.Core.Filterchain.DefaultIoFilterChain,Mina.Core.Filterchain.IoFilter,Mina.Core.Filterchain.INextFilter}.Entry,Mina.Core.Filterchain.IoFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChain.OnPostReplace(Mina.Core.Filterchain.Chain{Mina.Core.Filterchain.DefaultIoFilterChain,Mina.Core.Filterchain.IoFilter,Mina.Core.Filterchain.INextFilter}.Entry,Mina.Core.Filterchain.IoFilter)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Filterchain.DefaultIoFilterChainBuilder">
            <summary>
            The default implementation of <see cref="T:Mina.Core.Filterchain.IoFilterChainBuilder"/> which is useful
            in most cases.  <see cref="T:Mina.Core.Filterchain.DefaultIoFilterChainBuilder"/> has an identical interface
            with <see cref="T:Mina.Core.Filterchain.IoFilter"/>; it contains a list of <see cref="T:Mina.Core.Filterchain.IoFilter"/>s that you can
            modify. The <see cref="T:Mina.Core.Filterchain.IoFilter"/>s which are added to this builder will be appended
            to the <see cref="T:Mina.Core.Filterchain.IoFilterChain"/> when BuildFilterChain(IoFilterChain) is
            invoked.
            However, the identical interface doesn't mean that it behaves in an exactly
            same way with <see cref="T:Mina.Core.Filterchain.IoFilterChain"/>.  <see cref="T:Mina.Core.Filterchain.DefaultIoFilterChainBuilder"/>
            doesn't manage the life cycle of the <see cref="T:Mina.Core.Filterchain.IoFilter"/>s at all, and the
            existing <see cref="T:Mina.Core.Session.IoSession"/>s won't get affected by the changes in this builder.
            <see cref="T:Mina.Core.Filterchain.IoFilterChainBuilder"/>s affect only newly created <see cref="T:Mina.Core.Session.IoSession"/>s.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.#ctor(Mina.Core.Filterchain.DefaultIoFilterChainBuilder)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.GetEntry(System.String)">
            <summary>
            Gets the <see cref="T:Mina.Core.Filterchain.IEntry`2"/> with the specified <paramref name="name"/> in this chain.
            </summary>
            <param name="name">the filter's name we are looking for</param>
            <returns>the <see cref="T:Mina.Core.Filterchain.IEntry`2"/> with the given name, or null if not found</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.Get(System.String)">
            <summary>
            Gets the <see cref="T:Mina.Core.Filterchain.IoFilter"/> with the specified <paramref name="name"/> in this chain.
            </summary>
            <param name="name">the filter's name</param>
            <returns>the <see cref="T:Mina.Core.Filterchain.IoFilter"/>, or null if not found</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.GetAll">
            <summary>
            Gets all <see cref="T:Mina.Core.Filterchain.IEntry`2"/>s in this chain.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.Contains(System.String)">
            <summary>
            Checks if this chain contains a filter with the specified <paramref name="name"/>.
            </summary>
            <param name="name">the filter's name</param>
            <returns>true if this chain contains a filter with the specified <paramref name="name"/></returns>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.AddFirst(System.String,Mina.Core.Filterchain.IoFilter)">
            <summary>
            Adds the specified filter with the specified name at the beginning of this chain.
            </summary>
            <param name="name">the filter's name</param>
            <param name="filter">the filter to add</param>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.AddLast(System.String,Mina.Core.Filterchain.IoFilter)">
            <summary>
            Adds the specified filter with the specified name at the end of this chain.
            </summary>
            <param name="name">the filter's name</param>
            <param name="filter">the filter to add</param>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.AddBefore(System.String,System.String,Mina.Core.Filterchain.IoFilter)">
            <summary>
            Adds the specified filter with the specified name just before the filter whose name is
            <paramref name="baseName"/> in this chain.
            </summary>
            <param name="baseName">the targeted filter's name</param>
            <param name="name">the filter's name</param>
            <param name="filter">the filter to add</param>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.AddAfter(System.String,System.String,Mina.Core.Filterchain.IoFilter)">
            <summary>
            Adds the specified filter with the specified name just after the filter whose name is
            <paramref name="baseName"/> in this chain.
            </summary>
            <param name="baseName">the targeted filter's name</param>
            <param name="name">the filter's name</param>
            <param name="filter">the filter to add</param>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.Remove(System.String)">
            <summary>
            Removes the filter with the specified name from this chain.
            </summary>
            <param name="name">the name of the filter to remove</param>
            <returns>the removed filter</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.Replace(System.String,Mina.Core.Filterchain.IoFilter)">
            <summary>
            Replace the filter with the specified name with the specified new filter.
            </summary>
            <param name="name">the name of the filter to replace</param>
            <param name="newFilter">the new filter</param>
            <returns>the old filter</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.Clear">
            <summary>
            Removes all filters added to this chain.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.DefaultIoFilterChainBuilder.BuildFilterChain(Mina.Core.Filterchain.IoFilterChain)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Filterchain.IEntry`2">
            <summary>
            Represents a name-filter pair that an <see cref="T:Mina.Core.Filterchain.IChain`2"/> contains.
            </summary>
        </member>
        <member name="P:Mina.Core.Filterchain.IEntry`2.Name">
            <summary>
            Gets the name of the filter.
            </summary>
        </member>
        <member name="P:Mina.Core.Filterchain.IEntry`2.Filter">
            <summary>
            Gets the filter.
            </summary>
        </member>
        <member name="P:Mina.Core.Filterchain.IEntry`2.NextFilter">
            <summary>
            Gets the <typeparamref name="TNextFilter"/> of the filter.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IEntry`2.AddBefore(System.String,`0)">
            <summary>
            Adds the specified filter with the specified name just before this entry.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IEntry`2.AddAfter(System.String,`0)">
            <summary>
            Adds the specified filter with the specified name just after this entry.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IEntry`2.Replace(`0)">
            <summary>
            Replace the filter of this entry with the specified new filter.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IEntry`2.Remove">
            <summary>
            Removes this entry from the chain it belongs to.
            </summary>
        </member>
        <member name="T:Mina.Core.Filterchain.INextFilter">
            <summary>
            Represents the next <see cref="T:Mina.Core.Filterchain.IoFilter"/> in <see cref="T:Mina.Core.Filterchain.IoFilterChain"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.INextFilter.SessionCreated(Mina.Core.Session.IoSession)">
            <summary>
            Forwards <code>SessionCreated</code> event to next filter.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.INextFilter.SessionOpened(Mina.Core.Session.IoSession)">
            <summary>
            Forwards <code>SessionOpened</code> event to next filter.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.INextFilter.SessionClosed(Mina.Core.Session.IoSession)">
            <summary>
            Forwards <code>SessionClosed</code> event to next filter.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.INextFilter.SessionIdle(Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <summary>
            Forwards <code>SessionIdle</code> event to next filter.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.INextFilter.ExceptionCaught(Mina.Core.Session.IoSession,System.Exception)">
            <summary>
            Forwards <code>ExceptionCaught</code> event to next filter.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.INextFilter.InputClosed(Mina.Core.Session.IoSession)">
            <summary>
            Forwards <code>InputClosed</code> event to next filter.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.INextFilter.MessageReceived(Mina.Core.Session.IoSession,System.Object)">
            <summary>
            Forwards <code>MessageReceived</code> event to next filter.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.INextFilter.MessageSent(Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <summary>
            Forwards <code>MessageSent</code> event to next filter.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.INextFilter.FilterClose(Mina.Core.Session.IoSession)">
            <summary>
            Forwards <code>FilterClose</code> event to next filter.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.INextFilter.FilterWrite(Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <summary>
            Forwards <code>FilterWrite</code> event to next filter.
            </summary>
        </member>
        <member name="T:Mina.Core.Filterchain.IChain`2">
            <summary>
            Represents a chain of filters.
            </summary>
            <typeparam name="TFilter">the type of filters</typeparam>
            <typeparam name="TNextFilter">the type of next filters</typeparam>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.GetEntry(System.String)">
            <summary>
            Gets the <see cref="T:Mina.Core.Filterchain.IEntry`2"/> with the specified <paramref name="name"/> in this chain.
            </summary>
            <param name="name">the filter's name we are looking for</param>
            <returns>the <see cref="T:Mina.Core.Filterchain.IEntry`2"/> with the given name, or null if not found</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.GetEntry(`0)">
            <summary>
            Gets the <see cref="T:Mina.Core.Filterchain.IEntry`2"/> with the specified <paramref name="filter"/> in this chain.
            </summary>
            <param name="filter">the filter we are looking for</param>
            <returns>the <see cref="T:Mina.Core.Filterchain.IEntry`2"/>, or null if not found</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.GetEntry(System.Type)">
            <summary>
            Gets the <see cref="T:Mina.Core.Filterchain.IEntry`2"/> with the specified <paramref name="filterType"/> in this chain.
            </summary>
            <remarks>If there's more than one filter with the specified type, the first match will be chosen.</remarks>
            <param name="filterType">the type of filter we are looking for</param>
            <returns>the <see cref="T:Mina.Core.Filterchain.IEntry`2"/>, or null if not found</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.GetEntry``1">
            <summary>
            Gets the <see cref="T:Mina.Core.Filterchain.IEntry`2"/> with the specified <typeparamref name="T"/> in this chain.
            </summary>
            <remarks>If there's more than one filter with the specified type, the first match will be chosen.</remarks>
            <typeparam name="T">the type of filter we are looking for</typeparam>
            <returns>the <see cref="T:Mina.Core.Filterchain.IEntry`2"/>, or null if not found</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.Get(System.String)">
            <summary>
            Gets the <typeparamref name="TFilter"/> with the specified <paramref name="name"/> in this chain.
            </summary>
            <param name="name">the filter's name</param>
            <returns>the <typeparamref name="TFilter"/>, or null if not found</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.Get(System.Type)">
            <summary>
            Gets the <typeparamref name="TFilter"/> with the specified <paramref name="filterType"/> in this chain.
            </summary>
            <param name="filterType">the type of filter we are looking for</param>
            <returns>the <typeparamref name="TFilter"/>, or null if not found</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.GetNextFilter(System.String)">
            <summary>
            Gets the <typeparamref name="TNextFilter"/> of the <typeparamref name="TFilter"/>
            with the specified <paramref name="name"/> in this chain.
            </summary>
            <param name="name">the filter's name</param>
            <returns>the <typeparamref name="TNextFilter"/>, or null if not found</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.GetNextFilter(`0)">
            <summary>
            Gets the <typeparamref name="TNextFilter"/> of the <typeparamref name="TFilter"/>
            with the specified <paramref name="filter"/> in this chain.
            </summary>
            <param name="filter">the filter</param>
            <returns>the <typeparamref name="TNextFilter"/>, or null if not found</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.GetNextFilter(System.Type)">
            <summary>
            Gets the <typeparamref name="TNextFilter"/> of the <typeparamref name="TFilter"/>
            with the specified <paramref name="filterType"/> in this chain.
            </summary>
            <remarks>If there's more than one filter with the specified type, the first match will be chosen.</remarks>
            <param name="filterType">the type of filter</param>
            <returns>the <typeparamref name="TNextFilter"/>, or null if not found</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.GetNextFilter``1">
            <summary>
            Gets the <typeparamref name="TNextFilter"/> of the <typeparamref name="TFilter"/>
            with the specified <typeparamref name="T"/> in this chain.
            </summary>
            <remarks>If there's more than one filter with the specified type, the first match will be chosen.</remarks>
            <typeparam name="T">the type of filter</typeparam>
            <returns>the <typeparamref name="TNextFilter"/>, or null if not found</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.GetAll">
            <summary>
            Gets all <see cref="T:Mina.Core.Filterchain.IEntry`2"/>s in this chain.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.Contains(System.String)">
            <summary>
            Checks if this chain contains a filter with the specified <paramref name="name"/>.
            </summary>
            <param name="name">the filter's name</param>
            <returns>true if this chain contains a filter with the specified <paramref name="name"/></returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.Contains(`0)">
            <summary>
            Checks if this chain contains the specified <paramref name="filter"/>.
            </summary>
            <param name="filter">the filter</param>
            <returns>true if this chain contains the specified <paramref name="filter"/></returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.Contains(System.Type)">
            <summary>
            Checks if this chain contains a filter with the specified <paramref name="filterType"/>.
            </summary>
            <param name="filterType">the filter's type</param>
            <returns>true if this chain contains a filter with the specified <paramref name="filterType"/></returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.Contains``1">
            <summary>
            Checks if this chain contains a filter with the specified <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">the filter's type</typeparam>
            <returns>true if this chain contains a filter with the specified <typeparamref name="T"/></returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.AddFirst(System.String,`0)">
            <summary>
            Adds the specified filter with the specified name at the beginning of this chain.
            </summary>
            <param name="name">the filter's name</param>
            <param name="filter">the filter to add</param>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.AddLast(System.String,`0)">
            <summary>
            Adds the specified filter with the specified name at the end of this chain.
            </summary>
            <param name="name">the filter's name</param>
            <param name="filter">the filter to add</param>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.AddBefore(System.String,System.String,`0)">
            <summary>
            Adds the specified filter with the specified name just before the filter whose name is
            <paramref name="baseName"/> in this chain.
            </summary>
            <param name="baseName">the targeted filter's name</param>
            <param name="name">the filter's name</param>
            <param name="filter">the filter to add</param>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.AddAfter(System.String,System.String,`0)">
            <summary>
            Adds the specified filter with the specified name just after the filter whose name is
            <paramref name="baseName"/> in this chain.
            </summary>
            <param name="baseName">the targeted filter's name</param>
            <param name="name">the filter's name</param>
            <param name="filter">the filter to add</param>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.Replace(System.String,`0)">
            <summary>
            Replace the filter with the specified name with the specified new filter.
            </summary>
            <param name="name">the name of the filter to replace</param>
            <param name="newFilter">the new filter</param>
            <returns>the old filter</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.Replace(`0,`0)">
            <summary>
            Replace the specified filter with the specified new filter.
            </summary>
            <param name="oldFilter">the filter to replace</param>
            <param name="newFilter">the new filter</param>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.Remove(System.String)">
            <summary>
            Removes the filter with the specified name from this chain.
            </summary>
            <param name="name">the name of the filter to remove</param>
            <returns>the removed filter</returns>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.Remove(`0)">
            <summary>
            Removes the specified filter.
            </summary>
            <param name="filter">the filter to remove</param>
        </member>
        <member name="M:Mina.Core.Filterchain.IChain`2.Clear">
            <summary>
            Removes all filters added to this chain.
            </summary>
        </member>
        <member name="T:Mina.Core.Filterchain.Chain`3">
            <summary>
            Abstract implementation of <see cref="T:Mina.Core.Filterchain.IChain`2"/>
            </summary>
            <typeparam name="TChain">the actual type of the chain</typeparam>
            <typeparam name="TFilter">the type of filters</typeparam>
            <typeparam name="TNextFilter">the type of next filters</typeparam>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.#ctor(System.Func{Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry,`2},System.Func{`1},System.Func{`1})">
            <summary>
            Instantiates.
            </summary>
            <param name="nextFilterFactory">the factory to create <typeparamref name="TNextFilter"/>s by (entry)</param>
            <param name="headFilterFactory">the factory to create the head <typeparamref name="TFilter"/></param>
            <param name="tailFilterFactory">the factory to create the tail <typeparamref name="TFilter"/></param>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.#ctor(System.Func{`0,Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry,Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry,System.String,`1,Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry},System.Func{`1},System.Func{`1})">
            <summary>
            Instantiates.
            </summary>
            <param name="entryFactory">the factory to create entries by (chain, prev, next, name, filter)</param>
            <param name="headFilterFactory">the factory to create the head <typeparamref name="TFilter"/></param>
            <param name="tailFilterFactory">the factory to create the tail <typeparamref name="TFilter"/></param>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.#ctor(System.Func{`0,Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry,Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry,System.String,`1,Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry},System.Func{`1},System.Func{`1},System.Func{`1,`1,System.Boolean})">
            <summary>
            Instantiates.
            </summary>
            <param name="entryFactory">the factory to create entries by (chain, prev, next, name, filter)</param>
            <param name="headFilterFactory">the factory to create the head <typeparamref name="TFilter"/></param>
            <param name="tailFilterFactory">the factory to create the tail <typeparamref name="TFilter"/></param>
            <param name="equalsFunc">the function to check equality between two <typeparamref name="TFilter"/>s</param>
        </member>
        <member name="P:Mina.Core.Filterchain.Chain`3.Head">
            <summary>
            Head of this chain.
            </summary>
        </member>
        <member name="P:Mina.Core.Filterchain.Chain`3.Tail">
            <summary>
            Tail of this chain.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Get(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.GetEntry(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.GetEntry(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.GetEntry(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.GetEntry``1">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.GetNextFilter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.GetNextFilter(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.GetNextFilter(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.GetNextFilter``1">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.GetAll">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Contains(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Contains(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Contains(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Contains``1">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.AddFirst(System.String,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.AddLast(System.String,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.AddBefore(System.String,System.String,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.AddAfter(System.String,System.String,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Replace(System.String,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Replace(`1,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Remove(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Deregister0(Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry)">
            <summary>
            Deregister an entry from this chain.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.OnPreAdd(Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry)">
            <summary>
            Fires before the entry is added to this chain.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.OnPostAdd(Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry)">
            <summary>
            Fires after the entry is added to this chain.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.OnPreRemove(Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry)">
            <summary>
            Fires before the entry is removed to this chain.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.OnPostRemove(Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry)">
            <summary>
            Fires after the entry is removed to this chain.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.OnPreReplace(Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry,`1)">
            <summary>
            Fires after the entry is replaced to this chain.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.OnPostReplace(Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry,`1)">
            <summary>
            Fires after the entry is removed to this chain.
            </summary>
        </member>
        <member name="T:Mina.Core.Filterchain.Chain`3.Entry">
            <summary>
            Represents an entry of filter in the chain.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Entry.#ctor(`0,Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry,Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry,System.String,`1,System.Func{Mina.Core.Filterchain.Chain{`0,`1,`2}.Entry,`2})">
            <summary>
            Instantiates.
            </summary>
            <param name="chain">the chain this entry belongs to</param>
            <param name="prevEntry">the previous one</param>
            <param name="nextEntry">the next one</param>
            <param name="name">the name of this entry</param>
            <param name="filter">the associated <typeparamref name="TFilter"/></param>
            <param name="nextFilterFactory">the factory to create <typeparamref name="TNextFilter"/> by (entry)</param>
        </member>
        <member name="P:Mina.Core.Filterchain.Chain`3.Entry.Name">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Filterchain.Chain`3.Entry.Filter">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Filterchain.Chain`3.Entry.NextFilter">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Filterchain.Chain`3.Entry.Chain">
            <summary>
            Gets the chain this entry belongs to.
            </summary>
        </member>
        <member name="P:Mina.Core.Filterchain.Chain`3.Entry.PrevEntry">
            <summary>
            Gets the previous entry in the chain.
            </summary>
        </member>
        <member name="P:Mina.Core.Filterchain.Chain`3.Entry.NextEntry">
            <summary>
            Gets the next entry in the chain.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Entry.AddBefore(System.String,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Entry.AddAfter(System.String,`1)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Entry.Replace(`1)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Entry.Remove">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.Chain`3.Entry.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Filterchain.IoFilter">
            <summary>
            A filter which intercepts <see cref="T:Mina.Core.Service.IoHandler"/> events like Servlet filters.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.Init">
            <summary>
            Invoked by <see cref="T:Mina.Filter.Util.ReferenceCountingFilter"/> when this filter
            is added to a <see cref="T:Mina.Core.Filterchain.IoFilterChain"/> at the first time, so you can
            initialize shared resources.  Please note that this method is never
            called if you don't wrap a filter with <see cref="T:Mina.Filter.Util.ReferenceCountingFilter"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.Destroy">
            <summary>
            Invoked by <see cref="T:Mina.Filter.Util.ReferenceCountingFilter"/> when this filter
            is not used by any <see cref="T:Mina.Core.Filterchain.IoFilterChain"/> anymore, so you can destroy
            shared resources.  Please note that this method is never called if
            you don't wrap a filter with <see cref="T:Mina.Filter.Util.ReferenceCountingFilter"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.OnPreAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <summary>
            Invoked before this filter is added to the specified <paramref name="parent"/>.
            </summary>
            <remarks>
            Please note that this method can be invoked more than once if
            this filter is added to more than one parents. This method is not
            invoked before <see cref="M:Mina.Core.Filterchain.IoFilter.Init"/> is invoked.
            </remarks>
            <param name="parent">the parent who called this method</param>
            <param name="name">the name assigned to this filter</param>
            <param name="nextFilter">the <see cref="T:Mina.Core.Filterchain.INextFilter"/> for this filter</param>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.OnPostAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <summary>
            Invoked after this filter is added to the specified <paramref name="parent"/>.
            </summary>
            <remarks>
            Please note that this method can be invoked more than once if
            this filter is added to more than one parents. This method is not
            invoked before <see cref="M:Mina.Core.Filterchain.IoFilter.Init"/> is invoked.
            </remarks>
            <param name="parent">the parent who called this method</param>
            <param name="name">the name assigned to this filter</param>
            <param name="nextFilter">the <see cref="T:Mina.Core.Filterchain.INextFilter"/> for this filter</param>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.OnPreRemove(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <summary>
            Invoked before this filter is removed from the specified <paramref name="parent"/>.
            </summary>
            <remarks>
            Please note that this method can be invoked more than once if
            this filter is removed from more than one parents.
            This method is always invoked before <see cref="M:Mina.Core.Filterchain.IoFilter.Destroy"/> is invoked.
            </remarks>
            <param name="parent">the parent who called this method</param>
            <param name="name">the name assigned to this filter</param>
            <param name="nextFilter">the <see cref="T:Mina.Core.Filterchain.INextFilter"/> for this filter</param>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.OnPostRemove(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <summary>
            Invoked after this filter is removed from the specified <paramref name="parent"/>.
            </summary>
            <remarks>
            Please note that this method can be invoked more than once if
            this filter is removed from more than one parents.
            This method is always invoked before <see cref="M:Mina.Core.Filterchain.IoFilter.Destroy"/> is invoked.
            </remarks>
            <param name="parent">the parent who called this method</param>
            <param name="name">the name assigned to this filter</param>
            <param name="nextFilter">the <see cref="T:Mina.Core.Filterchain.INextFilter"/> for this filter</param>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.SessionCreated(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <summary>
            Filters <see cref="M:Mina.Core.Service.IoHandler.SessionCreated(Mina.Core.Session.IoSession)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.SessionOpened(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <summary>
            Filters <see cref="M:Mina.Core.Service.IoHandler.SessionOpened(Mina.Core.Session.IoSession)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.SessionClosed(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <summary>
            Filters <see cref="M:Mina.Core.Service.IoHandler.SessionClosed(Mina.Core.Session.IoSession)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.SessionIdle(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <summary>
            Filters <see cref="M:Mina.Core.Service.IoHandler.SessionIdle(Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.ExceptionCaught(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Exception)">
            <summary>
            Filters <see cref="M:Mina.Core.Service.IoHandler.ExceptionCaught(Mina.Core.Session.IoSession,System.Exception)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.InputClosed(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <summary>
            Filters <see cref="M:Mina.Core.Service.IoHandler.InputClosed(Mina.Core.Session.IoSession)"/> event.
            </summary>
            <param name="nextFilter">
            The <see cref="T:Mina.Core.Filterchain.INextFilter"/> for this filter.
            You can reuse this object until this filter is removed from the chain.
            </param>
            <param name="session">The <see cref="T:Mina.Core.Session.IoSession"/> which has received this event.</param>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)">
            <summary>
            Filters <see cref="M:Mina.Core.Service.IoHandler.MessageReceived(Mina.Core.Session.IoSession,System.Object)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.MessageSent(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <summary>
            Filters <see cref="M:Mina.Core.Service.IoHandler.MessageSent(Mina.Core.Session.IoSession,System.Object)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.FilterClose(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <summary>
            Filters <see cref="M:Mina.Core.Session.IoSession.Close(System.Boolean)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilter.FilterWrite(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <summary>
            Filters <see cref="M:Mina.Core.Session.IoSession.Write(System.Object)"/> event.
            </summary>
        </member>
        <member name="T:Mina.Core.Filterchain.IoFilterAdapter">
            <summary>
            An adapter class for <see cref="T:Mina.Core.Filterchain.IoFilter"/>.  You can extend
            this class and selectively override required event filter methods only.  All
            methods forwards events to the next filter by default.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.Init">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.Destroy">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.OnPreAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.OnPostAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.OnPreRemove(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.OnPostRemove(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.SessionCreated(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.SessionOpened(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.SessionClosed(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.SessionIdle(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.ExceptionCaught(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.InputClosed(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.MessageSent(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.FilterClose(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterAdapter.FilterWrite(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Filterchain.IoFilterChain">
            <summary>
            A container of <see cref="T:Mina.Core.Filterchain.IoFilter"/>s that forwards <see cref="T:Mina.Core.Service.IoHandler"/> events
            to the consisting filters and terminal <see cref="T:Mina.Core.Service.IoHandler"/> sequentially.
            Every <see cref="T:Mina.Core.Session.IoSession"/> has its own <see cref="T:Mina.Core.Filterchain.IoFilterChain"/> (1-to-1 relationship).
            </summary>
        </member>
        <member name="P:Mina.Core.Filterchain.IoFilterChain.Session">
            <summary>
            Gets the parent <see cref="T:Mina.Core.Session.IoSession"/> of this chain.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterChain.FireSessionCreated">
            <summary>
            Fires a <see cref="M:Mina.Core.Service.IoHandler.SessionCreated(Mina.Core.Session.IoSession)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterChain.FireSessionOpened">
            <summary>
            Fires a <see cref="M:Mina.Core.Service.IoHandler.SessionOpened(Mina.Core.Session.IoSession)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterChain.FireSessionClosed">
            <summary>
            Fires a <see cref="M:Mina.Core.Service.IoHandler.SessionClosed(Mina.Core.Session.IoSession)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterChain.FireSessionIdle(Mina.Core.Session.IdleStatus)">
            <summary>
            Fires a <see cref="M:Mina.Core.Service.IoHandler.SessionIdle(Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterChain.FireMessageReceived(System.Object)">
            <summary>
            Fires a <see cref="M:Mina.Core.Service.IoHandler.MessageReceived(Mina.Core.Session.IoSession,System.Object)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterChain.FireMessageSent(Mina.Core.Write.IWriteRequest)">
            <summary>
            Fires a <see cref="M:Mina.Core.Service.IoHandler.MessageSent(Mina.Core.Session.IoSession,System.Object)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterChain.FireExceptionCaught(System.Exception)">
            <summary>
            Fires a <see cref="M:Mina.Core.Service.IoHandler.ExceptionCaught(Mina.Core.Session.IoSession,System.Exception)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterChain.FireInputClosed">
            <summary>
            Fires a <see cref="M:Mina.Core.Service.IoHandler.InputClosed(Mina.Core.Session.IoSession)"/> event. Most users don't
            need to call this method at all. Please use this method only when you
            implement a new transport or fire a virtual event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterChain.FireFilterWrite(Mina.Core.Write.IWriteRequest)">
            <summary>
            Fires a <see cref="M:Mina.Core.Session.IoSession.Write(System.Object)"/> event.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterChain.FireFilterClose">
            <summary>
            Fires a <see cref="M:Mina.Core.Session.IoSession.Close(System.Boolean)"/> event.
            </summary>
        </member>
        <member name="T:Mina.Core.Filterchain.IoFilterChainBuilder">
            <summary>
            An interface that builds <see cref="T:Mina.Core.Filterchain.IoFilterChain"/> in predefined way
            when <see cref="T:Mina.Core.Session.IoSession"/> is created.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterChainBuilder.BuildFilterChain(Mina.Core.Filterchain.IoFilterChain)">
            <summary>
            Builds the specified <paramref name="chain"/>.
            </summary>
            <param name="chain">the chain to build</param>
        </member>
        <member name="T:Mina.Core.Filterchain.IoFilterEvent">
            <summary>
            An I/O event or an I/O request that MINA provides for <see cref="T:Mina.Core.Filterchain.IoFilter"/>s.
            It is usually used by internal components to store I/O events.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterEvent.#ctor(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoEventType,Mina.Core.Session.IoSession,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Filterchain.IoFilterEvent.NextFilter">
            <summary>
            Gets the next filter.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterEvent.Fire">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Filterchain.IoFilterLifeCycleException">
            <summary>
            An exception thrown when <see cref="M:Mina.Core.Filterchain.IoFilter.Init"/> or
            <see cref="M:Mina.Core.Filterchain.IoFilter.OnPostAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)"/> failed.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterLifeCycleException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterLifeCycleException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterLifeCycleException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterLifeCycleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.IoFilterLifeCycleException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="T:Mina.Core.Filterchain.VirtualDefaultIoFilterChain">
            <summary>
            A default implementation of <see cref="T:Mina.Core.Filterchain.IoFilterChain"/> that provides
            all operations for developers who want to implement their own
            transport layer once used with <see cref="T:Mina.Core.Session.AbstractIoSession"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.#ctor(Mina.Core.Session.AbstractIoSession)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.Session">
            <summary>
            Gets the <see cref="T:Mina.Core.Session.IoSession"/> this chain belongs to.
            </summary>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.FireSessionCreated">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.FireSessionOpened">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.FireSessionClosed">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.FireSessionIdle(Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.FireMessageReceived(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.FireMessageSent(Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.FireExceptionCaught(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.FireInputClosed">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.FireFilterWrite(Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.FireFilterClose">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.OnPreAdd(Mina.Core.Filterchain.Chain{Mina.Core.Filterchain.VirtualDefaultIoFilterChain,Mina.Core.Filterchain.IoFilter,Mina.Core.Filterchain.INextFilter}.Entry)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.OnPostAdd(Mina.Core.Filterchain.Chain{Mina.Core.Filterchain.VirtualDefaultIoFilterChain,Mina.Core.Filterchain.IoFilter,Mina.Core.Filterchain.INextFilter}.Entry)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.OnPreRemove(Mina.Core.Filterchain.Chain{Mina.Core.Filterchain.VirtualDefaultIoFilterChain,Mina.Core.Filterchain.IoFilter,Mina.Core.Filterchain.INextFilter}.Entry)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.OnPostRemove(Mina.Core.Filterchain.Chain{Mina.Core.Filterchain.VirtualDefaultIoFilterChain,Mina.Core.Filterchain.IoFilter,Mina.Core.Filterchain.INextFilter}.Entry)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.OnPreReplace(Mina.Core.Filterchain.Chain{Mina.Core.Filterchain.VirtualDefaultIoFilterChain,Mina.Core.Filterchain.IoFilter,Mina.Core.Filterchain.INextFilter}.Entry,Mina.Core.Filterchain.IoFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Filterchain.VirtualDefaultIoFilterChain.OnPostReplace(Mina.Core.Filterchain.Chain{Mina.Core.Filterchain.VirtualDefaultIoFilterChain,Mina.Core.Filterchain.IoFilter,Mina.Core.Filterchain.INextFilter}.Entry,Mina.Core.Filterchain.IoFilter)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Future.CompositeIoFuture`1">
            <summary>
            An <see cref="T:Mina.Core.Future.IoFuture"/> of <see cref="T:Mina.Core.Future.IoFuture"/>s.
            It is useful when you want to get notified when all <see cref="T:Mina.Core.Future.IoFuture"/>s are complete.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.CompositeIoFuture`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            </summary>
        </member>
        <member name="T:Mina.Core.Future.DefaultCloseFuture">
            <summary>
            A default implementation of <see cref="T:Mina.Core.Future.ICloseFuture"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.DefaultCloseFuture.#ctor(Mina.Core.Session.IoSession)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Future.DefaultCloseFuture.Closed">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Future.DefaultCloseFuture.Await">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Future.ICloseFuture">
            <summary>
            An <see cref="T:Mina.Core.Future.IoFuture"/> for asynchronous close requests.
            </summary>
        </member>
        <member name="P:Mina.Core.Future.ICloseFuture.Closed">
            <summary>
            Gets or sets a value indicating if the close request is finished and
            the associated <see cref="T:Mina.Core.Session.IoSession"/> been closed.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.ICloseFuture.Await">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Future.IConnectFuture">
            <summary>
            An <see cref="T:Mina.Core.Future.IoFuture"/> for asynchronous connect requests.
            </summary>
        </member>
        <member name="P:Mina.Core.Future.IConnectFuture.Connected">
            <summary>
            Returns <code>true</code> if the connect operation is finished successfully.
            </summary>
        </member>
        <member name="P:Mina.Core.Future.IConnectFuture.Canceled">
            <summary>
            Returns <code>true</code> if the connect operation has been
            canceled by <see cref="M:Mina.Core.Future.IConnectFuture.Cancel"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Future.IConnectFuture.Exception">
            <summary>
            Gets or sets the cause of the connection failure.
            </summary>
            <remarks>
            Returns null if the connect operation is not finished yet,
            or if the connection attempt is successful.
            </remarks>
        </member>
        <member name="M:Mina.Core.Future.IConnectFuture.SetSession(Mina.Core.Session.IoSession)">
            <summary>
            Sets the newly connected session and notifies all threads waiting for this future.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Mina.Core.Future.IConnectFuture.Cancel">
            <summary>
            Cancels the connection attempt and notifies all threads waiting for this future.
            <returns>
            <code>true</code> if the future has been cancelled by this call,
            <code>false</code>if the future was already cancelled.
            </returns>
            </summary>
        </member>
        <member name="M:Mina.Core.Future.IConnectFuture.Await">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Future.DefaultConnectFuture">
            <summary>
            A default implementation of <see cref="T:Mina.Core.Future.IConnectFuture"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.DefaultConnectFuture.NewFailedFuture(System.Exception)">
            <summary>
            Returns a new <see cref="T:Mina.Core.Future.IConnectFuture"/> which is already marked as 'failed to connect'.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.DefaultConnectFuture.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Future.DefaultConnectFuture.Connected">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Future.DefaultConnectFuture.Canceled">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Future.DefaultConnectFuture.Exception">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Future.DefaultConnectFuture.Session">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Future.DefaultConnectFuture.SetSession(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Future.DefaultConnectFuture.Cancel">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Future.DefaultConnectFuture.Await">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Future.IReadFuture">
            <summary>
            An <see cref="T:Mina.Core.Future.IoFuture"/> for asynchronous read requests.
            </summary>
        </member>
        <member name="P:Mina.Core.Future.IReadFuture.Message">
            <summary>
            Gets or sets the received message.
            </summary>
            <remarks>
            Returns null if this future is not ready or the associated
            <see cref="T:Mina.Core.Session.IoSession"/> has been closed.
            All threads waiting for will be notified while being set.
            </remarks>
        </member>
        <member name="P:Mina.Core.Future.IReadFuture.Read">
            <summary>
            Returns <code>true</code> if a message was received successfully.
            </summary>
        </member>
        <member name="P:Mina.Core.Future.IReadFuture.Closed">
            <summary>
            Gets or sets a value indicating if the <see cref="T:Mina.Core.Session.IoSession"/>
            associated with this future has been closed.
            </summary>
        </member>
        <member name="P:Mina.Core.Future.IReadFuture.Exception">
            <summary>
            Gets or sets the cause of the read failure if and only if the read
            operation has failed due to an <see cref="P:Mina.Core.Future.IReadFuture.Exception"/>.
            Otherwise null is returned.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.IReadFuture.Await">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Future.DefaultReadFuture">
            <summary>
            A default implementation of <see cref="T:Mina.Core.Future.IReadFuture"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.DefaultReadFuture.#ctor(Mina.Core.Session.IoSession)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Future.DefaultReadFuture.Message">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Future.DefaultReadFuture.Read">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Future.DefaultReadFuture.Closed">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Future.DefaultReadFuture.Exception">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Future.DefaultReadFuture.Await">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Future.DefaultIoFuture">
            <summary>
            A default implementation of <see cref="T:Mina.Core.Future.IoFuture"/> associated with an <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.DefaultIoFuture.#ctor(Mina.Core.Session.IoSession)">
            <summary>
            </summary>
        </member>
        <member name="E:Mina.Core.Future.DefaultIoFuture.Complete">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Future.DefaultIoFuture.Session">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Future.DefaultIoFuture.Done">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Future.DefaultIoFuture.Value">
            <summary>
            Gets or sets the value associated with this future.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.DefaultIoFuture.SetValue(System.Object)">
            <summary>
            Sets the result of the asynchronous operation, and mark it as finished.
            </summary>
            <param name="value">the result to store into the future</param>
            <returns>
            <code>true</code> if the value has been set,
            <code>false</code> if the future already has a value (thus is in ready state).
            </returns>
        </member>
        <member name="M:Mina.Core.Future.DefaultIoFuture.Await">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Future.DefaultIoFuture.Await(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Future.DefaultIoFuture.Dispose">
            <summary>
            Disposes resources.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.DefaultIoFuture.Dispose(System.Boolean)">
            <summary>
            Disposes resources.
            </summary>
        </member>
        <member name="T:Mina.Core.Future.DefaultWriteFuture">
            <summary>
            A default implementation of <see cref="T:Mina.Core.Future.IWriteFuture"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.DefaultWriteFuture.NewWrittenFuture(Mina.Core.Session.IoSession)">
            <summary>
            Returns a new <see cref="T:Mina.Core.Future.DefaultWriteFuture"/> which is already marked as 'written'.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.DefaultWriteFuture.NewNotWrittenFuture(Mina.Core.Session.IoSession,System.Exception)">
            <summary>
            Returns a new <see cref="T:Mina.Core.Future.DefaultWriteFuture"/> which is already marked as 'not written'.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.DefaultWriteFuture.#ctor(Mina.Core.Session.IoSession)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Future.DefaultWriteFuture.Written">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Future.DefaultWriteFuture.Exception">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Future.DefaultWriteFuture.Await">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Future.IoFuture">
            <summary>
            Represents the completion of an asynchronous I/O operation on an <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Future.IoFuture.Session">
            <summary>
            Gets the <see cref="T:Mina.Core.Session.IoSession"/> which is associated with this future.
            </summary>
        </member>
        <member name="P:Mina.Core.Future.IoFuture.Done">
            <summary>
            Returns if the asynchronous operation is completed.
            </summary>
        </member>
        <member name="E:Mina.Core.Future.IoFuture.Complete">
            <summary>
            Event that this future is completed.
            If the listener is added after the completion, the listener is directly notified.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.IoFuture.Await">
            <summary>
            Wait for the asynchronous operation to complete.
            </summary>
            <returns>self</returns>
        </member>
        <member name="M:Mina.Core.Future.IoFuture.Await(System.Int32)">
            <summary>
            Wait for the asynchronous operation to complete with the specified timeout.
            </summary>
            <returns><tt>true</tt> if the operation is completed</returns>
        </member>
        <member name="T:Mina.Core.Future.IoFutureEventArgs">
            <summary>
            Contains data for events of <see cref="T:Mina.Core.Future.IoFuture"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.IoFutureEventArgs.#ctor(Mina.Core.Future.IoFuture)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Future.IoFutureEventArgs.Future">
            <summary>
            Gets the associated future.
            </summary>
        </member>
        <member name="T:Mina.Core.Future.IWriteFuture">
            <summary>
            An <see cref="T:Mina.Core.Future.IoFuture"/> for asynchronous write requests.
            </summary>
        </member>
        <member name="P:Mina.Core.Future.IWriteFuture.Written">
            <summary>
            Gets or sets a value indicating if this write operation is finished successfully.
            </summary>
        </member>
        <member name="P:Mina.Core.Future.IWriteFuture.Exception">
            <summary>
            Gets or sets the cause of the write failure if and only if the write
            operation has failed due to an <see cref="P:Mina.Core.Future.IWriteFuture.Exception"/>.
            Otherwise null is returned.
            </summary>
        </member>
        <member name="M:Mina.Core.Future.IWriteFuture.Await">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Service.AbstractIoConnector">
            <summary>
            A base implementation of <see cref="T:Mina.Core.Service.IoConnector"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoConnector.#ctor(Mina.Core.Session.IoSessionConfig)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoConnector.DefaultRemoteEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoConnector.DefaultLocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoConnector.ConnectTimeout">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoConnector.ConnectTimeoutInMillis">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoConnector.Connect">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoConnector.Connect(System.Action{Mina.Core.Session.IoSession,Mina.Core.Future.IConnectFuture})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoConnector.Connect(System.Net.EndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoConnector.Connect(System.Net.EndPoint,System.Action{Mina.Core.Session.IoSession,Mina.Core.Future.IConnectFuture})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoConnector.Connect(System.Net.EndPoint,System.Net.EndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoConnector.Connect(System.Net.EndPoint,System.Net.EndPoint,System.Action{Mina.Core.Session.IoSession,Mina.Core.Future.IConnectFuture})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoConnector.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoConnector.Connect0(System.Net.EndPoint,System.Net.EndPoint,System.Action{Mina.Core.Session.IoSession,Mina.Core.Future.IConnectFuture})">
            <summary>
            Implement this method to perform the actual connect operation.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoConnector.FinishSessionInitialization0(Mina.Core.Session.IoSession,Mina.Core.Future.IoFuture)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Service.DefaultTransportMetadata">
            <summary>
            A default immutable implementation of <see cref="T:Mina.Core.Service.ITransportMetadata"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.DefaultTransportMetadata.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Type)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Service.DefaultTransportMetadata.ProviderName">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.DefaultTransportMetadata.Name">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.DefaultTransportMetadata.Connectionless">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.DefaultTransportMetadata.HasFragmentation">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.DefaultTransportMetadata.EndPointType">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.DefaultTransportMetadata.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Service.IoConnector">
            <summary>
            Connects to endpoint, communicates with the server, and fires events to <see cref="T:Mina.Core.Service.IoHandler"/>s.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoConnector.ConnectTimeout">
            <summary>
            Gets or sets connect timeout in seconds. The default value is 1 minute.
            <seealso cref="P:Mina.Core.Service.IoConnector.ConnectTimeoutInMillis"/>
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoConnector.ConnectTimeoutInMillis">
            <summary>
            Gets or sets connect timeout in milliseconds. The default value is 1 minute.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoConnector.DefaultRemoteEndPoint">
            <summary>
            Gets or sets the default remote endpoint to connect to when no argument
            is specified in <see cref="M:Mina.Core.Service.IoConnector.Connect"/> method.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoConnector.DefaultLocalEndPoint">
            <summary>
            Gets or sets the default local endpoint.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoConnector.Connect">
            <summary>
            Connects to the <see cref="P:Mina.Core.Service.IoConnector.DefaultRemoteEndPoint"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">if no default remoted address is set</exception>
        </member>
        <member name="M:Mina.Core.Service.IoConnector.Connect(System.Action{Mina.Core.Session.IoSession,Mina.Core.Future.IConnectFuture})">
            <summary>
            Connects to the <see cref="P:Mina.Core.Service.IoConnector.DefaultRemoteEndPoint"/> and invokes the <code>ioSessionInitializer</code>
            when the IoSession is created but before <code>SessionCreated</code> is fired.
            </summary>
            <exception cref="T:System.InvalidOperationException">if no default remoted address is set</exception>
        </member>
        <member name="M:Mina.Core.Service.IoConnector.Connect(System.Net.EndPoint)">
            <summary>
            Connects to the specified remote endpoint.
            </summary>
            <exception cref="T:System.InvalidOperationException">if no default remoted address is set</exception>
        </member>
        <member name="M:Mina.Core.Service.IoConnector.Connect(System.Net.EndPoint,System.Action{Mina.Core.Session.IoSession,Mina.Core.Future.IConnectFuture})">
            <summary>
            Connects to the specified remote endpoint and invokes the <code>ioSessionInitializer</code>
            when the IoSession is created but before <code>SessionCreated</code> is fired.
            </summary>
            <exception cref="T:System.InvalidOperationException">if no default remoted address is set</exception>
        </member>
        <member name="M:Mina.Core.Service.IoConnector.Connect(System.Net.EndPoint,System.Net.EndPoint)">
            <summary>
            Connects to the specified remote endpoint binding to the specified local endpoint.
            </summary>
            <exception cref="T:System.InvalidOperationException">if no default remoted address is set</exception>
        </member>
        <member name="M:Mina.Core.Service.IoConnector.Connect(System.Net.EndPoint,System.Net.EndPoint,System.Action{Mina.Core.Session.IoSession,Mina.Core.Future.IConnectFuture})">
            <summary>
            Connects to the specified remote endpoint binding to the specified local endpoint,
            and invokes the <code>ioSessionInitializer</code>
            when the IoSession is created but before <code>SessionCreated</code> is fired.
            </summary>
            <exception cref="T:System.InvalidOperationException">if no default remoted address is set</exception>
        </member>
        <member name="T:Mina.Core.Service.IoProcessor">
            <summary>
            An internal interface to represent an 'I/O processor' that performs
            actual I/O operations for <see cref="T:Mina.Core.Session.IoSession"/>s.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoProcessor.Add(Mina.Core.Session.IoSession)">
            <summary>
            Adds the specified <see cref="T:Mina.Core.Session.IoSession"/> to the I/O processor so that
            the I/O processor starts to perform any I/O operations related
            with the <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
            <param name="session">the session to add</param>
        </member>
        <member name="M:Mina.Core.Service.IoProcessor.Write(Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <summary>
            Writes the <see cref="T:Mina.Core.Write.IWriteRequest"/> for the specified <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
            <param name="session">the session where the message to be written</param>
            <param name="writeRequest">thr message to write</param>
        </member>
        <member name="M:Mina.Core.Service.IoProcessor.Flush(Mina.Core.Session.IoSession)">
            <summary>
            Flushes the internal write request queue of the specified <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
            <param name="session">the session to flush</param>
        </member>
        <member name="M:Mina.Core.Service.IoProcessor.Remove(Mina.Core.Session.IoSession)">
            <summary>
            Removes and closes the specified <see cref="T:Mina.Core.Session.IoSession"/> from the I/O
             processor so that the I/O processor closes the connection
             associated with the <see cref="T:Mina.Core.Session.IoSession"/> and releases any other
             related resources.
            </summary>
            <param name="session">the session to remove</param>
        </member>
        <member name="M:Mina.Core.Service.IoProcessor.UpdateTrafficControl(Mina.Core.Session.IoSession)">
            <summary>
            Controls the traffic of the specified <paramref name="session"/>
            depending of the <see cref="P:Mina.Core.Session.IoSession.ReadSuspended"/>
            and <see cref="P:Mina.Core.Session.IoSession.WriteSuspended"/> flags.
            </summary>
            <param name="session">the session to control</param>
        </member>
        <member name="T:Mina.Core.Service.IoProcessor`1">
            <summary>
            An internal interface to represent an 'I/O processor' that performs
            actual I/O operations for <typeparamref name="S"/>s.
            </summary>
            <typeparam name="S">the type of sessions</typeparam>
        </member>
        <member name="M:Mina.Core.Service.IoProcessor`1.Add(`0)">
            <summary>
            Adds the specified <typeparamref name="S"/> to the I/O processor so that
            the I/O processor starts to perform any I/O operations related
            with the <typeparamref name="S"/>.
            </summary>
            <param name="session">the session to add</param>
        </member>
        <member name="M:Mina.Core.Service.IoProcessor`1.Write(`0,Mina.Core.Write.IWriteRequest)">
            <summary>
            Writes the <see cref="T:Mina.Core.Write.IWriteRequest"/> for the specified <typeparamref name="S"/>.
            </summary>
            <param name="session">the session we want the message to be written</param>
            <param name="writeRequest">the message to write</param>
        </member>
        <member name="M:Mina.Core.Service.IoProcessor`1.Flush(`0)">
            <summary>
            Flushes the internal write request queue of the specified <typeparamref name="S"/>.
            </summary>
            <param name="session">the session to flush</param>
        </member>
        <member name="M:Mina.Core.Service.IoProcessor`1.Remove(`0)">
            <summary>
            Removes and closes the specified <typeparamref name="S"/> from the I/O
             processor so that the I/O processor closes the connection
             associated with the <typeparamref name="S"/> and releases any other
             related resources.
            </summary>
            <param name="session">the session to remove</param>
        </member>
        <member name="M:Mina.Core.Service.IoProcessor`1.UpdateTrafficControl(`0)">
            <summary>
            Controls the traffic of the specified <paramref name="session"/>
            depending of the <see cref="P:Mina.Core.Session.IoSession.ReadSuspended"/>
            and <see cref="P:Mina.Core.Session.IoSession.WriteSuspended"/> flags.
            </summary>
            <param name="session">the session to control</param>
        </member>
        <member name="T:Mina.Core.Service.IoServiceStatistics">
            <summary>
            Provides usage statistics for an <see cref="T:Mina.Core.Service.IoService"/> instance.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoServiceStatistics.#ctor(Mina.Core.Service.IoService)">
            <summary>
            Initializes.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.LastIoTime">
            <summary>
            Gets the time when I/O occurred lastly.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.LastReadTime">
            <summary>
            Gets or sets last time at which a read occurred on the service.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.LastWriteTime">
            <summary>
            Gets or sets last time at which a write occurred on the service.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.ReadBytes">
            <summary>
            Gets the number of bytes read by this service.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.WrittenBytes">
            <summary>
            Gets the number of bytes written out by this service.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.ReadMessages">
            <summary>
            Gets the number of messages this services has read.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.WrittenMessages">
            <summary>
            Gets the number of messages this service has written.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.ReadBytesThroughput">
            <summary>
            Gets the number of read bytes per second.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.WrittenBytesThroughput">
            <summary>
            Gets the number of written bytes per second.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.ReadMessagesThroughput">
            <summary>
            Gets the number of read messages per second.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.WrittenMessagesThroughput">
            <summary>
            Gets the number of written messages per second.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.LargestReadBytesThroughput">
            <summary>
            Gets the maximum of the <see cref="P:Mina.Core.Service.IoServiceStatistics.ReadBytesThroughput"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.LargestWrittenBytesThroughput">
            <summary>
            Gets the maximum of the <see cref="P:Mina.Core.Service.IoServiceStatistics.WrittenBytesThroughput"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.LargestReadMessagesThroughput">
            <summary>
            Gets the maximum of the <see cref="P:Mina.Core.Service.IoServiceStatistics.ReadMessagesThroughput"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.LargestWrittenMessagesThroughput">
            <summary>
            Gets the maximum of the <see cref="P:Mina.Core.Service.IoServiceStatistics.WrittenMessagesThroughput"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.ThroughputCalculationInterval">
            <summary>
            Gets or sets the interval (seconds) between each throughput calculation. The default value is 3 seconds.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.ThroughputCalculationIntervalInMillis">
            <summary>
            Gets the interval (milliseconds) between each throughput calculation.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.ScheduledWriteBytes">
            <summary>
            Gets the count of bytes scheduled for write.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoServiceStatistics.ScheduledWriteMessages">
            <summary>
            Gets the count of messages scheduled for write.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoServiceStatistics.UpdateThroughput(System.DateTime)">
            <summary>
            Updates the throughput counters.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoServiceStatistics.IncreaseReadBytes(System.Int64,System.DateTime)">
            <summary>
            Increases the count of read bytes.
            </summary>
            <param name="increment">the number of bytes read</param>
            <param name="currentTime">current time</param>
        </member>
        <member name="M:Mina.Core.Service.IoServiceStatistics.IncreaseReadMessages(System.DateTime)">
            <summary>
            Increases the count of read messages by 1 and sets the last read time to current time.
            </summary>
            <param name="currentTime">current time</param>
        </member>
        <member name="M:Mina.Core.Service.IoServiceStatistics.IncreaseWrittenBytes(System.Int32,System.DateTime)">
            <summary>
            Increases the count of written bytes.
            </summary>
            <param name="increment">the number of bytes written</param>
            <param name="currentTime">current time</param>
        </member>
        <member name="M:Mina.Core.Service.IoServiceStatistics.IncreaseWrittenMessages(System.DateTime)">
            <summary>
            Increases the count of written messages by 1 and sets the last write time to current time.
            </summary>
            <param name="currentTime">current time</param>
        </member>
        <member name="M:Mina.Core.Service.IoServiceStatistics.IncreaseScheduledWriteBytes(System.Int32)">
            <summary>
            Increments by <code>increment</code> the count of bytes scheduled for write.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoServiceStatistics.IncreaseScheduledWriteMessages">
            <summary>
            Increments by 1 the count of messages scheduled for write.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoServiceStatistics.DecreaseScheduledWriteMessages">
            <summary>
            Decrements by 1 the count of messages scheduled for write.
            </summary>
        </member>
        <member name="T:Mina.Core.Service.ITransportMetadata">
            <summary>
            Provides meta-information that describes an <see cref="T:Mina.Core.Service.IoService"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.ITransportMetadata.ProviderName">
            <summary>
            Gets the name of the service provider.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.ITransportMetadata.Name">
            <summary>
            Gets the name of the service.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.ITransportMetadata.Connectionless">
            <summary>
            Returns <code>true</code> if the session of this transport type is
            <a href="http://en.wikipedia.org/wiki/Connectionless">connectionless</a>.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.ITransportMetadata.HasFragmentation">
            <summary>
            Returns <code>true</code> if the messages exchanged by the service can be
            <a href="http://en.wikipedia.org/wiki/IPv4#Fragmentation_and_reassembly">fragmented
            or reassembled</a> by its underlying transport.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.ITransportMetadata.EndPointType">
            <summary>
            Gets the type of the endpoint in this transport.
            </summary>
        </member>
        <member name="T:Mina.Core.Service.AbstractIoAcceptor">
            <summary>
            Base implementation of <see cref="T:Mina.Core.Service.IoAcceptor"/>.
            </summary>
        </member>
        <member name="F:Mina.Core.Service.AbstractIoAcceptor._bindLock">
            <summary>
            The lock for binding.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoAcceptor.#ctor(Mina.Core.Session.IoSessionConfig)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoAcceptor.CloseOnDeactivation">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoAcceptor.DefaultLocalEndPoints">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoAcceptor.DefaultLocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoAcceptor.LocalEndPoints">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoAcceptor.LocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoAcceptor.Bind">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoAcceptor.Bind(System.Net.EndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoAcceptor.Bind(System.Net.EndPoint[])">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoAcceptor.Bind(System.Collections.Generic.IEnumerable{System.Net.EndPoint})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoAcceptor.Unbind">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoAcceptor.Unbind(System.Net.EndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoAcceptor.Unbind(System.Net.EndPoint[])">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoAcceptor.Unbind(System.Collections.Generic.IEnumerable{System.Net.EndPoint})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoAcceptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoAcceptor.BindInternal(System.Collections.Generic.IEnumerable{System.Net.EndPoint})">
            <summary>
            Implement this method to perform the actual bind operation.
            </summary>
            <param name="localEndPoints">the endpoints to bind</param>
            <returns>the endpoints which is bound actually</returns>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoAcceptor.UnbindInternal(System.Collections.Generic.IEnumerable{System.Net.EndPoint})">
            <summary>
            Implement this method to perform the actual unbind operation.
            </summary>
            <param name="localEndPoints">the endpoints to unbind</param>
        </member>
        <member name="T:Mina.Core.Service.AbstractIoService">
            <summary>
            Base implementation of <see cref="T:Mina.Core.Service.IoService"/>s.
            </summary>
        </member>
        <member name="E:Mina.Core.Service.AbstractIoService.Activated">
            <inheritdoc/>
        </member>
        <member name="E:Mina.Core.Service.AbstractIoService.Idle">
            <inheritdoc/>
        </member>
        <member name="E:Mina.Core.Service.AbstractIoService.Deactivated">
            <inheritdoc/>
        </member>
        <member name="E:Mina.Core.Service.AbstractIoService.SessionCreated">
            <inheritdoc/>
        </member>
        <member name="E:Mina.Core.Service.AbstractIoService.SessionOpened">
            <inheritdoc/>
        </member>
        <member name="E:Mina.Core.Service.AbstractIoService.SessionClosed">
            <inheritdoc/>
        </member>
        <member name="E:Mina.Core.Service.AbstractIoService.SessionDestroyed">
            <inheritdoc/>
        </member>
        <member name="E:Mina.Core.Service.AbstractIoService.SessionIdle">
            <inheritdoc/>
        </member>
        <member name="E:Mina.Core.Service.AbstractIoService.ExceptionCaught">
            <inheritdoc/>
        </member>
        <member name="E:Mina.Core.Service.AbstractIoService.InputClosed">
            <inheritdoc/>
        </member>
        <member name="E:Mina.Core.Service.AbstractIoService.MessageReceived">
            <inheritdoc/>
        </member>
        <member name="E:Mina.Core.Service.AbstractIoService.MessageSent">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoService.#ctor(Mina.Core.Session.IoSessionConfig)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoService.TransportMetadata">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoService.Disposed">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoService.Handler">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoService.ManagedSessions">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoService.SessionConfig">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoService.FilterChainBuilder">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoService.FilterChain">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoService.SessionDataStructureFactory">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoService.Active">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoService.ActivationTime">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Service.AbstractIoService.Statistics">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoService.Broadcast(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoService.Dispose">
            <summary>
            Disposes resources.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoService.InitSession``1(Mina.Core.Session.IoSession,``0,System.Action{Mina.Core.Session.IoSession,``0})">
            <summary>
            Initializes sessions.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoService.FinishSessionInitialization0(Mina.Core.Session.IoSession,Mina.Core.Future.IoFuture)">
            <summary>
            Implement this method to perform additional tasks required for session
            initialization. Do not call this method directly.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.AbstractIoService.Dispose(System.Boolean)">
            <summary>
            Disposes resources.
            </summary>
        </member>
        <member name="T:Mina.Core.Service.IoHandler">
            <summary>
            Handles all I/O events fired by MINA.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoHandler.SessionCreated(Mina.Core.Session.IoSession)">
            <summary>
            Invoked from an I/O processor thread when a new connection has been created.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoHandler.SessionOpened(Mina.Core.Session.IoSession)">
            <summary>
            Invoked when a connection has been opened.
            This method is invoked after <see cref="M:Mina.Core.Service.IoHandler.SessionCreated(Mina.Core.Session.IoSession)"/>.
            </summary>
            <remarks>
            The biggest difference from <see cref="M:Mina.Core.Service.IoHandler.SessionCreated(Mina.Core.Session.IoSession)"/> is that
            it's invoked from other thread than an I/O processor thread once
            thread model is configured properly.
            </remarks>
        </member>
        <member name="M:Mina.Core.Service.IoHandler.SessionClosed(Mina.Core.Session.IoSession)">
            <summary>
            Invoked when a connection is closed.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoHandler.SessionIdle(Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <summary>
            Invoked with the related <see cref="T:Mina.Core.Session.IdleStatus"/> when a connection becomes idle.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoHandler.ExceptionCaught(Mina.Core.Session.IoSession,System.Exception)">
            <summary>
            Invoked when any exception is thrown by user <see cref="T:Mina.Core.Service.IoHandler"/>
            implementation or by Mina.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoHandler.MessageReceived(Mina.Core.Session.IoSession,System.Object)">
            <summary>
            Invoked when a message is received.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoHandler.MessageSent(Mina.Core.Session.IoSession,System.Object)">
            <summary>
            Invoked when a message written by <see cref="M:Mina.Core.Session.IoSession.Write(System.Object)"/>
            is sent out.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoHandler.InputClosed(Mina.Core.Session.IoSession)">
            
             Handle the closure of an half-duplex channel.
            
        </member>
        <member name="T:Mina.Core.Service.IoHandlerAdapter">
            <summary>
            An adapter class for <see cref="T:Mina.Core.Service.IoHandler"/>.  You can extend this
            class and selectively override required event handler methods only.  All
            methods do nothing by default.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoHandlerAdapter.SessionCreated(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.IoHandlerAdapter.SessionOpened(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.IoHandlerAdapter.SessionClosed(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.IoHandlerAdapter.SessionIdle(Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.IoHandlerAdapter.ExceptionCaught(Mina.Core.Session.IoSession,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.IoHandlerAdapter.MessageReceived(Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.IoHandlerAdapter.MessageSent(Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Service.IoHandlerAdapter.InputClosed(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Service.IoAcceptor">
            <summary>
            Accepts incoming connection, communicates with clients, and fires events to <see cref="T:Mina.Core.Service.IoHandler"/>s.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoAcceptor.CloseOnDeactivation">
            <summary>
            Gets or sets a value indicating whether all client sessions are closed
            when this acceptor unbinds from all the related local endpoints
            (i.e. when the service is deactivated).
            The default value is <code>true</code>.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoAcceptor.LocalEndPoint">
            <summary>
            Gets the local endpoint which is bound currently.
            If more than one endpoint are bound, only one of them will be returned.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoAcceptor.LocalEndPoints">
            <summary>
            Gets all the local endpoints which are bound currently.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoAcceptor.DefaultLocalEndPoint">
            <summary>
            Gets or sets the default local endpoint to bind when no
            argument is specified in <see cref="M:Mina.Core.Service.IoAcceptor.Bind"/> method.
            If more than one endpoint are set, only one of them will be returned.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoAcceptor.DefaultLocalEndPoints">
            <summary>
            Gets or sets the default local endpoints to bind when no
            argument is specified in <see cref="M:Mina.Core.Service.IoAcceptor.Bind"/> method.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoAcceptor.Bind">
            <summary>
            Binds to the default local endpoint(s) and start to accept incoming connections.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoAcceptor.Bind(System.Net.EndPoint)">
            <summary>
            Binds to the specified local endpoint and start to accept incoming connections.
            </summary>
            <param name="localEP">the local endpoint to bind to</param>
        </member>
        <member name="M:Mina.Core.Service.IoAcceptor.Bind(System.Net.EndPoint[])">
            <summary>
            Binds to the specified local endpoints and start to accept incoming connections.
            If no endpoints is given, bind on the default local endpoint(s).
            </summary>
            <param name="localEndPoints">the local endpoints to bind to</param>
        </member>
        <member name="M:Mina.Core.Service.IoAcceptor.Bind(System.Collections.Generic.IEnumerable{System.Net.EndPoint})">
            <summary>
            Binds to the specified local addresses and start to accept incoming connections.
            </summary>
            <param name="localEndPoints">the local endpoints to bind to</param>
        </member>
        <member name="M:Mina.Core.Service.IoAcceptor.Unbind">
            <summary>
            Unbinds from all local endpoints that this service is bound to and stops
            to accept incoming connections.
            All managed connections will be closed if <see cref="P:Mina.Core.Service.IoAcceptor.CloseOnDeactivation"/> is <code>true</code>.
            This method returns silently if no local endpoints is bound yet.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoAcceptor.Unbind(System.Net.EndPoint)">
            <summary>
            Unbinds from the specified local address and stop to accept incoming connections.
            All managed connections will be closed if <see cref="P:Mina.Core.Service.IoAcceptor.CloseOnDeactivation"/> is <code>true</code>.
            This method returns silently if no local endpoints is bound yet.
            </summary>
            <param name="localEP">the local endpoint to unbind</param>
        </member>
        <member name="M:Mina.Core.Service.IoAcceptor.Unbind(System.Net.EndPoint[])">
            <summary>
            Unbinds from the specified local addresses and stop to accept incoming connections.
            All managed connections will be closed if <see cref="P:Mina.Core.Service.IoAcceptor.CloseOnDeactivation"/> is <code>true</code>.
            This method returns silently if no local endpoints is bound yet.
            </summary>
            <param name="localEndPoints">the local endpoints to unbind</param>
        </member>
        <member name="M:Mina.Core.Service.IoAcceptor.Unbind(System.Collections.Generic.IEnumerable{System.Net.EndPoint})">
            <summary>
            Unbinds from the specified local addresses and stop to accept incoming connections.
            All managed connections will be closed if <see cref="P:Mina.Core.Service.IoAcceptor.CloseOnDeactivation"/> is <code>true</code>.
            This method returns silently if no local endpoints is bound yet.
            </summary>
            <param name="localEndPoints">the local endpoints to unbind</param>
        </member>
        <member name="T:Mina.Core.Service.IoService">
            <summary>
            Base interface for all <see cref="T:Mina.Core.Service.IoAcceptor"/>s and <see cref="T:Mina.Core.Service.IoConnector"/>s
            that provide I/O service and manage <see cref="T:Mina.Core.Session.IoSession"/>s.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoService.TransportMetadata">
            <summary>
            Gets the <see cref="T:Mina.Core.Service.ITransportMetadata"/> that this service runs on.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoService.Disposed">
            <summary>
            Returns <code>true</code> if and if only all resources of this service
            have been disposed.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoService.Handler">
            <summary>
            Gets or sets the handler which will handle all connections managed by this service.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoService.ManagedSessions">
            <summary>
            Gets the map of all sessions which are currently managed by this service.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoService.Active">
            <summary>
            Returns a value of whether or not this service is active.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoService.ActivationTime">
            <summary>
            Returns the time when this service was activated.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoService.SessionConfig">
            <summary>
            Returns the default configuration of the new <see cref="T:Mina.Core.Session.IoSession"/>s created by this service.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoService.FilterChainBuilder">
            <summary>
            Gets or sets the <see cref="T:Mina.Core.Filterchain.IoFilterChainBuilder"/> which will build the
            <see cref="T:Mina.Core.Filterchain.IoFilterChain"/> of all <see cref="T:Mina.Core.Session.IoSession"/>s which is created by this service.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoService.FilterChain">
            <summary>
            A shortcut for <tt>( ( DefaultIoFilterChainBuilder ) </tt><see cref="P:Mina.Core.Service.IoService.FilterChainBuilder"/><tt> )</tt>.
            </summary>
        </member>
        <member name="P:Mina.Core.Service.IoService.SessionDataStructureFactory">
            <summary>
            Gets or sets the <see cref="T:Mina.Core.Session.IoSessionDataStructureFactory"/> that provides
            related data structures for a new session created by this service.
            </summary>
        </member>
        <member name="M:Mina.Core.Service.IoService.Broadcast(System.Object)">
            <summary>
            Writes the specified message to all the <see cref="T:Mina.Core.Session.IoSession"/>s
            managed by this service.
            </summary>
        </member>
        <member name="E:Mina.Core.Service.IoService.Activated">
            <summary>
            Fires when this service is activated.
            </summary>
        </member>
        <member name="E:Mina.Core.Service.IoService.Idle">
            <summary>
            Fires when this service is idle.
            </summary>
        </member>
        <member name="E:Mina.Core.Service.IoService.Deactivated">
            <summary>
            Fires when this service is deactivated.
            </summary>
        </member>
        <member name="E:Mina.Core.Service.IoService.SessionCreated">
            <summary>
            Fires when a new session is created.
            </summary>
        </member>
        <member name="E:Mina.Core.Service.IoService.SessionDestroyed">
            <summary>
            Fires when a new session is being destroyed.
            </summary>
        </member>
        <member name="E:Mina.Core.Service.IoService.SessionOpened">
            <summary>
            Fires when a session is opened. Only available when
            no <see cref="T:Mina.Core.Service.IoHandler"/> is set to <see cref="P:Mina.Core.Service.IoService.Handler"/>.
            </summary>
            <remarks>
            If <see cref="P:Mina.Core.Service.IoService.Handler"/> is set, use <see cref="M:Mina.Core.Service.IoHandler.SessionOpened(Mina.Core.Session.IoSession)"/> instead.
            </remarks>
        </member>
        <member name="E:Mina.Core.Service.IoService.SessionClosed">
            <summary>
            Fires when a session is closed. Only available when
            no <see cref="T:Mina.Core.Service.IoHandler"/> is set to <see cref="P:Mina.Core.Service.IoService.Handler"/>.
            </summary>
            <remarks>
            If <see cref="P:Mina.Core.Service.IoService.Handler"/> is set, use <see cref="M:Mina.Core.Service.IoHandler.SessionClosed(Mina.Core.Session.IoSession)"/> instead.
            </remarks>
        </member>
        <member name="E:Mina.Core.Service.IoService.SessionIdle">
            <summary>
            Fires when a session is idle. Only available when
            no <see cref="T:Mina.Core.Service.IoHandler"/> is set to <see cref="P:Mina.Core.Service.IoService.Handler"/>.
            </summary>
            <remarks>
            If <see cref="P:Mina.Core.Service.IoService.Handler"/> is set, use <see cref="M:Mina.Core.Service.IoHandler.SessionIdle(Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)"/> instead.
            </remarks>
        </member>
        <member name="E:Mina.Core.Service.IoService.ExceptionCaught">
            <summary>
            Fires when any exception is thrown. Only available when
            no <see cref="T:Mina.Core.Service.IoHandler"/> is set to <see cref="P:Mina.Core.Service.IoService.Handler"/>.
            </summary>
            <remarks>
            If <see cref="P:Mina.Core.Service.IoService.Handler"/> is set, use <see cref="M:Mina.Core.Service.IoHandler.ExceptionCaught(Mina.Core.Session.IoSession,System.Exception)"/> instead.
            </remarks>
        </member>
        <member name="E:Mina.Core.Service.IoService.InputClosed">
            <summary>
            Occurs when the closure of an half-duplex channel.
            </summary>
        </member>
        <member name="E:Mina.Core.Service.IoService.MessageReceived">
            <summary>
            Fires when a message is received. Only available when
            no <see cref="T:Mina.Core.Service.IoHandler"/> is set to <see cref="P:Mina.Core.Service.IoService.Handler"/>.
            </summary>
            <remarks>
            If <see cref="P:Mina.Core.Service.IoService.Handler"/> is set, use <see cref="M:Mina.Core.Service.IoHandler.MessageReceived(Mina.Core.Session.IoSession,System.Object)"/> instead.
            </remarks>
        </member>
        <member name="E:Mina.Core.Service.IoService.MessageSent">
            <summary>
            Fires when a message is sent. Only available when
            no <see cref="T:Mina.Core.Service.IoHandler"/> is set to <see cref="P:Mina.Core.Service.IoService.Handler"/>.
            </summary>
            <remarks>
            If <see cref="P:Mina.Core.Service.IoService.Handler"/> is set, use <see cref="M:Mina.Core.Service.IoHandler.MessageSent(Mina.Core.Session.IoSession,System.Object)"/> instead.
            </remarks>
        </member>
        <member name="P:Mina.Core.Service.IoService.Statistics">
            <summary>
            Gets the IoServiceStatistics object for this service.
            </summary>
        </member>
        <member name="T:Mina.Core.Session.AttributeKey">
            <summary>
            Creates a Key from a class name and an attribute name. The resulting Key will
            be stored in the session Map.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.AttributeKey.#ctor(System.Type,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="source">the class this AttributeKey will be attached to</param>
            <param name="name">the Attribute name</param>
        </member>
        <member name="M:Mina.Core.Session.AttributeKey.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AttributeKey.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AttributeKey.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Session.ExpiringSessionRecycler">
            <summary>
            An <see cref="T:Mina.Core.Session.IoSessionRecycler"/> with sessions that time out on inactivity.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.ExpiringSessionRecycler.Put(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.ExpiringSessionRecycler.Recycle(System.Net.EndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.ExpiringSessionRecycler.Remove(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Session.IdleStatusChecker">
            <summary>
            Detects idle sessions and fires <tt>SessionIdle</tt> events to them.
            </summary>
        </member>
        <member name="T:Mina.Core.Session.IoEvent">
            <summary>
            An I/O event or an I/O request that MINA provides.
            It is usually used by internal components to store I/O events.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoEvent.#ctor(Mina.Core.Session.IoEventType,Mina.Core.Session.IoSession,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoEvent.EventType">
            <summary>
            Gets the <see cref="T:Mina.Core.Session.IoEventType"/> of this event.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoEvent.Session">
            <summary>
            Gets the <see cref="T:Mina.Core.Session.IoSession"/> of this event.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoEvent.Parameter">
            <summary>
            Gets the parameter of this event.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoEvent.Fire">
            <summary>
            Fires this event.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoEvent.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Session.IoEventType">
            <summary>
            Represents the type of I/O events and requests.
            It is usually used by internal components to store I/O events.
            </summary>
        </member>
        <member name="T:Mina.Core.Session.IoSessionAttributeMap">
            <summary>
            Stores the user-defined attributes which is provided per <see cref="T:Mina.Core.Session.IoSession"/>.
            All user-defined attribute accesses in <see cref="T:Mina.Core.Session.IoSession"/> are forwarded to
            the instance of <see cref="T:Mina.Core.Session.IoSessionAttributeMap"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionAttributeMap.GetAttribute(Mina.Core.Session.IoSession,System.Object,System.Object)">
            <summary>
            Returns the value of user defined attribute associated with the
            specified key. If there's no such attribute, the specified default
            value is associated with the specified key, and the default value is
            returned.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionAttributeMap.SetAttribute(Mina.Core.Session.IoSession,System.Object,System.Object)">
            <summary>
            Sets a user-defined attribute.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionAttributeMap.SetAttributeIfAbsent(Mina.Core.Session.IoSession,System.Object,System.Object)">
            <summary>
            Sets a user defined attribute if the attribute with the specified key
            is not set yet.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionAttributeMap.RemoveAttribute(Mina.Core.Session.IoSession,System.Object)">
            <summary>
            Removes a user-defined attribute with the specified key.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionAttributeMap.ContainsAttribute(Mina.Core.Session.IoSession,System.Object)">
            <summary>
            Returns <tt>true</tt> if this session contains the attribute with the specified <tt>key</tt>.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionAttributeMap.GetAttributeKeys(Mina.Core.Session.IoSession)">
            <summary>
            Returns the keys of all user-defined attributes.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionAttributeMap.Dispose(Mina.Core.Session.IoSession)">
            <summary>
            Disposes any releases associated with the specified session.
            This method is invoked on disconnection.
            </summary>
        </member>
        <member name="T:Mina.Core.Session.IoSessionDataStructureFactory">
            <summary>
            Provides data structures to a newly created session.
            </summary>
        </member>
        <member name="T:Mina.Core.Session.IoSessionRecycler">
            <summary>
             A connectionless transport can recycle existing sessions by assigning an
             <see cref="T:Mina.Core.Session.IoSessionRecycler"/> to an <see cref="T:Mina.Core.Service.IoService"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionRecycler.Put(Mina.Core.Session.IoSession)">
            <summary>
            Called when the underlying transport creates or writes a new <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:Mina.Core.Session.IoSessionRecycler.Recycle(System.Net.EndPoint)">
            <summary>
            Attempts to retrieve a recycled <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
            <param name="remoteEP">the remote endpoint of the <see cref="T:Mina.Core.Session.IoSession"/> the transport wants to recycle</param>
            <returns>a recycled <see cref="T:Mina.Core.Session.IoSession"/>, or null if one cannot be found</returns>
        </member>
        <member name="M:Mina.Core.Session.IoSessionRecycler.Remove(Mina.Core.Session.IoSession)">
            <summary>
            Called when an <see cref="T:Mina.Core.Session.IoSession"/> is explicitly closed.
            </summary>
            <param name="session"></param>
        </member>
        <member name="T:Mina.Core.Session.NoopRecycler">
            <summary>
            A dummy recycler that doesn't recycle any sessions.
            Using this recycler will make all session lifecycle events
            to be fired for every I/O for all connectionless sessions.
            </summary>
        </member>
        <member name="F:Mina.Core.Session.NoopRecycler.Instance">
            <summary>
            A dummy recycler that doesn't recycle any sessions.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.NoopRecycler.Put(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.NoopRecycler.Recycle(System.Net.EndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.NoopRecycler.Remove(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Session.UnknownMessageTypeException">
            <summary>
            An exception that is thrown when the type of the message cannot be determined.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.UnknownMessageTypeException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Session.UnknownMessageTypeException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Session.UnknownMessageTypeException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Session.UnknownMessageTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="T:Mina.Core.Session.AbstractIoSession">
            <summary>
            Base implementation of <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.#ctor(Mina.Core.Service.IoService)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.Id">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.Config">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.Service">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.Processor">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.Handler">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.FilterChain">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.TransportMetadata">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.Connected">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.Active">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.Closing">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.Secured">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.CloseFuture">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.LocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.RemoteEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.AttributeMap">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.WriteRequestQueue">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.CurrentWriteRequest">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.SetWriteRequestQueue(Mina.Core.Write.IWriteRequestQueue)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.Write(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.Write(System.Object,System.Net.EndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.Close(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.Close">
            <summary>
            Closes this session immediately. This operation is asynchronous.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.CloseNow">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.CloseOnFlush">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.Destroy">
            <summary>
            Destroy the session.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.GetAttribute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.GetAttribute(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.GetAttribute``1(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.GetAttribute``1(System.Object,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.SetAttribute(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.SetAttribute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.SetAttributeIfAbsent(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.SetAttributeIfAbsent(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.RemoveAttribute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.ContainsAttribute(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.Dispose">
            <summary>
            Disposes resources.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.Dispose(System.Boolean)">
            <summary>
            Disposes resources.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.ReadSuspended">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.WriteSuspended">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.SuspendRead">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.SuspendWrite">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.ResumeRead">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.ResumeWrite">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.ReadBytes">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.WrittenBytes">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.ReadMessages">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.WrittenMessages">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.ReadBytesThroughput">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.WrittenBytesThroughput">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.ReadMessagesThroughput">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.WrittenMessagesThroughput">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.CreationTime">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.LastIoTime">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.LastReadTime">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.LastWriteTime">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.IsIdle(Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.IsReaderIdle">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.IsWriterIdle">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.IsBothIdle">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.GetIdleCount(Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.BothIdleCount">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.ReaderIdleCount">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.WriterIdleCount">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.GetLastIdleTime(Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.LastBothIdleTime">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.LastReaderIdleTime">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.LastWriterIdleTime">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.IncreaseIdleCount(Mina.Core.Session.IdleStatus,System.DateTime)">
            <summary>
            Increases idle count.
            </summary>
            <param name="status">the <see cref="T:Mina.Core.Session.IdleStatus"/></param>
            <param name="currentTime">the time</param>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.IncreaseReadBytes(System.Int64,System.DateTime)">
            <summary>
            Increases read bytes.
            </summary>
            <param name="increment">the amount to increase</param>
            <param name="currentTime">the time</param>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.IncreaseReadMessages(System.DateTime)">
            <summary>
            Increases read messages.
            </summary>
            <param name="currentTime">the time</param>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.IncreaseWrittenBytes(System.Int32,System.DateTime)">
            <summary>
            Increases written bytes.
            </summary>
            <param name="increment">the amount to increase</param>
            <param name="currentTime">the time</param>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.IncreaseWrittenMessages(Mina.Core.Write.IWriteRequest,System.DateTime)">
            <summary>
            Increases written messages.
            </summary>
            <param name="request">the request written</param>
            <param name="currentTime">the time</param>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.IncreaseScheduledWriteBytes(System.Int32)">
            <summary>
            Increase the number of scheduled write bytes for the session.
            </summary>
            <param name="increment">the number of newly added bytes to write</param>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.UpdateThroughput(System.DateTime,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.NotifyIdleness(System.Collections.Generic.IEnumerable{Mina.Core.Session.IoSession},System.DateTime)">
            <summary>
            Fires a <see cref="F:Mina.Core.Session.IoEventType.SessionIdle"/> event to any applicable sessions in the specified collection.
            </summary>
            <param name="sessions"></param>
            <param name="currentTime"></param>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.NotifyIdleSession(Mina.Core.Session.IoSession,System.DateTime)">
            <summary>
            Fires a <see cref="F:Mina.Core.Session.IoEventType.SessionIdle"/> event if applicable for the
            specified <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
        </member>
        <member name="T:Mina.Core.Session.AbstractIoSession.CloseAwareWriteQueue">
            <summary>
            A queue which handles the CLOSE request.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.CloseAwareWriteQueue.#ctor(Mina.Core.Session.AbstractIoSession,Mina.Core.Write.IWriteRequestQueue)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSession.CloseAwareWriteQueue.Size">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.CloseAwareWriteQueue.Poll(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.CloseAwareWriteQueue.Offer(Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.CloseAwareWriteQueue.IsEmpty(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.CloseAwareWriteQueue.Clear(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSession.CloseAwareWriteQueue.Dispose(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Session.AbstractIoSessionConfig">
            <summary>
            A base implementation of <see cref="T:Mina.Core.Session.IoSessionConfig"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSessionConfig.ReadBufferSize">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSessionConfig.ThroughputCalculationInterval">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSessionConfig.ThroughputCalculationIntervalInMillis">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSessionConfig.WriteTimeout">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSessionConfig.WriteTimeoutInMillis">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSessionConfig.ReaderIdleTime">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSessionConfig.WriterIdleTime">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.AbstractIoSessionConfig.BothIdleTime">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSessionConfig.GetIdleTime(Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSessionConfig.GetIdleTimeInMillis(Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSessionConfig.SetIdleTime(Mina.Core.Session.IdleStatus,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.AbstractIoSessionConfig.SetAll(Mina.Core.Session.IoSessionConfig)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Session.DummySession">
            <summary>
            A dummy <see cref="T:Mina.Core.Session.IoSession"/> for unit-testing or non-network-use of
            the classes that depends on <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.DummySession.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Session.DummySession.Processor">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.DummySession.Handler">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.DummySession.FilterChain">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.DummySession.LocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.DummySession.RemoteEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Session.DummySession.TransportMetadata">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Core.Session.DummySession.SetTransportMetadata(Mina.Core.Service.ITransportMetadata)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Session.DummySession.SetRemoteEndPoint(System.Net.EndPoint)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Session.DummySession.SetHandler(Mina.Core.Service.IoHandler)">
            <summary>
            </summary>
        </member>
        <member name="T:Mina.Core.Session.IdleStatus">
            <summary>
            Represents the type of idleness of <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
        </member>
        <member name="F:Mina.Core.Session.IdleStatus.ReaderIdle">
            <summary>
            Represents the session status that no data is coming from the remote peer.
            </summary>
        </member>
        <member name="F:Mina.Core.Session.IdleStatus.WriterIdle">
            <summary>
            Represents the session status that the session is not writing any data.
            </summary>
        </member>
        <member name="F:Mina.Core.Session.IdleStatus.BothIdle">
            <summary>
            Represents both ReaderIdle and WriterIdle.
            </summary>
        </member>
        <member name="T:Mina.Core.Session.IdleEventArgs">
            <summary>
            Provides data for idle events.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IdleEventArgs.#ctor(Mina.Core.Session.IdleStatus)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IdleEventArgs.IdleStatus">
            <summary>
            Gets the idle status.
            </summary>
        </member>
        <member name="T:Mina.Core.Session.IoSession">
            <summary>
            A handle which represents connection between two end-points regardless of transport types.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.Id">
            <summary>
            Gets a unique identifier for this session.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.Config">
            <summary>
            Gets the configuration of this session.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.Service">
            <summary>
            Gets the <see cref="T:Mina.Core.Service.IoService"/> which provides I/O service to this session.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.Processor">
            <summary>
            Gets the associated <see cref="T:Mina.Core.Service.IoProcessor"/> for this session.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.Handler">
            <summary>
            Gets the <see cref="T:Mina.Core.Service.IoHandler"/> which handles this session.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.FilterChain">
            <summary>
            Gets the filter chain that only affects this session.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.TransportMetadata">
            <summary>
            Gets the <see cref="T:Mina.Core.Service.ITransportMetadata"/> that this session runs on.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.Connected">
            <summary>
            Returns <code>true</code> if this session is connected with remote peer.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.Active">
            <summary>
            Returns <code>true</code> if this session is active.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.Closing">
            <summary>
            Returns <code>true</code> if and only if this session is being closed.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.Secured">
            <summary>
            Returns <code>true</code> if the session has started with SSL,
            <code>false</code> if the session is not yet secured (the handshake is not completed)
            or if SSL is not set for this session, or if SSL is not even an option.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.CloseFuture">
            <summary>
            Gets the <see cref="T:Mina.Core.Future.ICloseFuture"/> of this session.
            This method returns the same instance whenever user calls it.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSession.Write(System.Object)">
            <summary>
            Writes the specified <code>message</code> to remote peer.
            This operation is asynchronous.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSession.Write(System.Object,System.Net.EndPoint)">
            <summary>
            Writes the specified <code>message</code> to the specified destination.
            This operation is asynchronous.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSession.Close(System.Boolean)">
            <summary>
            Closes this session immediately or after all queued write requests
            are flushed. This operation is asynchronous.
            </summary>
            <param name="rightNow">true to close this session immediately,
            discarding the pending write requests; false to close this session
            after all queued write requests are flushed.</param>
            <returns><see cref="T:Mina.Core.Future.ICloseFuture"/></returns>
        </member>
        <member name="M:Mina.Core.Session.IoSession.CloseNow">
            <summary>
            Closes this session immediately. This operation is asynchronous.
            </summary>
            <returns><see cref="T:Mina.Core.Future.ICloseFuture"/></returns>
        </member>
        <member name="M:Mina.Core.Session.IoSession.CloseOnFlush">
            <summary>
            Closes this session after all queued write requests are flushed.
            This operation is asynchronous.
            Wait for the returned <see cref="T:Mina.Core.Future.ICloseFuture"/> if you want to wait for the session actually closed.
            </summary>
            <returns><see cref="T:Mina.Core.Future.ICloseFuture"/></returns>
        </member>
        <member name="M:Mina.Core.Session.IoSession.GetAttribute``1(System.Object)">
            <summary>
            Gets the value of the user-defined attribute of this session.
            </summary>
            <typeparam name="T">the type of the attribute</typeparam>
            <param name="key">the key of the attribute</param>
            <returns><code>null</code> if there is no attribute with the specified key</returns>
        </member>
        <member name="M:Mina.Core.Session.IoSession.GetAttribute(System.Object)">
            <summary>
            Gets the value of the user-defined attribute of this session.
            </summary>
            <param name="key">the key of the attribute</param>
            <returns><code>null</code> if there is no attribute with the specified key</returns>
        </member>
        <member name="M:Mina.Core.Session.IoSession.SetAttribute(System.Object,System.Object)">
            <summary>
             Sets a user-defined attribute.
            </summary>
            <param name="key">the key of the attribute</param>
            <param name="value">the value of the attribute</param>
            <returns>the old value of the attribute, or <code>null</code> if it is new</returns>
        </member>
        <member name="M:Mina.Core.Session.IoSession.SetAttribute(System.Object)">
            <summary>
            Sets a user defined attribute without a value.
            This is useful when you just want to put a 'mark' attribute.
            Its value is set to <code>true</code>.
            </summary>
            <param name="key">the key of the attribute</param>
            <returns>the old value of the attribute, or <code>null</code> if it is new</returns>
        </member>
        <member name="M:Mina.Core.Session.IoSession.SetAttributeIfAbsent(System.Object,System.Object)">
            <summary>
            Sets a user defined attribute if the attribute with the specified key
            is not set yet.
            </summary>
            <param name="key">the key of the attribute</param>
            <param name="value">the value of the attribute</param>
            <returns>the old value of the attribute, or <code>null</code> if it is new</returns>
        </member>
        <member name="M:Mina.Core.Session.IoSession.RemoveAttribute(System.Object)">
            <summary>
            Removes a user-defined attribute with the specified key.
            </summary>
            <param name="key">the key of the attribute</param>
            <returns>the old value of the attribute, or <code>null</code> if not found</returns>
        </member>
        <member name="M:Mina.Core.Session.IoSession.ContainsAttribute(System.Object)">
            <summary>
            Returns <code>true</code> if this session contains the attribute with
            the specified <paramref name="key"/>.
            </summary>
            <param name="key">the key of the attribute</param>
            <returns>true or false</returns>
        </member>
        <member name="P:Mina.Core.Session.IoSession.WriteSuspended">
            <summary>
            Checks if write operation is suspended for this session. 
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.ReadSuspended">
            <summary>
            Checks if read operation is suspended for this session. 
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSession.SuspendRead">
            <summary>
            Suspends read operations for this session.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSession.SuspendWrite">
            <summary>
            Suspends write operations for this session.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSession.ResumeRead">
            <summary>
            Resumes read operations for this session.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSession.ResumeWrite">
            <summary>
            Resumes write operations for this session.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.CurrentWriteRequest">
            <summary>
            Gets or sets the <see cref="T:Mina.Core.Write.IWriteRequest"/> which is being processed by <see cref="T:Mina.Core.Service.IoService"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.ReadBytes">
            <summary>
            Gets the total number of bytes which were read from this session.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.WrittenBytes">
            <summary>
            Gets the total number of bytes which were written to this session.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.ReadMessages">
            <summary>
            Gets the total number of messages which were read and decoded from this session.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.WrittenMessages">
            <summary>
            Gets the total number of messages which were written and encoded by this session.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.ReadBytesThroughput">
            <summary>
            Gets the number of read bytes per second.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.WrittenBytesThroughput">
            <summary>
            Gets the number of written bytes per second.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.ReadMessagesThroughput">
            <summary>
            Gets the number of read messages per second.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.WrittenMessagesThroughput">
            <summary>
            Gets the number of written messages per second.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.CreationTime">
            <summary>
            Gets the session's creation time.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.LastIoTime">
            <summary>
            Gets the time when I/O occurred lastly.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.LastReadTime">
            <summary>
            Gets the time when read operation occurred lastly.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.LastWriteTime">
            <summary>
            Gets the time when write operation occurred lastly.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSession.IsIdle(Mina.Core.Session.IdleStatus)">
            <summary>
            Returns <code>true</code> if this session is idle for the
            specified <see cref="T:Mina.Core.Session.IdleStatus"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.IsReaderIdle">
            <summary>
            Checks if this session is <see cref="F:Mina.Core.Session.IdleStatus.ReaderIdle"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.IsWriterIdle">
            <summary>
            Checks if this session is <see cref="F:Mina.Core.Session.IdleStatus.WriterIdle"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.IsBothIdle">
            <summary>
            Checks if this session is <see cref="F:Mina.Core.Session.IdleStatus.BothIdle"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSession.GetIdleCount(Mina.Core.Session.IdleStatus)">
            <summary>
            Gets the number of the fired continuous <code>SessionIdle</code> events
            for the specified <see cref="T:Mina.Core.Session.IdleStatus"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.ReaderIdleCount">
            <summary>
            Gets the number of the fired continuous <code>SessionIdle</code> events
            for <see cref="F:Mina.Core.Session.IdleStatus.ReaderIdle"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.WriterIdleCount">
            <summary>
            Gets the number of the fired continuous <code>SessionIdle</code> events
            for <see cref="F:Mina.Core.Session.IdleStatus.WriterIdle"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.BothIdleCount">
            <summary>
            Gets the number of the fired continuous <code>SessionIdle</code> events
            for <see cref="F:Mina.Core.Session.IdleStatus.BothIdle"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSession.GetLastIdleTime(Mina.Core.Session.IdleStatus)">
            <summary>
             Returns the time when the last <code>SessionIdle</code> event
             is fired for the specified <see cref="T:Mina.Core.Session.IdleStatus"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.LastReaderIdleTime">
            <summary>
             Gets the time when the last <code>SessionIdle</code> event
             is fired for <see cref="F:Mina.Core.Session.IdleStatus.ReaderIdle"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.LastWriterIdleTime">
            <summary>
             Gets the time when the last <code>SessionIdle</code> event
             is fired for <see cref="F:Mina.Core.Session.IdleStatus.WriterIdle"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSession.LastBothIdleTime">
            <summary>
             Gets the time when the last <code>SessionIdle</code> event
             is fired for <see cref="F:Mina.Core.Session.IdleStatus.BothIdle"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSession.UpdateThroughput(System.DateTime,System.Boolean)">
            <summary>
            Update all statistical properties related with throughput assuming
            the specified time is the current time.
            </summary>
        </member>
        <member name="T:Mina.Core.Session.IoSessionEventArgs">
            <summary>
            Provides data for <see cref="T:Mina.Core.Session.IoSession"/>'s events.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionEventArgs.#ctor(Mina.Core.Session.IoSession)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSessionEventArgs.Session">
            <summary>
            Gets the associated session.
            </summary>
        </member>
        <member name="T:Mina.Core.Session.IoSessionIdleEventArgs">
            <summary>
            Provides data for <see cref="T:Mina.Core.Session.IoSession"/>'s idle event.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionIdleEventArgs.#ctor(Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSessionIdleEventArgs.IdleStatus">
            <summary>
            Gets the <see cref="P:Mina.Core.Session.IoSessionIdleEventArgs.IdleStatus"/>.
            </summary>
        </member>
        <member name="T:Mina.Core.Session.IoSessionExceptionEventArgs">
            <summary>
            Provides data for <see cref="T:Mina.Core.Session.IoSession"/>'s exception event.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionExceptionEventArgs.#ctor(Mina.Core.Session.IoSession,System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSessionExceptionEventArgs.Exception">
            <summary>
            Gets the associated exception.
            </summary>
        </member>
        <member name="T:Mina.Core.Session.IoSessionMessageEventArgs">
            <summary>
            Provides data for <see cref="T:Mina.Core.Session.IoSession"/>'s message receive/sent event.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionMessageEventArgs.#ctor(Mina.Core.Session.IoSession,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSessionMessageEventArgs.Message">
            <summary>
            Gets the associated message.
            </summary>
        </member>
        <member name="T:Mina.Core.Session.IoSessionConfig">
            <summary>
            The configuration of <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSessionConfig.ReadBufferSize">
            <summary>
            Gets or sets the size for the read buffer.
            <remarks>
            The default value depends on the transport.
            For socket transport it is 2048.
            For serial transport it is 0, indicating the system's default buffer size.
            </remarks>
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSessionConfig.ThroughputCalculationInterval">
            <summary>
            Gets or sets the interval (seconds) between each throughput calculation.
            The default value is 3 seconds.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSessionConfig.ThroughputCalculationIntervalInMillis">
            <summary>
            Returns the interval (milliseconds) between each throughput calculation.
            The default value is 3 seconds.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionConfig.GetIdleTime(Mina.Core.Session.IdleStatus)">
            <summary>
            Returns idle time for the specified type of idleness in seconds.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionConfig.GetIdleTimeInMillis(Mina.Core.Session.IdleStatus)">
            <summary>
            Returns idle time for the specified type of idleness in milliseconds.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionConfig.SetIdleTime(Mina.Core.Session.IdleStatus,System.Int32)">
            <summary>
            Sets idle time for the specified type of idleness in seconds.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSessionConfig.ReaderIdleTime">
            <summary>
            Gets or sets idle time for <see cref="F:Mina.Core.Session.IdleStatus.ReaderIdle"/> in seconds.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSessionConfig.WriterIdleTime">
            <summary>
            Gets or sets idle time for <see cref="F:Mina.Core.Session.IdleStatus.WriterIdle"/> in seconds.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSessionConfig.BothIdleTime">
            <summary>
            Gets or sets idle time for <see cref="F:Mina.Core.Session.IdleStatus.BothIdle"/> in seconds.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSessionConfig.WriteTimeout">
            <summary>
            Gets or set write timeout in seconds.
            </summary>
        </member>
        <member name="P:Mina.Core.Session.IoSessionConfig.WriteTimeoutInMillis">
            <summary>
            Gets write timeout in milliseconds.
            </summary>
        </member>
        <member name="M:Mina.Core.Session.IoSessionConfig.SetAll(Mina.Core.Session.IoSessionConfig)">
            <summary>
            Sets all configuration properties retrieved from the specified config.
            </summary>
        </member>
        <member name="T:Mina.Core.Write.IWriteRequestQueue">
            <summary>
            Stores <see cref="T:Mina.Core.Write.IWriteRequest"/>s which are queued to an <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Write.IWriteRequestQueue.Poll(Mina.Core.Session.IoSession)">
            <summary>
            Gets the first request available in the queue for a session.
            </summary>
            <param name="session">the associated session</param>
            <returns>the first available request, if any.</returns>
        </member>
        <member name="M:Mina.Core.Write.IWriteRequestQueue.Offer(Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <summary>
            Adds a new WriteRequest to the session write's queue
            </summary>
            <param name="session">the associated session</param>
            <param name="writeRequest">the writeRequest to add</param>
        </member>
        <member name="M:Mina.Core.Write.IWriteRequestQueue.IsEmpty(Mina.Core.Session.IoSession)">
            <summary>
            Tells if the WriteRequest queue is empty or not for a session.
            </summary>
            <param name="session">the associated session</param>
            <returns><code>true</code> if the writeRequest queue is empty</returns>
        </member>
        <member name="M:Mina.Core.Write.IWriteRequestQueue.Clear(Mina.Core.Session.IoSession)">
            <summary>
            Removes all the requests from this session's queue.
            </summary>
            <param name="session">the associated session</param>
        </member>
        <member name="M:Mina.Core.Write.IWriteRequestQueue.Dispose(Mina.Core.Session.IoSession)">
            <summary>
            Disposes any releases associated with the specified session.
            This method is invoked on disconnection.
            </summary>
            <param name="session">the associated session</param>
        </member>
        <member name="P:Mina.Core.Write.IWriteRequestQueue.Size">
            <summary>
            Gets number of objects currently stored in the queue.
            </summary>
        </member>
        <member name="T:Mina.Core.Write.NothingWrittenException">
            <summary>
            An exception which is thrown when one or more write requests resulted
            in no actual write operation.
            </summary>
        </member>
        <member name="T:Mina.Core.Write.WriteException">
            <summary>
            An exception which is thrown when one or more write operations were failed.
            </summary>
        </member>
        <member name="M:Mina.Core.Write.WriteException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Write.WriteRequestWrapper">
            <summary>
            A wrapper for an existing <see cref="T:Mina.Core.Write.IWriteRequest"/>.
            </summary>
        </member>
        <member name="M:Mina.Core.Write.WriteRequestWrapper.#ctor(Mina.Core.Write.IWriteRequest)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Core.Write.WriteRequestWrapper.OriginalRequest">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Write.WriteRequestWrapper.Message">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Write.WriteRequestWrapper.Destination">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Write.WriteRequestWrapper.Encoded">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Write.WriteRequestWrapper.Future">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Write.WriteTimeoutException">
            <summary>
            An exception which is thrown when write buffer is not flushed for
            <see cref="P:Mina.Core.Session.IoSessionConfig.WriteTimeout"/> seconds.
            </summary>
        </member>
        <member name="M:Mina.Core.Write.WriteTimeoutException.#ctor(Mina.Core.Write.IWriteRequest)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Write.WriteTimeoutException.#ctor(System.Collections.Generic.IEnumerable{Mina.Core.Write.IWriteRequest})">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Write.WriteTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="T:Mina.Core.Write.WriteToClosedSessionException">
            <summary>
            An exception which is thrown when one or more write operations were
            attempted on a closed session.
            </summary>
        </member>
        <member name="M:Mina.Core.Write.WriteToClosedSessionException.#ctor(Mina.Core.Write.IWriteRequest)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Write.WriteToClosedSessionException.#ctor(System.Collections.Generic.IEnumerable{Mina.Core.Write.IWriteRequest})">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Core.Write.WriteToClosedSessionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="F:Mina.Core.Write.DefaultWriteRequest.EmptyMessage">
            <summary>
            An empty message.
            </summary>
        </member>
        <member name="P:Mina.Core.Write.DefaultWriteRequest.OriginalRequest">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Write.DefaultWriteRequest.Message">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Write.DefaultWriteRequest.Destination">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Write.DefaultWriteRequest.Future">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Core.Write.DefaultWriteRequest.Encoded">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Core.Write.IWriteRequest">
            <summary>
            Represents write request fired by <see cref="M:Mina.Core.Session.IoSession.Write(System.Object)"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Write.IWriteRequest.OriginalRequest">
            <summary>
            Gets the <see cref="T:Mina.Core.Write.IWriteRequest"/> which was requested originally,
            which is not transformed by any <see cref="T:Mina.Core.Filterchain.IoFilter"/>.
            </summary>
        </member>
        <member name="P:Mina.Core.Write.IWriteRequest.Message">
            <summary>
            Gets the message object to be written.
            </summary>
        </member>
        <member name="P:Mina.Core.Write.IWriteRequest.Destination">
            <summary>
            Gets the destination of this write request.
            </summary>
        </member>
        <member name="P:Mina.Core.Write.IWriteRequest.Encoded">
            <summary>
            Tells if the current message has been encoded.
            </summary>
        </member>
        <member name="P:Mina.Core.Write.IWriteRequest.Future">
            <summary>
            Gets <see cref="T:Mina.Core.Future.IWriteFuture"/> that is associated with this write request.
            </summary>
        </member>
        <member name="T:Mina.Filter.Buffer.BufferedWriteFilter">
            <summary>
            An <see cref="T:Mina.Core.Filterchain.IoFilter"/> implementation used to buffer outgoing <see cref="T:Mina.Core.Write.IWriteRequest"/>.
            Using this filter allows to be less dependent from network latency.
            It is also useful when a session is generating very small messages
            too frequently and consequently generating unnecessary traffic overhead.
            <remarks>
            Please note that it should always be placed before the <see cref="T:Mina.Filter.Codec.ProtocolCodecFilter"/> 
            as it only handles <see cref="T:Mina.Core.Write.IWriteRequest"/>s carrying <see cref="T:Mina.Core.Buffer.IoBuffer"/> objects.
            </remarks>
            </summary>
        </member>
        <member name="F:Mina.Filter.Buffer.BufferedWriteFilter.DefaultBufferSize">
            <summary>
            Default buffer size value in bytes.
            </summary>
        </member>
        <member name="P:Mina.Filter.Buffer.BufferedWriteFilter.BufferSize">
            <summary>
            Gets or sets the buffer size (only for the newly created buffers).
            </summary>
        </member>
        <member name="M:Mina.Filter.Buffer.BufferedWriteFilter.FilterWrite(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Buffer.BufferedWriteFilter.SessionClosed(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Buffer.BufferedWriteFilter.ExceptionCaught(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Codec.AbstractProtocolDecoderOutput">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/> based on queue.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.AbstractProtocolDecoderOutput.Write(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.AbstractProtocolDecoderOutput.Flush(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Codec.AbstractProtocolEncoderOutput">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolEncoderOutput"/> based on queue.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.AbstractProtocolEncoderOutput.Write(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.AbstractProtocolEncoderOutput.MergeAll">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.AbstractProtocolEncoderOutput.Flush">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Codec.CumulativeProtocolDecoder">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> that cumulates the content of received buffers to a
            cumulative buffer to help users implement decoders. 
            </summary>
        </member>
        <member name="F:Mina.Filter.Codec.CumulativeProtocolDecoder._transportMetadataFragmentation">
            <summary>
            A flag set to true if we handle fragmentation accordingly to the TransportMetadata setting.
            It can be set to false if needed (UDP with fragments, for instance). The default value is <code>true</code>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.CumulativeProtocolDecoder.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.CumulativeProtocolDecoder.TransportMetadataFragmentation">
            <summary>
            Gets or sets a value indicating whether to check the TransportMetadata fragmentation capability or not.
            The default value is <code>true</code>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.CumulativeProtocolDecoder.Decode(Mina.Core.Session.IoSession,Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.CumulativeProtocolDecoder.DoDecode(Mina.Core.Session.IoSession,Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Implement this method to consume the specified cumulative buffer and decode its content into message(s).
            </summary>
            <param name="session"></param>
            <param name="input"></param>
            <param name="output"></param>
            <returns>
            true if and only if there's more to decode in the buffer
            and you want to have DoDecode method invoked again.
            Return false if remaining data is not enough to decode,
            then this method will be invoked again when more data is cumulated.
            </returns>
        </member>
        <member name="T:Mina.Filter.Codec.Demux.DemuxingProtocolCodecFactory">
            <summary>
            A convenience <see cref="T:Mina.Filter.Codec.IProtocolCodecFactory"/> that provides <see cref="T:Mina.Filter.Codec.Demux.DemuxingProtocolEncoder"/>
            and <see cref="T:Mina.Filter.Codec.Demux.DemuxingProtocolDecoder"/> as a pair.
            <remarks>
            <see cref="T:Mina.Filter.Codec.Demux.DemuxingProtocolEncoder"/> and <see cref="T:Mina.Filter.Codec.Demux.DemuxingProtocolDecoder"/> demultiplex
            incoming messages and buffers to appropriate <see cref="T:Mina.Filter.Codec.Demux.IMessageEncoder"/>s and 
            <see cref="T:Mina.Filter.Codec.Demux.IMessageDecoder"/>s.
            </remarks>
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.Demux.DemuxingProtocolCodecFactory.GetEncoder(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.Demux.DemuxingProtocolCodecFactory.GetDecoder(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Codec.Demux.DemuxingProtocolDecoder">
            <summary>
            A composite <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> that demultiplexes incoming <see cref="T:Mina.Core.Buffer.IoBuffer"/>
            decoding requests into an appropriate <see cref="T:Mina.Filter.Codec.Demux.IMessageDecoder"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.Demux.DemuxingProtocolDecoder.Dispose(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.Demux.DemuxingProtocolDecoder.FinishDecode(Mina.Core.Session.IoSession,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.Demux.DemuxingProtocolDecoder.DoDecode(Mina.Core.Session.IoSession,Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Codec.Demux.DemuxingProtocolEncoder">
            <summary>
            A composite <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> that demultiplexes incoming message
            encoding requests into an appropriate <see cref="T:Mina.Filter.Codec.Demux.IMessageEncoder"/>.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.Demux.IMessageDecoder">
            <summary>
            Decodes a certain type of messages.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.Demux.IMessageDecoder.Decodable(Mina.Core.Session.IoSession,Mina.Core.Buffer.IoBuffer)">
            <summary>
            Checks the specified buffer is decodable by this decoder.
            </summary>
            <returns>
            <see cref="F:Mina.Filter.Codec.Demux.MessageDecoderResult.OK"/> if this decoder can decode the specified buffer.
            <see cref="F:Mina.Filter.Codec.Demux.MessageDecoderResult.NotOK"/> if this decoder cannot decode the specified buffer.
            <see cref="F:Mina.Filter.Codec.Demux.MessageDecoderResult.NeedData"/> if more data is required to determine if the specified buffer is decodable or not.
            </returns>
        </member>
        <member name="M:Mina.Filter.Codec.Demux.IMessageDecoder.Decode(Mina.Core.Session.IoSession,Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Decodes binary or protocol-specific content into higher-level message objects.
            </summary>
            <remarks>
            MINA invokes <code>Decode(IoSession, IoBuffer, ProtocolDecoderOutput)</code>
            method with read data, and then the decoder implementation puts decoded
            messages into <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/>.
            </remarks>
            <returns>
            <see cref="F:Mina.Filter.Codec.Demux.MessageDecoderResult.OK"/> if you finished decoding messages successfully.
            <see cref="F:Mina.Filter.Codec.Demux.MessageDecoderResult.NeedData"/> if you need more data to finish decoding current message.
            <see cref="F:Mina.Filter.Codec.Demux.MessageDecoderResult.NotOK"/> if you cannot decode current message due to protocol specification violation.
            </returns>
        </member>
        <member name="M:Mina.Filter.Codec.Demux.IMessageDecoder.FinishDecode(Mina.Core.Session.IoSession,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Invoked when the specified <code>session</code> is closed while this decoder was
            parsing the data.  This method is useful when you deal with the protocol which doesn't
            specify the length of a message such as HTTP response without <code>content-length</code>
            header. Implement this method to process the remaining data that
            <code>Decode(IoSession, IoBuffer, ProtocolDecoderOutput)</code> method didn't process completely.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.Demux.IMessageDecoderFactory">
            <summary>
            A factory that creates a new instance of <see cref="T:Mina.Filter.Codec.Demux.IMessageDecoder"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.Demux.IMessageDecoderFactory.GetDecoder">
            <summary>
            Creates a new message decoder.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.Demux.IMessageEncoder">
            <summary>
            Encodes a certain type of messages.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.Demux.IMessageEncoder.Encode(Mina.Core.Session.IoSession,System.Object,Mina.Filter.Codec.IProtocolEncoderOutput)">
            <summary>
            Encodes higher-level message objects into binary or protocol-specific data.
            </summary>
            <remarks>
            MINA invokes <code>Encode(IoSession, Object, ProtocolEncoderOutput)</code>
            method with message which is popped from the session write queue, and then
            the encoder implementation puts encoded <see cref="T:Mina.Core.Buffer.IoBuffer"/>s into
            <see cref="T:Mina.Filter.Codec.IProtocolEncoderOutput"/>.
            </remarks>
        </member>
        <member name="T:Mina.Filter.Codec.Demux.IMessageEncoder`1">
            <summary>
            Encodes a certain type of messages.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mina.Filter.Codec.Demux.IMessageEncoder`1.Encode(Mina.Core.Session.IoSession,`0,Mina.Filter.Codec.IProtocolEncoderOutput)">
            <summary>
            Encodes higher-level message objects into binary or protocol-specific data.
            </summary>
            <remarks>
            MINA invokes <code>Encode(IoSession, Object, ProtocolEncoderOutput)</code>
            method with message which is popped from the session write queue, and then
            the encoder implementation puts encoded <see cref="T:Mina.Core.Buffer.IoBuffer"/>s into
            <see cref="T:Mina.Filter.Codec.IProtocolEncoderOutput"/>.
            </remarks>
        </member>
        <member name="T:Mina.Filter.Codec.Demux.IMessageEncoderFactory">
            <summary>
            A factory that creates a new instance of <see cref="T:Mina.Filter.Codec.Demux.IMessageEncoder"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.Demux.IMessageEncoderFactory.GetEncoder">
            <summary>
            Creates a new message encoder.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.Demux.IMessageEncoderFactory`1">
            <summary>
            A factory that creates a new instance of <see cref="T:Mina.Filter.Codec.Demux.IMessageEncoder"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.Demux.IMessageEncoderFactory`1.GetEncoder">
            <summary>
            Creates a new message encoder.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.Demux.MessageDecoderAdapter">
            <summary>
            An abstract <see cref="T:Mina.Filter.Codec.Demux.IMessageDecoder"/> implementation for those who don't need to
            implement <code>FinishDecode(IoSession, IProtocolDecoderOutput)</code> method.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.Demux.MessageDecoderResult">
            <summary>
            Represents results from <see cref="T:Mina.Filter.Codec.Demux.IMessageDecoder"/>.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.IProtocolCodecFactory">
            <summary>
            Provides <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> and <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> which translates
            binary or protocol specific data into message object and vice versa.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.IProtocolCodecFactory.GetEncoder(Mina.Core.Session.IoSession)">
            <summary>
            Returns a new (or reusable) instance of <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> which
            encodes message objects into binary or protocol-specific data.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.IProtocolCodecFactory.GetDecoder(Mina.Core.Session.IoSession)">
            <summary>
            Returns a new (or reusable) instance of <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> which
            decodes binary or protocol-specific data into message objects.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.IProtocolDecoder">
            <summary>
            Decodes binary or protocol-specific data into higher-level message objects.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.IProtocolDecoder.Decode(Mina.Core.Session.IoSession,Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Decodes binary or protocol-specific data into higher-level message objects.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.IProtocolDecoder.FinishDecode(Mina.Core.Session.IoSession,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Invoked when the specified <tt>session</tt> is closed.  This method is useful
            when you deal with the protocol which doesn't specify the length of a message
            such as HTTP response without <tt>content-length</tt> header.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.IProtocolDecoder.Dispose(Mina.Core.Session.IoSession)">
            <summary>
            Releases all resources related with this decoder.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.IProtocolDecoderOutput">
            <summary>
            Callback for <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> to generate decoded messages.
            <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> must call write(Object) for each decoded
            messages.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.IProtocolDecoderOutput.Write(System.Object)">
            <summary>
            Callback for <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> to generate decoded messages.
            <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> must call write(Object) for each decoded
            messages.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.IProtocolDecoderOutput.Flush(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <summary>
            Flushes all messages you wrote via write(Object) to
            the next filter.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.IProtocolEncoder">
            <summary>
            Encodes higher-level message objects into binary or protocol-specific data.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.IProtocolEncoder.Encode(Mina.Core.Session.IoSession,System.Object,Mina.Filter.Codec.IProtocolEncoderOutput)">
            <summary>
            Encodes higher-level message objects into binary or protocol-specific data.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.IProtocolEncoder.Dispose(Mina.Core.Session.IoSession)">
            <summary>
            Releases all resources related with this encoder.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.IProtocolEncoderOutput">
            <summary>
            Callback for <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> to generate encoded messages such as
            <see cref="T:Mina.Core.Buffer.IoBuffer"/>s.  <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> must call #write(Object)
            for each encoded message.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.IProtocolEncoderOutput.Write(System.Object)">
            <summary>
            Callback for <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> to generate encoded messages such as
            <see cref="T:Mina.Core.Buffer.IoBuffer"/>s.  <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> must call #write(Object)
            for each encoded message.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.IProtocolEncoderOutput.MergeAll">
            <summary>
            Merges all buffers you wrote via <see cref="M:Mina.Filter.Codec.IProtocolEncoderOutput.Write(System.Object)"/> into one <see cref="T:Mina.Core.Buffer.IoBuffer"/>
            and replaces the old fragmented ones with it.
            This method is useful when you want to control the way Mina.NET generates network packets.
            <remarks>
            Please note that this method only works when you called <see cref="M:Mina.Filter.Codec.IProtocolEncoderOutput.Write(System.Object)"/> method
            with only <see cref="T:Mina.Core.Buffer.IoBuffer"/>s.
            </remarks>
            </summary>
            <exception cref="T:System.InvalidOperationException">if you wrote something else than <see cref="T:Mina.Core.Buffer.IoBuffer"/></exception>
        </member>
        <member name="M:Mina.Filter.Codec.IProtocolEncoderOutput.Flush">
            <summary>
            Flushes all buffers you wrote via <see cref="M:Mina.Filter.Codec.IProtocolEncoderOutput.Write(System.Object)"/> to the session.
            This operation is asynchronous; please wait for the returned <see cref="T:Mina.Core.Future.IWriteFuture"/>
            if you want to wait for the buffers flushed.
            </summary>
            <returns><code>null</code> if there is nothing to flush at all</returns>
        </member>
        <member name="T:Mina.Filter.Codec.PrefixedString.PrefixedStringCodecFactory">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolCodecFactory"/> that performs encoding and decoding
            of a string using a fixed-length length prefix.
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.PrefixedString.PrefixedStringCodecFactory.EncoderPrefixLength">
            <summary>
            Gets or sets the length of the length prefix (1, 2, or 4) used by the encoder.
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.PrefixedString.PrefixedStringCodecFactory.EncoderMaxDataLength">
            <summary>
            Gets or sets the allowed maximum size of an encoded String.
            <remarks>
            If the size of the encoded String exceeds this value, the encoder
            will throw a <see cref="T:System.ArgumentException"/>.
            The default value is <see cref="F:Mina.Filter.Codec.PrefixedString.PrefixedStringCodecFactory.DefaultMaxDataLength"/>.
            </remarks>
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.PrefixedString.PrefixedStringCodecFactory.DecoderPrefixLength">
            <summary>
            Gets or sets the length of the length prefix (1, 2, or 4) used by the decoder.
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.PrefixedString.PrefixedStringCodecFactory.DecoderMaxDataLength">
            <summary>
            Gets or sets the maximum allowed value specified as data length in the decoded data.
            <remarks>
            Useful for preventing an OutOfMemory attack by the peer.
            The decoder will throw a <see cref="T:Mina.Core.Buffer.BufferDataException"/> when data length
            specified in the incoming data is greater than MaxDataLength.
            The default value is <see cref="F:Mina.Filter.Codec.PrefixedString.PrefixedStringCodecFactory.DefaultMaxDataLength"/>.
            </remarks>
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.PrefixedString.PrefixedStringCodecFactory.GetEncoder(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.PrefixedString.PrefixedStringCodecFactory.GetDecoder(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Codec.PrefixedString.PrefixedStringDecoder">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> which decodes a String using a fixed-length length prefix.
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.PrefixedString.PrefixedStringDecoder.PrefixLength">
            <summary>
            Gets or sets the length of the length prefix (1, 2, or 4).
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.PrefixedString.PrefixedStringDecoder.MaxDataLength">
            <summary>
            Gets or sets the maximum allowed value specified as data length in the incoming data.
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.PrefixedString.PrefixedStringDecoder.Encoding">
            <summary>
            Gets or set the text encoding.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.PrefixedString.PrefixedStringEncoder">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> which encodes a string using a fixed-length length prefix.
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.PrefixedString.PrefixedStringEncoder.PrefixLength">
            <summary>
            Gets or sets the length of the length prefix (1, 2, or 4).
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.PrefixedString.PrefixedStringEncoder.MaxDataLength">
            <summary>
            Gets or sets the maximum number of bytes allowed for encoding a single string.
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.PrefixedString.PrefixedStringEncoder.Encoding">
            <summary>
            Gets or set the text encoding.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.PrefixedString.PrefixedStringEncoder.Encode(Mina.Core.Session.IoSession,System.Object,Mina.Filter.Codec.IProtocolEncoderOutput)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Codec.ProtocolCodecException">
            <summary>
            An exception that is thrown when <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> or
            <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> cannot understand or failed to validate
            data to process.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolCodecException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolCodecException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolCodecException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolCodecException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.ProtocolEncoderException">
            <summary>
            An exception that is thrown when <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/>
            cannot understand or failed to validate the specified message object.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolEncoderException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolEncoderException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolEncoderException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolEncoderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.ProtocolDecoderException">
            <summary>
            An exception that is thrown when <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/>
            cannot understand or failed to validate the specified <see cref="T:Mina.Core.Buffer.IoBuffer"/>
            content.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolDecoderException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolDecoderException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolDecoderException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolDecoderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.ProtocolDecoderException.Hexdump">
            <summary>
            Gets the current data in hex.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolDecoderException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.ProtocolCodecFilter">
            <summary>
            An <see cref="T:Mina.Core.Filterchain.IoFilter"/> which translates binary or protocol specific data into
            message objects and vice versa using <see cref="T:Mina.Filter.Codec.IProtocolCodecFactory"/>,
            <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/>, or <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolCodecFilter.#ctor(Mina.Filter.Codec.IProtocolCodecFactory)">
            <summary>
            Instantiates.
            </summary>
            <param name="factory">the factory for creating <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> and <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/></param>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolCodecFilter.#ctor(Mina.Filter.Codec.IProtocolEncoder,Mina.Filter.Codec.IProtocolDecoder)">
            <summary>
            Instantiates.
            </summary>
            <param name="encoder">the <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> for encoding message objects into binary or protocol specific data</param>
            <param name="decoder">the <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> for decoding binary or protocol specific data into message objects</param>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolCodecFilter.OnPreAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolCodecFilter.OnPostRemove(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolCodecFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolCodecFilter.MessageSent(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolCodecFilter.FilterWrite(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolCodecFilter.SessionClosed(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Codec.ProtocolCodecSession">
            <summary>
            A virtual <see cref="T:Mina.Core.Session.IoSession"/> that provides <see cref="T:Mina.Filter.Codec.IProtocolEncoderOutput"/>
            and <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/>.  It is useful for unit-testing
            codec and reusing codec for non-network-use (e.g. serialization).
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.ProtocolDecoderAdapter">
            <summary>
            An abstract <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> implementation for those who don't need
            FinishDecode(IoSession, ProtocolDecoderOutput) nor
            Dispose(IoSession) method.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolDecoderAdapter.Decode(Mina.Core.Session.IoSession,Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolDecoderAdapter.FinishDecode(Mina.Core.Session.IoSession,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolDecoderAdapter.Dispose(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Codec.ProtocolEncoderAdapter">
            <summary>
            An abstract <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> implementation for those who don't have any
            resources to dispose.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolEncoderAdapter.Encode(Mina.Core.Session.IoSession,System.Object,Mina.Filter.Codec.IProtocolEncoderOutput)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.ProtocolEncoderAdapter.Dispose(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Codec.RecoverableProtocolDecoderException">
            <summary>
            A special exception that tells the <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> can keep
            decoding even after this exception is thrown.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.Serialization.ObjectSerializationCodecFactory">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolCodecFactory"/> that serializes and deserializes objects.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.Serialization.ObjectSerializationCodecFactory.GetEncoder(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.Serialization.ObjectSerializationCodecFactory.GetDecoder(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Filter.Codec.Serialization.ObjectSerializationCodecFactory.EncoderMaxObjectSize">
            <summary>
            Gets or sets the allowed maximum size of the encoded object.
            If the size of the encoded object exceeds this value, this encoder
            will throw a <see cref="T:System.ArgumentException"/>.  The default value
            is <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.Serialization.ObjectSerializationCodecFactory.DecoderMaxObjectSize">
            <summary>
            Gets or sets the allowed maximum size of the object to be decoded.
            If the size of the object to be decoded exceeds this value, this encoder
            will throw a <see cref="T:Mina.Core.Buffer.BufferDataException"/>.  The default value
            is <code>1048576</code> (1MB).
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.Serialization.ObjectSerializationDecoder">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> which deserializes <code>Serializable</code> objects,
            using <see cref="M:Mina.Core.Buffer.IoBuffer.GetObject"/>.
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.Serialization.ObjectSerializationDecoder.MaxObjectSize">
            <summary>
            Gets or sets the allowed maximum size of the object to be decoded.
            If the size of the object to be decoded exceeds this value, this encoder
            will throw a <see cref="T:Mina.Core.Buffer.BufferDataException"/>.  The default value
            is <code>1048576</code> (1MB).
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.Serialization.ObjectSerializationDecoder.DoDecode(Mina.Core.Session.IoSession,Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Codec.Serialization.ObjectSerializationEncoder">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> which serializes <code>Serializable</code> objects,
            using <see cref="M:Mina.Core.Buffer.IoBuffer.PutObject(System.Object)"/>.
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.Serialization.ObjectSerializationEncoder.MaxObjectSize">
            <summary>
            Gets or sets the allowed maximum size of the encoded object.
            If the size of the encoded object exceeds this value, this encoder
            will throw a <see cref="T:System.ArgumentException"/>.  The default value
            is <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.Serialization.ObjectSerializationEncoder.Encode(Mina.Core.Session.IoSession,System.Object,Mina.Filter.Codec.IProtocolEncoderOutput)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.ConsumeToCrLfDecodingState">
            <summary>
            <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> which consumes all bytes until a <code>CRLF</code> 
            has been encountered.
            </summary>
        </member>
        <member name="F:Mina.Filter.Codec.StateMachine.ConsumeToCrLfDecodingState.CR">
            <summary>
            Carriage return character
            </summary>
        </member>
        <member name="F:Mina.Filter.Codec.StateMachine.ConsumeToCrLfDecodingState.LF">
            <summary>
            Line feed character
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.ConsumeToCrLfDecodingState.FinishDecode(Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Invoked when this state has consumed all bytes until the session is closed.
            </summary>
            <param name="product">the read bytes including the <code>CRLF</code></param>
            <param name="output">the current <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/> used to write decoded messages.</param>
            <returns>
            the next state if a state transition was triggered (use 
            <code>this</code> for loop transitions) or <code>null</code> if 
            the state machine has reached its end.
            </returns>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.ConsumeToDynamicTerminatorDecodingState">
            <summary>
            <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> which consumes all bytes until a fixed (ASCII) 
            character is reached. The terminator is skipped.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.ConsumeToDynamicTerminatorDecodingState.IsTerminator(System.Byte)">
            <summary>
            Determines whether the specified <code>byte</code> is a terminator.
            </summary>
            <param name="b">the <code>byte</code> to check</param>
            <returns><code>true</code> if <code>b</code> is a terminator, otherwise false</returns>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.ConsumeToDynamicTerminatorDecodingState.FinishDecode(Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Invoked when this state has reached the terminator byte.
            </summary>
            <param name="product">the read bytes not including the terminator</param>
            <param name="output">the current <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/> used to write decoded messages.</param>
            <returns>
            the next state if a state transition was triggered (use 
            <code>this</code> for loop transitions) or <code>null</code> if 
            the state machine has reached its end.
            </returns>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.ConsumeToEndOfSessionDecodingState">
            <summary>
            <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> which consumes all received bytes until the session is closed.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.ConsumeToEndOfSessionDecodingState.#ctor(System.Int32)">
            <summary>
            Creates a new instance using the specified maximum length.
            </summary>
            <param name="maxLength">the maximum number of bytes which will be consumed</param>
            <remarks>
            If the max is reached a <see cref="T:Mina.Filter.Codec.ProtocolDecoderException"/> will be 
            thrown by <code>Decode(IoBuffer, IProtocolDecoderOutput)</code>
            </remarks>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.ConsumeToEndOfSessionDecodingState.FinishDecode(Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Invoked when this state has consumed all bytes until the session is closed.
            </summary>
            <param name="product">the bytes read</param>
            <param name="output">the current <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/> used to write decoded messages.</param>
            <returns>
            the next state if a state transition was triggered (use 
            <code>this</code> for loop transitions) or <code>null</code> if 
            the state machine has reached its end.
            </returns>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.ConsumeToLinearWhitespaceDecodingState">
            <summary>
            <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> which consumes all bytes until a space (0x20) or tab 
            (0x09) character is reached. The terminator is skipped.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.ConsumeToTerminatorDecodingState">
            <summary>
            <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> which consumes all bytes until a fixed (ASCII) 
            character is reached. The terminator is skipped.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.ConsumeToTerminatorDecodingState.#ctor(System.Byte)">
            <summary>
            Creates a new instance using the specified terminator character.
            </summary>
            <param name="terminator">the terminator character</param>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.ConsumeToTerminatorDecodingState.FinishDecode(Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Invoked when this state has reached the terminator byte.
            </summary>
            <param name="product">the read bytes not including the terminator</param>
            <param name="output">the current <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/> used to write decoded messages.</param>
            <returns>
            the next state if a state transition was triggered (use 
            <code>this</code> for loop transitions) or <code>null</code> if 
            the state machine has reached its end.
            </returns>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.CrLfDecodingState">
            <summary>
            <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> which decodes a single <code>CRLF</code>.
            If it is found, the bytes are consumed and <code>true</code>
            is provided as the product. Otherwise, read bytes are pushed back
            to the stream, and <code>false</code> is provided as the
            product.
            Note that if we find a CR but do not find a following LF, we raise
            an error.
            </summary>
        </member>
        <member name="F:Mina.Filter.Codec.StateMachine.CrLfDecodingState.CR">
            <summary>
            Carriage return character
            </summary>
        </member>
        <member name="F:Mina.Filter.Codec.StateMachine.CrLfDecodingState.LF">
            <summary>
            Line feed character
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.CrLfDecodingState.FinishDecode(System.Boolean,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Invoked when this state has found a <code>CRLF</code>.
            </summary>
            <param name="foundCRLF"><code>true</code> if <code>CRLF</code> was found</param>
            <param name="output">the current <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/> used to write decoded messages.</param>
            <returns>
            the next state if a state transition was triggered (use 
            <code>this</code> for loop transitions) or <code>null</code> if 
            the state machine has reached its end.
            </returns>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.DecodingStateMachine.Init">
            <summary>
            Invoked to initialize this state machine.
            </summary>
            <returns>the start <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/></returns>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.DecodingStateMachine.FinishDecode(System.Collections.Generic.List{System.Object},Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Called once the state machine has reached its end.
            </summary>
            <param name="childProducts">contains the messages generated by each of the <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/>s
            which were exposed to the received data during the life time of this state machine.</param>
            <param name="output">the real <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/> used by the <see cref="T:Mina.Filter.Codec.ProtocolCodecFilter"/></param>
            <returns>the next state if the state machine should resume</returns>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.DecodingStateMachine.Destroy">
            <summary>
            Invoked to destroy this state machine once the end state has been reached
            or the session has been closed.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.DecodingStateProtocolDecoder">
            <summary>
            <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> which uses a <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> to decode data.
            Use a <see cref="T:Mina.Filter.Codec.StateMachine.DecodingStateMachine"/> as <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> to create
            a state machine which can decode your protocol.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.DecodingStateProtocolDecoder.#ctor(Mina.Filter.Codec.StateMachine.IDecodingState)">
            <summary>
            Creates a new instance using the specified <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/>.
            </summary>
            <param name="state">the <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/></param>
            <exception cref="T:System.ArgumentNullException">if the specified state is <code>null</code></exception>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.FixedLengthDecodingState">
            <summary>
             <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> which consumes all received bytes until a configured
             number of read bytes has been reached. Please note that this state can
             produce a buffer with less data than the configured length if the associated 
             session has been closed unexpectedly.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.FixedLengthDecodingState.#ctor(System.Int32)">
            <summary>
            Constructs a new instance using the specified decode length.
            </summary>
            <param name="length">the number of bytes to read</param>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.FixedLengthDecodingState.FinishDecode(Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Invoked when this state has consumed the configured number of bytes.
            </summary>
            <param name="product">the data</param>
            <param name="output">the current <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/> used to write decoded messages.</param>
            <returns>
            the next state if a state transition was triggered (use 
            <code>this</code> for loop transitions) or <code>null</code> if 
            the state machine has reached its end.
            </returns>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.IDecodingState">
            <summary>
            Represents a state in a decoder state machine used by <see cref="T:Mina.Filter.Codec.StateMachine.DecodingStateMachine"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.IDecodingState.Decode(Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Invoked when data is available for this state.
            </summary>
            <param name="input">the data to be decoded</param>
            <param name="output">used to write decoded objects</param>
            <returns>
            the next state if a state transition was triggered (use 
            <code>this</code> for loop transitions) or <code>null</code> if 
            the state machine has reached its end.
            </returns>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.IDecodingState.FinishDecode(Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Invoked when the associated <see cref="T:Mina.Core.Session.IoSession"/> is closed.
            This method is 
            useful when you deal with protocols which don't specify the length of a 
            message (e.g. HTTP responses without <tt>content-length</tt> header). 
            Implement this method to process the remaining data that 
            <code>Decode(IoBuffer, IProtocolDecoderOutput)</code> method didn't process 
            completely.
            </summary>
            <param name="output">used to write decoded objects</param>
            <returns>
            the next state if a state transition was triggered (use 
            <code>this</code> for loop transitions) or <code>null</code> if 
            the state machine has reached its end.
            </returns>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.IntegerDecodingState">
            <summary>
            <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> which decodes <code>int</code> values
            in big-endian order (high bytes come first).
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.IntegerDecodingState.FinishDecode(System.Int32,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Invoked when this state has consumed a complete <code>int</code>.
            </summary>
            <param name="value">the integer</param>
            <param name="output">the current <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/> used to write decoded messages.</param>
            <returns>
            the next state if a state transition was triggered (use 
            <code>this</code> for loop transitions) or <code>null</code> if 
            the state machine has reached its end.
            </returns>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.LinearWhitespaceSkippingState">
            <summary>
            <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> which skips space (0x20) and tab (0x09) characters.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.ShortIntegerDecodingState">
            <summary>
            <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> which decodes <code>short</code> values
            in big-endian order (high bytes come first).
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.ShortIntegerDecodingState.FinishDecode(System.Int16,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Invoked when this state has consumed a complete <code>short</code>.
            </summary>
            <param name="value">the short</param>
            <param name="output">the current <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/> used to write decoded messages.</param>
            <returns>
            the next state if a state transition was triggered (use 
            <code>this</code> for loop transitions) or <code>null</code> if 
            the state machine has reached its end.
            </returns>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.SingleByteDecodingState">
            <summary>
            <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> which decodes <code>byte</code> values.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.SingleByteDecodingState.FinishDecode(System.Byte,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            Invoked when this state has consumed a complete <code>byte</code>.
            </summary>
            <param name="b">the byte</param>
            <param name="output">the current <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/> used to write decoded messages.</param>
            <returns>
            the next state if a state transition was triggered (use 
            <code>this</code> for loop transitions) or <code>null</code> if 
            the state machine has reached its end.
            </returns>
        </member>
        <member name="T:Mina.Filter.Codec.StateMachine.SkippingState">
            <summary>
            <see cref="T:Mina.Filter.Codec.StateMachine.IDecodingState"/> which skips data until <code>CanSkip(byte)</code> returns false.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.SkippingState.CanSkip(System.Byte)">
            <summary>
            Called to determine whether the specified byte can be skipped.
            </summary>
            <param name="b">the byte to check</param>
            <returns><code>true</code> if the byte can be skipped</returns>
        </member>
        <member name="M:Mina.Filter.Codec.StateMachine.SkippingState.FinishDecode(System.Int32)">
            <summary>
            Invoked when this state cannot skip any more bytes.
            </summary>
            <param name="skippedBytes">the number of bytes skipped</param>
            <returns>the next state if a state transition was triggered (use 
            <code>this</code> for loop transitions) or <code>null</code> if 
            the state machine has reached its end.</returns>
        </member>
        <member name="T:Mina.Filter.Codec.SynchronizedProtocolDecoder">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> implementation which decorates an existing decoder
            to be thread-safe.  Please be careful if you're going to use this decorator
            because it can be a root of performance degradation in a multi-thread
            environment.  Also, by default, appropriate synchronization is done
            on a per-session basis by <see cref="T:Mina.Filter.Codec.ProtocolCodecFilter"/>.  Please use this
            decorator only when you need to synchronize on a per-decoder basis, which
            is not common.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.SynchronizedProtocolEncoder">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> implementation which decorates an existing encoder
            to be thread-safe.  Please be careful if you're going to use this decorator
            because it can be a root of performance degradation in a multi-thread
            environment.  Please use this decorator only when you need to synchronize
            on a per-encoder basis instead of on a per-session basis, which is not
            common.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.TextLine.LineDelimiter">
            <summary>
            A delimiter which is appended to the end of a text line, such as
            <tt>CR/LF</tt>. This class defines default delimiters for various OS.
            </summary>
        </member>
        <member name="F:Mina.Filter.Codec.TextLine.LineDelimiter.Default">
            <summary>
            The line delimiter constant of the current O/S.
            </summary>
        </member>
        <member name="F:Mina.Filter.Codec.TextLine.LineDelimiter.Auto">
            <summary>
            A special line delimiter which is used for auto-detection of
            EOL in <see cref="T:Mina.Filter.Codec.TextLine.TextLineDecoder"/>.  If this delimiter is used,
            <see cref="T:Mina.Filter.Codec.TextLine.TextLineDecoder"/> will consider both  <tt>'\r'</tt> and
            <tt>'\n'</tt> as a delimiter.
            </summary>
        </member>
        <member name="F:Mina.Filter.Codec.TextLine.LineDelimiter.CRLF">
            <summary>
            The CRLF line delimiter constant (<tt>"\r\n"</tt>)
            </summary>
        </member>
        <member name="F:Mina.Filter.Codec.TextLine.LineDelimiter.Unix">
            <summary>
            The line delimiter constant of UNIX (<tt>"\n"</tt>)
            </summary>
        </member>
        <member name="F:Mina.Filter.Codec.TextLine.LineDelimiter.Windows">
            <summary>
            The line delimiter constant of MS Windows/DOS (<tt>"\r\n"</tt>)
            </summary>
        </member>
        <member name="F:Mina.Filter.Codec.TextLine.LineDelimiter.Mac">
            <summary>
            The line delimiter constant of Mac OS (<tt>"\r"</tt>)
            </summary>
        </member>
        <member name="F:Mina.Filter.Codec.TextLine.LineDelimiter.NUL">
            <summary>
            The line delimiter constant for NUL-terminated text protocols
            such as Flash XML socket (<tt>"\0"</tt>)
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.LineDelimiter.#ctor(System.String)">
            <summary>
            Creates a new line delimiter with the specified <tt>delimiter</tt>.
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.TextLine.LineDelimiter.Value">
            <summary>
            Gets the delimiter string.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.TextLine.TextLineCodecFactory">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolCodecFactory"/> that performs encoding and decoding between
            a text line data and a Java string object.  This codec is useful especially
            when you work with a text-based protocols such as SMTP and IMAP.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineCodecFactory.#ctor">
            <summary>
            Instantiates with <see cref="P:System.Text.Encoding.Default"/> for encoding,
            <see cref="F:Mina.Filter.Codec.TextLine.LineDelimiter.Unix"/> for encoding delimiter, and
            <see cref="F:Mina.Filter.Codec.TextLine.LineDelimiter.Auto"/> for decoding delimiter.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineCodecFactory.#ctor(System.Text.Encoding)">
            <summary>
            Instantiates with given encoding,
            <see cref="F:Mina.Filter.Codec.TextLine.LineDelimiter.Unix"/> for encoding delimiter, and
            <see cref="F:Mina.Filter.Codec.TextLine.LineDelimiter.Auto"/> for decoding delimiter.
            </summary>
            <param name="encoding">the <see cref="T:System.Text.Encoding"/></param>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineCodecFactory.#ctor(System.Text.Encoding,System.String,System.String)">
            <summary>
            Instantiates.
            </summary>
            <param name="encoding">the <see cref="T:System.Text.Encoding"/></param>
            <param name="encodingDelimiter">the encoding delimiter string</param>
            <param name="decodingDelimiter">the decoding delimiter string</param>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineCodecFactory.#ctor(System.Text.Encoding,Mina.Filter.Codec.TextLine.LineDelimiter,Mina.Filter.Codec.TextLine.LineDelimiter)">
            <summary>
            Instantiates.
            </summary>
            <param name="encoding">the <see cref="T:System.Text.Encoding"/></param>
            <param name="encodingDelimiter">the encoding <see cref="T:Mina.Filter.Codec.TextLine.LineDelimiter"/></param>
            <param name="decodingDelimiter">the decoding <see cref="T:Mina.Filter.Codec.TextLine.LineDelimiter"/></param>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineCodecFactory.GetEncoder(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineCodecFactory.GetDecoder(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Filter.Codec.TextLine.TextLineCodecFactory.EncoderMaxLineLength">
            <summary>
            Gets or sets the allowed maximum size of the encoded line.
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.TextLine.TextLineCodecFactory.DecoderMaxLineLength">
            <summary>
            Gets or sets the allowed maximum size of the line to be decoded.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.TextLine.TextLineDecoder">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolDecoder"/> which decodes a text line into a string.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineDecoder.#ctor">
            <summary>
            Instantiates with default <see cref="P:System.Text.Encoding.Default"/> and <see cref="F:Mina.Filter.Codec.TextLine.LineDelimiter.Auto"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineDecoder.#ctor(System.String)">
            <summary>
            Instantiates with default <see cref="P:System.Text.Encoding.Default"/> and given delimiter.
            </summary>
            <param name="delimiter">the delimiter string</param>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineDecoder.#ctor(Mina.Filter.Codec.TextLine.LineDelimiter)">
            <summary>
            Instantiates with default <see cref="P:System.Text.Encoding.Default"/> and given delimiter.
            </summary>
            <param name="delimiter">the <see cref="T:Mina.Filter.Codec.TextLine.LineDelimiter"/></param>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineDecoder.#ctor(System.Text.Encoding)">
            <summary>
            Instantiates with given encoding,
            and default <see cref="F:Mina.Filter.Codec.TextLine.LineDelimiter.Auto"/>.
            </summary>
            <param name="encoding">the <see cref="T:System.Text.Encoding"/></param>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineDecoder.#ctor(System.Text.Encoding,System.String)">
            <summary>
            Instantiates.
            </summary>
            <param name="encoding">the <see cref="T:System.Text.Encoding"/></param>
            <param name="delimiter">the delimiter string</param>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineDecoder.#ctor(System.Text.Encoding,Mina.Filter.Codec.TextLine.LineDelimiter)">
            <summary>
            Instantiates.
            </summary>
            <param name="encoding">the <see cref="T:System.Text.Encoding"/></param>
            <param name="delimiter">the <see cref="T:Mina.Filter.Codec.TextLine.LineDelimiter"/></param>
        </member>
        <member name="P:Mina.Filter.Codec.TextLine.TextLineDecoder.MaxLineLength">
            <summary>
            Gets or sets the max length allowed for a line.
            </summary>
        </member>
        <member name="P:Mina.Filter.Codec.TextLine.TextLineDecoder.BufferLength">
            <summary>
            Gets or sets the lenght of inner buffer.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineDecoder.Decode(Mina.Core.Session.IoSession,Mina.Core.Buffer.IoBuffer,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineDecoder.FinishDecode(Mina.Core.Session.IoSession,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineDecoder.Dispose(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineDecoder.WriteText(Mina.Core.Session.IoSession,System.String,Mina.Filter.Codec.IProtocolDecoderOutput)">
            <summary>
            By default, this method propagates the decoded line of text to <see cref="T:Mina.Filter.Codec.IProtocolDecoderOutput"/>.
            You may override this method to modify the default behavior.
            </summary>
        </member>
        <member name="T:Mina.Filter.Codec.TextLine.TextLineEncoder">
            <summary>
            A <see cref="T:Mina.Filter.Codec.IProtocolEncoder"/> which encodes a string into a text line
            which ends with the delimiter.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineEncoder.#ctor">
            <summary>
            Instantiates with default <see cref="P:System.Text.Encoding.Default"/> and <see cref="F:Mina.Filter.Codec.TextLine.LineDelimiter.Unix"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineEncoder.#ctor(System.String)">
            <summary>
            Instantiates with default <see cref="P:System.Text.Encoding.Default"/> and given delimiter.
            </summary>
            <param name="delimiter">the delimiter string</param>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineEncoder.#ctor(Mina.Filter.Codec.TextLine.LineDelimiter)">
            <summary>
            Instantiates with default <see cref="P:System.Text.Encoding.Default"/> and given delimiter.
            </summary>
            <param name="delimiter">the <see cref="T:Mina.Filter.Codec.TextLine.LineDelimiter"/></param>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineEncoder.#ctor(System.Text.Encoding)">
            <summary>
            Instantiates with given encoding,
            and default <see cref="F:Mina.Filter.Codec.TextLine.LineDelimiter.Unix"/>.
            </summary>
            <param name="encoding">the <see cref="T:System.Text.Encoding"/></param>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineEncoder.#ctor(System.Text.Encoding,System.String)">
            <summary>
            Instantiates.
            </summary>
            <param name="encoding">the <see cref="T:System.Text.Encoding"/></param>
            <param name="delimiter">the delimiter string</param>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineEncoder.#ctor(System.Text.Encoding,Mina.Filter.Codec.TextLine.LineDelimiter)">
            <summary>
            Instantiates.
            </summary>
            <param name="encoding">the <see cref="T:System.Text.Encoding"/></param>
            <param name="delimiter">the <see cref="T:Mina.Filter.Codec.TextLine.LineDelimiter"/></param>
        </member>
        <member name="P:Mina.Filter.Codec.TextLine.TextLineEncoder.MaxLineLength">
            <summary>
            Gets or sets the allowed maximum size of the encoded line.
            </summary>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineEncoder.Encode(Mina.Core.Session.IoSession,System.Object,Mina.Filter.Codec.IProtocolEncoderOutput)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Codec.TextLine.TextLineEncoder.Dispose(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.ErrorGenerating.ErrorGeneratingFilter">
            <summary>
            An <see cref="T:Mina.Core.Filterchain.IoFilter"/> implementation generating random bytes and PDU modification in
            your communication streams.
            
            It's quite simple to use:
            <code>ErrorGeneratingFilter egf = new ErrorGeneratingFilter();</code>
            For activate the change of some bytes in your <see cref="T:Mina.Core.Buffer.IoBuffer"/>, for a probability of 200 out
            of 1000 processed:
            <code>egf.ChangeByteProbability = 200;</code>
            For activate the insertion of some bytes in your <see cref="T:Mina.Core.Buffer.IoBuffer"/>, for a
            probability of 200 out of 1000:
            <code>egf.InsertByteProbability = 200;</code>
            And for the removing of some bytes :
            <code>egf.RemoveByteProbability = 200;</code>
            You can activate the error generation for write or read with the
            following methods :
            <code>egf.ManipulateReads = true;
            egf.ManipulateWrites = true;</code>
            </summary>
        </member>
        <member name="M:Mina.Filter.ErrorGenerating.ErrorGeneratingFilter.FilterWrite(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.ErrorGenerating.ErrorGeneratingFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Executor.ExecutorFilter">
            <summary>
            A filter that forwards I/O events to <see cref="T:Mina.Filter.Executor.IoEventExecutor"/> to enforce a certain
            thread model while allowing the events per session to be processed
            simultaneously. You can apply various thread model by inserting this filter
            to a <see cref="T:Mina.Core.Filterchain.IoFilterChain"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.#ctor">
            <summary>
            Creates an executor filter with default <see cref="T:Mina.Filter.Executor.IoEventExecutor"/> on default event types.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.#ctor(Mina.Core.Session.IoEventType)">
            <summary>
            Creates an executor filter with default <see cref="T:Mina.Filter.Executor.IoEventExecutor"/>.
            </summary>
            <param name="eventTypes">the event types interested</param>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.#ctor(Mina.Filter.Executor.IoEventExecutor)">
            <summary>
            Creates an executor filter on default event types.
            </summary>
            <param name="executor">the <see cref="T:Mina.Filter.Executor.IoEventExecutor"/> to run events</param>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.#ctor(Mina.Filter.Executor.IoEventExecutor,Mina.Core.Session.IoEventType)">
            <summary>
            Creates an executor filter.
            </summary>
            <param name="executor">the <see cref="T:Mina.Filter.Executor.IoEventExecutor"/> to run events</param>
            <param name="eventTypes">the event types interested</param>
        </member>
        <member name="P:Mina.Filter.Executor.ExecutorFilter.Executor">
            <summary>
            Gets the <see cref="T:Mina.Filter.Executor.IoEventExecutor"/> to run events.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.OnPreAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.SessionOpened(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.SessionClosed(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.SessionIdle(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.ExceptionCaught(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.MessageSent(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.FilterWrite(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.FilterClose(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Executor.ExecutorFilter.FireEvent(Mina.Core.Filterchain.IoFilterEvent)">
            <summary>
            Fires an event.
            </summary>
            <param name="ioe"></param>
        </member>
        <member name="T:Mina.Filter.Executor.IExecutor">
            <summary>
            Provides methods to execute submitted tasks.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.IExecutor.Execute(System.Action)">
            <summary>
            Executes a task.
            </summary>
            <param name="task">the task to run</param>
        </member>
        <member name="T:Mina.Filter.Executor.IoEventExecutor">
            <summary>
            Provides methods to execute submitted <see cref="T:Mina.Core.Session.IoEvent"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.IoEventExecutor.Execute(Mina.Core.Session.IoEvent)">
            <summary>
            Executes an event.
            </summary>
            <param name="ioe">the event to run</param>
        </member>
        <member name="T:Mina.Filter.Executor.IoEventQueueHandler">
            <summary>
            Listens and filters all event queue operations occurring in
            <see cref="T:Mina.Filter.Executor.OrderedThreadPoolExecutor"/> and <see cref="T:Mina.Filter.Executor.UnorderedThreadPoolExecutor"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.IoEventQueueHandler.Accept(System.Object,Mina.Core.Session.IoEvent)">
            <summary>
            Returns <tt>true</tt> if and only if the specified <tt>event</tt> is
            allowed to be offered to the event queue.  The <tt>event</tt> is dropped
            if <tt>false</tt> is returned.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.IoEventQueueHandler.Offered(System.Object,Mina.Core.Session.IoEvent)">
            <summary>
            Invoked after the specified <paramref name="ioe"/> has been offered to the event queue.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.IoEventQueueHandler.Polled(System.Object,Mina.Core.Session.IoEvent)">
            <summary>
            Invoked after the specified <paramref name="ioe"/> has been polled to the event queue.
            </summary>
        </member>
        <member name="T:Mina.Filter.Executor.IoEventQueueThrottle">
            <summary>
            Throttles incoming or outgoing events.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.IoEventQueueThrottle.Accept(System.Object,Mina.Core.Session.IoEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Executor.IoEventQueueThrottle.Offered(System.Object,Mina.Core.Session.IoEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Executor.IoEventQueueThrottle.Polled(System.Object,Mina.Core.Session.IoEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Executor.IoEventSizeEstimator">
            <summary>
            Estimates the amount of memory that the specified <see cref="T:Mina.Core.Session.IoEvent"/> occupies.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.IoEventSizeEstimator.EstimateSize(Mina.Core.Session.IoEvent)">
            <summary>
            Estimate the IoEvent size in number of bytes.
            </summary>
            <param name="ioe">the event we want to estimate the size of</param>
            <returns>the estimated size of this event</returns>
        </member>
        <member name="T:Mina.Filter.Executor.OrderedThreadPoolExecutor">
            <summary>
            A <see cref="T:Mina.Filter.Executor.IoEventExecutor"/> that maintains the order of <see cref="T:Mina.Core.Session.IoEvent"/>s.
            If you don't need to maintain the order of events per session, please use
            <see cref="T:Mina.Filter.Executor.UnorderedThreadPoolExecutor"/>.
            </summary>
        </member>
        <member name="F:Mina.Filter.Executor.OrderedThreadPoolExecutor.TASKS_QUEUE">
            <summary>
            A key stored into the session's attribute for the event tasks being queued
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.OrderedThreadPoolExecutor.#ctor">
            <summary>
            Instantiates with a <see cref="T:Mina.Filter.Executor.NoopIoEventQueueHandler"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.OrderedThreadPoolExecutor.#ctor(Mina.Filter.Executor.IoEventQueueHandler)">
            <summary>
            Instantiates with the given <see cref="T:Mina.Filter.Executor.IoEventQueueHandler"/>.
            </summary>
            <param name="queueHandler">the handler</param>
        </member>
        <member name="P:Mina.Filter.Executor.OrderedThreadPoolExecutor.QueueHandler">
            <summary>
            Gets the <see cref="T:Mina.Filter.Executor.IoEventQueueHandler"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.OrderedThreadPoolExecutor.Execute(Mina.Core.Session.IoEvent)">
            <inheritdoc/>
        </member>
        <member name="F:Mina.Filter.Executor.OrderedThreadPoolExecutor.SessionTasksQueue.tasksQueue">
            <summary>
            A queue of ordered event waiting to be processed
            </summary>
        </member>
        <member name="F:Mina.Filter.Executor.OrderedThreadPoolExecutor.SessionTasksQueue.processingCompleted">
            <summary>
            The current task state
            </summary>
        </member>
        <member name="T:Mina.Filter.Executor.ThreadPoolExecutor">
            <summary>
            Executes submitted tasks in a thread pool.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.ThreadPoolExecutor.Execute(System.Action)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Executor.UnorderedThreadPoolExecutor">
            <summary>
            A <see cref="T:Mina.Filter.Executor.IoEventExecutor"/> that does not maintain the order of <see cref="T:Mina.Core.Session.IoEvent"/>s.
            This means more than one event handler methods can be invoked at the same time with mixed order.
            If you need to maintain the order of events per session, please use
            <see cref="T:Mina.Filter.Executor.OrderedThreadPoolExecutor"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.UnorderedThreadPoolExecutor.#ctor">
            <summary>
            Instantiates with a <see cref="T:Mina.Filter.Executor.NoopIoEventQueueHandler"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.UnorderedThreadPoolExecutor.#ctor(Mina.Filter.Executor.IoEventQueueHandler)">
            <summary>
            Instantiates with the given <see cref="T:Mina.Filter.Executor.IoEventQueueHandler"/>.
            </summary>
            <param name="queueHandler">the handler</param>
        </member>
        <member name="P:Mina.Filter.Executor.UnorderedThreadPoolExecutor.QueueHandler">
            <summary>
            Gets the <see cref="T:Mina.Filter.Executor.IoEventQueueHandler"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.UnorderedThreadPoolExecutor.Execute(Mina.Core.Session.IoEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Executor.WriteRequestFilter">
            <summary>
            Attaches an <see cref="T:Mina.Filter.Executor.IoEventQueueHandler"/> to an <see cref="T:Mina.Core.Session.IoSession"/>'s
            <see cref="T:Mina.Core.Write.IWriteRequest"/> queue to provide accurate write queue status tracking.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.WriteRequestFilter.#ctor">
            <summary>
            Instantiates with an <see cref="T:Mina.Filter.Executor.IoEventQueueThrottle"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.WriteRequestFilter.#ctor(Mina.Filter.Executor.IoEventQueueHandler)">
            <summary>
            Instantiates with the given <see cref="T:Mina.Filter.Executor.IoEventQueueHandler"/>.
            </summary>
            <param name="queueHandler">the handler</param>
        </member>
        <member name="P:Mina.Filter.Executor.WriteRequestFilter.QueueHandler">
            <summary>
            Gets the <see cref="T:Mina.Filter.Executor.IoEventQueueHandler"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Executor.WriteRequestFilter.FilterWrite(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Firewall.BlacklistFilter">
            <summary>
            A {@link IoFilter} which blocks connections from blacklisted remote address.
            </summary>
        </member>
        <member name="M:Mina.Filter.Firewall.BlacklistFilter.SessionCreated(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Firewall.BlacklistFilter.SessionOpened(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Firewall.BlacklistFilter.SessionClosed(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Firewall.BlacklistFilter.SessionIdle(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Firewall.BlacklistFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Firewall.BlacklistFilter.MessageSent(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Firewall.BlacklistFilter.SetBlacklist(System.Collections.Generic.IEnumerable{System.Net.IPAddress})">
            <summary>
            Sets the addresses to be blacklisted.
            </summary>
        </member>
        <member name="M:Mina.Filter.Firewall.BlacklistFilter.SetSubnetBlacklist(Mina.Filter.Firewall.Subnet[])">
            <summary>
            Sets the subnets to be blacklisted.
            </summary>
        </member>
        <member name="M:Mina.Filter.Firewall.BlacklistFilter.Block(System.Net.IPAddress)">
            <summary>
            Blocks the specified endpoint.
            </summary>
        </member>
        <member name="M:Mina.Filter.Firewall.BlacklistFilter.Block(Mina.Filter.Firewall.Subnet)">
            <summary>
            Blocks the specified subnet.
            </summary>
        </member>
        <member name="M:Mina.Filter.Firewall.BlacklistFilter.Unblock(System.Net.IPAddress)">
            <summary>
            Unblocks the specified endpoint.
            </summary>
        </member>
        <member name="M:Mina.Filter.Firewall.BlacklistFilter.Unblock(Mina.Filter.Firewall.Subnet)">
            <summary>
            Unblocks the specified subnet.
            </summary>
        </member>
        <member name="T:Mina.Filter.Firewall.ConnectionThrottleFilter">
            <summary>
            A <see cref="T:Mina.Core.Filterchain.IoFilter"/> which blocks connections from connecting
            at a rate faster than the specified interval.
            </summary>
        </member>
        <member name="M:Mina.Filter.Firewall.ConnectionThrottleFilter.#ctor">
            <summary>
            Default constructor.  Sets the wait time to 1 second
            </summary>
        </member>
        <member name="M:Mina.Filter.Firewall.ConnectionThrottleFilter.#ctor(System.Int64)">
            <summary>
            Constructor that takes in a specified wait time.
            </summary>
            <param name="allowedInterval">The number of milliseconds a client is allowed to wait before making another successful connection</param>
        </member>
        <member name="P:Mina.Filter.Firewall.ConnectionThrottleFilter.AllowedInterval">
            <summary>
            Gets or sets the minimal interval (ms) between connections from a client.
            </summary>
        </member>
        <member name="M:Mina.Filter.Firewall.ConnectionThrottleFilter.SessionCreated(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Firewall.ConnectionThrottleFilter.IsConnectionOk(Mina.Core.Session.IoSession)">
            <summary>
            Method responsible for deciding if a connection is OK to continue.
            </summary>
            <param name="session">the new session that will be verified</param>
            <returns>true if the session meets the criteria, otherwise false</returns>
        </member>
        <member name="T:Mina.Filter.Firewall.Subnet">
            <summary>
            A IP subnet using the CIDR notation. Currently, only IPv4 address are supported.
            </summary>
        </member>
        <member name="F:Mina.Filter.Firewall.Subnet._subnetInt">
            <summary>
            An int representation of a subnet for IPV4 addresses.
            </summary>
        </member>
        <member name="F:Mina.Filter.Firewall.Subnet._subnetLong">
            <summary>
            An long representation of a subnet for IPV6 addresses.
            </summary>
        </member>
        <member name="M:Mina.Filter.Firewall.Subnet.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a subnet from CIDR notation.
            For example, the subnet 192.168.0.0/24 would be created using the
            <see cref="T:System.Net.IPAddress"/> 192.168.0.0 and the mask 24.
            </summary>
            <param name="subnet">the <see cref="T:System.Net.IPAddress"/> of the subnet</param>
            <param name="mask">the mask</param>
        </member>
        <member name="M:Mina.Filter.Firewall.Subnet.InSubnet(System.Net.IPAddress)">
            <summary>
            Checks if the <see cref="T:System.Net.IPAddress"/> is within this subnet.
            </summary>
            <param name="address">the <see cref="T:System.Net.IPAddress"/> to check</param>
            <returns>true if the address is within this subnet, otherwise false</returns>
        </member>
        <member name="M:Mina.Filter.Firewall.Subnet.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Firewall.Subnet.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Firewall.Subnet.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.KeepAlive.IKeepAliveMessageFactory">
            <summary>
            Provides keep-alive messages to <see cref="T:Mina.Filter.KeepAlive.KeepAliveFilter"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.KeepAlive.IKeepAliveMessageFactory.IsRequest(Mina.Core.Session.IoSession,System.Object)">
            <summary>
            Returns <tt>true</tt> if and only if the specified message is a
            keep-alive request message.
            </summary>
        </member>
        <member name="M:Mina.Filter.KeepAlive.IKeepAliveMessageFactory.IsResponse(Mina.Core.Session.IoSession,System.Object)">
            <summary>
            Returns <tt>true</tt> if and only if the specified message is a 
            keep-alive response message;
            </summary>
        </member>
        <member name="M:Mina.Filter.KeepAlive.IKeepAliveMessageFactory.GetRequest(Mina.Core.Session.IoSession)">
            <summary>
            Returns a (new) keep-alive request message.
            Returns <tt>null</tt> if no request is required.
            </summary>
        </member>
        <member name="M:Mina.Filter.KeepAlive.IKeepAliveMessageFactory.GetResponse(Mina.Core.Session.IoSession,System.Object)">
            <summary>
            Returns a (new) response message for the specified keep-alive request.
            Returns <tt>null</tt> if no response is required.
            </summary>
        </member>
        <member name="T:Mina.Filter.KeepAlive.IKeepAliveRequestTimeoutHandler">
            <summary>
            Tells <see cref="T:Mina.Filter.KeepAlive.KeepAliveFilter"/> what to do when a keep-alive response message
            was not received within a certain timeout.
            </summary>
        </member>
        <member name="M:Mina.Filter.KeepAlive.IKeepAliveRequestTimeoutHandler.KeepAliveRequestTimedOut(Mina.Filter.KeepAlive.KeepAliveFilter,Mina.Core.Session.IoSession)">
            <summary>
            Invoked when <see cref="T:Mina.Filter.KeepAlive.KeepAliveFilter"/> couldn't receive the response for
            the sent keep alive message.
            </summary>
        </member>
        <member name="T:Mina.Filter.KeepAlive.KeepAliveFilter">
            <summary>
            An <see cref="T:Mina.Core.Filterchain.IoFilter"/> that sends a keep-alive request on <see cref="F:Mina.Core.Session.IoEventType.SessionIdle"/>
            and sends back the response for the sent keep-alive request. 
            </summary>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveFilter.#ctor(Mina.Filter.KeepAlive.IKeepAliveMessageFactory)">
            <summary>
            Creates a new instance with the default properties.
            <ul>
              <li>interestedIdleStatus - <see cref="F:Mina.Core.Session.IdleStatus.ReaderIdle"/></li>
              <li>strategy - <see cref="P:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutHandler.Close"/></li>
              <li>keepAliveRequestInterval - 60 (seconds)</li>
              <li>keepAliveRequestTimeout - 30 (seconds)</li>
            </ul>
            </summary>
            <param name="messageFactory">the factory to generate keep-alive messages</param>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveFilter.#ctor(Mina.Filter.KeepAlive.IKeepAliveMessageFactory,Mina.Core.Session.IdleStatus)">
            <summary>
            Creates a new instance with the default properties.
            <ul>
              <li>strategy - <see cref="P:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutHandler.Close"/></li>
              <li>keepAliveRequestInterval - 60 (seconds)</li>
              <li>keepAliveRequestTimeout - 30 (seconds)</li>
            </ul>
            </summary>
            <param name="messageFactory">the factory to generate keep-alive messages</param>
            <param name="interestedIdleStatus"></param>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveFilter.#ctor(Mina.Filter.KeepAlive.IKeepAliveMessageFactory,Mina.Filter.KeepAlive.IKeepAliveRequestTimeoutHandler)">
            <summary>
            Creates a new instance with the default properties.
            <ul>
              <li>interestedIdleStatus - <see cref="F:Mina.Core.Session.IdleStatus.ReaderIdle"/></li>
              <li>keepAliveRequestInterval - 60 (seconds)</li>
              <li>keepAliveRequestTimeout - 30 (seconds)</li>
            </ul>
            </summary>
            <param name="messageFactory">the factory to generate keep-alive messages</param>
            <param name="strategy"></param>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveFilter.#ctor(Mina.Filter.KeepAlive.IKeepAliveMessageFactory,Mina.Core.Session.IdleStatus,Mina.Filter.KeepAlive.IKeepAliveRequestTimeoutHandler)">
            <summary>
            Creates a new instance with the default properties.
            <ul>
              <li>keepAliveRequestInterval - 60 (seconds)</li>
              <li>keepAliveRequestTimeout - 30 (seconds)</li>
            </ul>
            </summary>
            <param name="messageFactory">the factory to generate keep-alive messages</param>
            <param name="interestedIdleStatus"></param>
            <param name="strategy"></param>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveFilter.#ctor(Mina.Filter.KeepAlive.IKeepAliveMessageFactory,Mina.Core.Session.IdleStatus,Mina.Filter.KeepAlive.IKeepAliveRequestTimeoutHandler,System.Int32,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="messageFactory">the factory to generate keep-alive messages</param>
            <param name="interestedIdleStatus"></param>
            <param name="strategy"></param>
            <param name="keepAliveRequestInterval">the interval to send a keep-alive request</param>
            <param name="keepAliveRequestTimeout">the time to wait for a keep-alive response before timed out</param>
        </member>
        <member name="P:Mina.Filter.KeepAlive.KeepAliveFilter.RequestInterval">
            <summary>
            Gets or sets the interval to send a keep-alive request.
            </summary>
        </member>
        <member name="P:Mina.Filter.KeepAlive.KeepAliveFilter.RequestTimeout">
            <summary>
            Gets or sets the time to wait for a keep-alive response before timed out.
            </summary>
        </member>
        <member name="P:Mina.Filter.KeepAlive.KeepAliveFilter.ForwardEvent">
            <summary>
            Gets or sets a value indicating whether this filter forwards
            an <see cref="F:Mina.Core.Session.IoEventType.SessionIdle"/> event to the next filter.
            The default value is <code>false</code>.
            </summary>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveFilter.OnPreAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveFilter.OnPostAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveFilter.OnPostRemove(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveFilter.MessageSent(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveFilter.SessionIdle(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutException">
            <summary>
            An exception which is thrown when a keep-alive response
            message was not received within a certain timeout.
            </summary>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutException.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutException.#ctor(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
        </member>
        <member name="T:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutHandler">
            <summary>
            Tells <see cref="T:Mina.Filter.KeepAlive.KeepAliveFilter"/> what to do when a keep-alive response message
            was not received within a certain timeout.
            </summary>
        </member>
        <member name="P:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutHandler.Noop">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="P:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutHandler.Log">
            <summary>
            Logs a warning message, but doesn't do anything else.
            </summary>
        </member>
        <member name="P:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutHandler.Exception">
            <summary>
            Throws a <see cref="T:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutException"/>.
            </summary>
        </member>
        <member name="P:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutHandler.Close">
            <summary>
            Closes the connection after logging.
            </summary>
        </member>
        <member name="P:Mina.Filter.KeepAlive.KeepAliveRequestTimeoutHandler.DeafSpeaker">
            <summary>
            A special handler for the 'deaf speaker' mode.
            </summary>
        </member>
        <member name="T:Mina.Filter.Logging.LoggingFilter">
            <summary>
            Logs all MINA protocol events.
            </summary>
        </member>
        <member name="M:Mina.Filter.Logging.LoggingFilter.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Mina.Filter.Logging.LoggingFilter.#ctor(System.Type)">
            <summary>
            Create a new LoggingFilter using a class name
            </summary>
            <param name="type">the cass which name will be used to create the logger</param>
        </member>
        <member name="M:Mina.Filter.Logging.LoggingFilter.#ctor(System.String)">
            <summary>
            Create a new LoggingFilter using a name
            </summary>
            <param name="name">the name used to create the logger. If null, will default to "LoggingFilter"</param>
        </member>
        <member name="P:Mina.Filter.Logging.LoggingFilter.Name">
            <summary>
            Gets the logger's name
            </summary>
        </member>
        <member name="P:Mina.Filter.Logging.LoggingFilter.ExceptionCaughtLevel">
            <summary>
            Gets or sets the LogLevel for the ExceptionCaught event.
            </summary>
        </member>
        <member name="P:Mina.Filter.Logging.LoggingFilter.MessageReceivedLevel">
            <summary>
            Gets or sets the LogLevel for the MessageReceived event.
            </summary>
        </member>
        <member name="P:Mina.Filter.Logging.LoggingFilter.MessageSentLevel">
            <summary>
            Get the LogLevel for the MessageSent event.
            </summary>
        </member>
        <member name="P:Mina.Filter.Logging.LoggingFilter.SessionCreatedLevel">
            <summary>
            Get the LogLevel for the SessionCreated event.
            </summary>
        </member>
        <member name="P:Mina.Filter.Logging.LoggingFilter.SessionOpenedLevel">
            <summary>
            Get the LogLevel for the SessionOpened event.
            </summary>
        </member>
        <member name="P:Mina.Filter.Logging.LoggingFilter.SessionIdleLevel">
            <summary>
            Get the LogLevel for the SessionIdle event.
            </summary>
        </member>
        <member name="P:Mina.Filter.Logging.LoggingFilter.SessionClosedLevel">
            <summary>
            Get the LogLevel for the SessionClosed event.
            </summary>
        </member>
        <member name="M:Mina.Filter.Logging.LoggingFilter.ExceptionCaught(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Logging.LoggingFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Logging.LoggingFilter.MessageSent(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Logging.LoggingFilter.SessionCreated(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Logging.LoggingFilter.SessionOpened(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Logging.LoggingFilter.SessionIdle(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Logging.LoggingFilter.SessionClosed(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Logging.LogLevel">
            <summary>
            Defines a logging level.
            </summary>
        </member>
        <member name="F:Mina.Filter.Logging.LogLevel.None">
            <summary>
            Not log any information
            </summary>
        </member>
        <member name="F:Mina.Filter.Logging.LogLevel.Error">
            <summary>
            Logs messages on the ERROR level.
            </summary>
        </member>
        <member name="F:Mina.Filter.Logging.LogLevel.Warn">
            <summary>
            Logs messages on the WARN level.
            </summary>
        </member>
        <member name="F:Mina.Filter.Logging.LogLevel.Info">
            <summary>
            Logs messages on the INFO level.
            </summary>
        </member>
        <member name="F:Mina.Filter.Logging.LogLevel.Debug">
            <summary>
            Logs messages on the DEBUG level.
            </summary>
        </member>
        <member name="F:Mina.Filter.Logging.LogLevel.Trace">
            <summary>
            Logs messages on the TRACE level.
            </summary>
        </member>
        <member name="T:Mina.Filter.Ssl.SslFilter">
            <summary>
            An SSL filter that encrypts and decrypts the data exchanged in the session.
            Adding this filter triggers SSL handshake procedure immediately.
            </summary>
        </member>
        <member name="M:Mina.Filter.Ssl.SslFilter.#ctor(System.String)">
            <summary>
            Creates a new SSL filter using the specified PKCS7 signed file.
            </summary>
            <param name="certFile">the path of the PKCS7 signed file from which to create the X.509 certificate</param>
        </member>
        <member name="M:Mina.Filter.Ssl.SslFilter.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Creates a new SSL filter using the specified certificate.
            </summary>
            <param name="cert">the <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> to use</param>
        </member>
        <member name="M:Mina.Filter.Ssl.SslFilter.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
            <summary>
            Creates a new SSL filter to a server.
            </summary>
            <param name="targetHost">the name of the server that shares this SSL connection</param>
            <param name="clientCertificates">the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> containing client certificates</param>
        </member>
        <member name="P:Mina.Filter.Ssl.SslFilter.SslProtocol">
            <summary>
            Gets or sets the protocol used for authentication.
            </summary>
        </member>
        <member name="P:Mina.Filter.Ssl.SslFilter.Certificate">
            <summary>
            Gets the X.509 certificate.
            </summary>
        </member>
        <member name="P:Mina.Filter.Ssl.SslFilter.ClientCertificateRequired">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that specifies
            whether the client must supply a certificate.
            The default value is <code>false</code>.
            </summary>
        </member>
        <member name="P:Mina.Filter.Ssl.SslFilter.CheckCertificateRevocation">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that specifies
            whether the certificate revocation list is checked during authentication.
            The default value is <code>true</code> in server mode,
            <code>false</code> in client mode.
            </summary>
        </member>
        <member name="P:Mina.Filter.Ssl.SslFilter.UseClientMode">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that specifies
            whether to use client (or server) mode when handshaking.
            The default value is <code>false</code> (server mode).
            </summary>
        </member>
        <member name="P:Mina.Filter.Ssl.SslFilter.TargetHost">
            <summary>
            Gets or sets the name of the server that shares this SSL connection.
            </summary>
        </member>
        <member name="P:Mina.Filter.Ssl.SslFilter.ClientCertificates">
            <summary>
            Gets or sets the <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> containing client certificates
            </summary>
        </member>
        <member name="M:Mina.Filter.Ssl.SslFilter.IsSslStarted(Mina.Core.Session.IoSession)">
            <summary>
            Returns <code>true</code> if and only if the specified session is
            encrypted/decrypted over SSL/TLS currently.
            </summary>
        </member>
        <member name="M:Mina.Filter.Ssl.SslFilter.OnPreAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Ssl.SslFilter.OnPostAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Ssl.SslFilter.OnPreRemove(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Ssl.SslFilter.SessionClosed(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Ssl.SslFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Ssl.SslFilter.MessageSent(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Ssl.SslFilter.ExceptionCaught(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Ssl.SslFilter.FilterWrite(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Ssl.SslFilter.FilterClose(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Statistic.ProfilerTimerFilter">
            <summary>
            This class will measure the time it takes for a
            method in the <see cref="T:Mina.Core.Filterchain.IoFilter"/> class to execute.
            </summary>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.#ctor">
            <summary>
            Creates a profiler on event <see cref="F:Mina.Core.Session.IoEventType.MessageReceived"/>
            and <see cref="F:Mina.Core.Session.IoEventType.MessageSent"/> in milliseconds.
            </summary>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.#ctor(Mina.Filter.Statistic.TimeUnit)">
            <summary>
            Creates a profiler on event <see cref="F:Mina.Core.Session.IoEventType.MessageReceived"/>
            and <see cref="F:Mina.Core.Session.IoEventType.MessageSent"/>.
            </summary>
            <param name="timeUnit">the time unit being used</param>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.#ctor(Mina.Filter.Statistic.TimeUnit,Mina.Core.Session.IoEventType)">
            <summary>
            Creates a profiler.
            </summary>
            <param name="timeUnit">the time unit being used</param>
            <param name="eventTypes">the event types to profile</param>
        </member>
        <member name="P:Mina.Filter.Statistic.ProfilerTimerFilter.TimeUnit">
            <summary>
            Gets or sets the <see cref="P:Mina.Filter.Statistic.ProfilerTimerFilter.TimeUnit"/> being used.
            </summary>
        </member>
        <member name="P:Mina.Filter.Statistic.ProfilerTimerFilter.EventsToProfile">
            <summary>
            Gets or sets the <see cref="T:Mina.Core.Session.IoEventType"/>s to profile.
            </summary>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.GetAverageTime(Mina.Core.Session.IoEventType)">
            <summary>
            Get the average time for the specified method represented by the <see cref="T:Mina.Core.Session.IoEventType"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.GetTotalCalls(Mina.Core.Session.IoEventType)">
            <summary>
            Gets the total number of times the method has been called that is represented
            by the <see cref="T:Mina.Core.Session.IoEventType"/>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.GetTotalTime(Mina.Core.Session.IoEventType)">
            <summary>
            Gets the total time this method has been executing.
            </summary>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.GetMinimumTime(Mina.Core.Session.IoEventType)">
            <summary>
            Gets minimum time the method represented by <see cref="T:Mina.Core.Session.IoEventType"/> has executed.
            </summary>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.GetMaximumTime(Mina.Core.Session.IoEventType)">
            <summary>
            Gets maximum time the method represented by <see cref="T:Mina.Core.Session.IoEventType"/> has executed.
            </summary>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.MessageSent(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.SessionCreated(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.SessionOpened(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.SessionIdle(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Statistic.ProfilerTimerFilter.SessionClosed(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="F:Mina.Filter.Statistic.ProfilerTimerFilter.TimerWorker.total">
            <summary>
            The sum of all operation durations
            </summary>
        </member>
        <member name="F:Mina.Filter.Statistic.ProfilerTimerFilter.TimerWorker.callsNumber">
            <summary>
            The number of calls
            </summary>
        </member>
        <member name="F:Mina.Filter.Statistic.ProfilerTimerFilter.TimerWorker.minimum">
            <summary>
            The fastest operation
            </summary>
        </member>
        <member name="F:Mina.Filter.Statistic.ProfilerTimerFilter.TimerWorker.maximum">
            <summary>
            The slowest operation
            </summary>
        </member>
        <member name="T:Mina.Filter.Statistic.TimeUnit">
            <summary>
            The unit of time
            </summary>
        </member>
        <member name="F:Mina.Filter.Statistic.TimeUnit.Seconds">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="F:Mina.Filter.Statistic.TimeUnit.Milliseconds">
            <summary>
            Milliseconds
            </summary>
        </member>
        <member name="F:Mina.Filter.Statistic.TimeUnit.Ticks">
            <summary>
            Ticks
            </summary>
        </member>
        <member name="F:Mina.Filter.Stream.AbstractStreamWriteFilter`1.DefaultStreamBufferSize">
            <summary>
            The default buffer size this filter uses for writing.
            </summary>
        </member>
        <member name="P:Mina.Filter.Stream.AbstractStreamWriteFilter`1.WriteBufferSize">
            <summary>
            Gets or sets the size of the write buffer in bytes. Data will be read from the
            stream in chunks of this size and then written to the next filter.
            </summary>
        </member>
        <member name="M:Mina.Filter.Stream.AbstractStreamWriteFilter`1.OnPreAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Stream.AbstractStreamWriteFilter`1.FilterWrite(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Stream.AbstractStreamWriteFilter`1.MessageSent(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Stream.FileRegionWriteFilter">
            <summary>
            Filter that converts a <see cref="T:Mina.Core.File.IFileRegion"/> to <see cref="T:Mina.Core.Buffer.IoBuffer"/>
            objects and writes those buffers to the next filter.
            </summary>
            <remarks>
            Normall FileInfo objects should be handled by the <see cref="T:Mina.Core.Service.IoProcessor"/>
            but this is not always possible if a filter is being used that needs to
            modify the contents of the file before sending over the network (i.e. the
            <see cref="T:Mina.Filter.Ssl.SslFilter"/> or a data compression filter.)
            </remarks>
        </member>
        <member name="M:Mina.Filter.Stream.FileRegionWriteFilter.GetNextBuffer(Mina.Core.File.IFileRegion)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Stream.StreamWriteFilter">
            <summary>
            Filter implementation which makes it possible to write <see cref="T:System.IO.Stream"/>
            objects directly using <see cref="M:Mina.Core.Session.IoSession.Write(System.Object)"/>.
            <remarks>
            When an <see cref="T:System.IO.Stream"/> is written to a session this filter will read the bytes
            from the stream into <see cref="T:Mina.Core.Buffer.IoBuffer"/> objects and write those buffers
            to the next filter.
            <para>
            This filter will ignore written messages which aren't <see cref="T:System.IO.Stream"/>
            instances. Such messages will be passed to the next filter directly.
            </para>
            <para>
            NOTE: this filter does not close the stream after all data from stream has been written.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="M:Mina.Filter.Stream.StreamWriteFilter.GetNextBuffer(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Util.CommonEventFilter">
            <summary>
            Extend this class when you want to create a filter that
            wraps the same logic around all 9 IoEvents
            </summary>
        </member>
        <member name="M:Mina.Filter.Util.CommonEventFilter.SessionCreated(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.CommonEventFilter.SessionOpened(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.CommonEventFilter.SessionIdle(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.CommonEventFilter.SessionClosed(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.CommonEventFilter.ExceptionCaught(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.CommonEventFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.CommonEventFilter.MessageSent(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.CommonEventFilter.FilterWrite(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.CommonEventFilter.FilterClose(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.CommonEventFilter.Filter(Mina.Core.Filterchain.IoFilterEvent)">
            <summary>
            Filters an <see cref="T:Mina.Core.Filterchain.IoFilterEvent"/>.
            </summary>
            <param name="ioe">the event</param>
        </member>
        <member name="T:Mina.Filter.Util.NoopFilter">
            <summary>
            A Noop filter. It does nothing, as all the method are already implemented
            in the super class.
            </summary>
        </member>
        <member name="T:Mina.Filter.Util.ReferenceCountingFilter">
            <summary>
            An <see cref="T:Mina.Core.Filterchain.IoFilter"/> wrapper that keeps track of the number of usages of this filter and will call init/destroy
            when the filter is not in use.
            </summary>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.#ctor(Mina.Core.Filterchain.IoFilter)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.Init">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.Destroy">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.OnPreAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.OnPostRemove(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.OnPostAdd(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.OnPreRemove(Mina.Core.Filterchain.IoFilterChain,System.String,Mina.Core.Filterchain.INextFilter)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.SessionCreated(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.SessionOpened(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.SessionClosed(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.SessionIdle(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.ExceptionCaught(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.MessageSent(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.FilterClose(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Filter.Util.ReferenceCountingFilter.FilterWrite(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Filter.Util.SessionAttributeInitializingFilter">
            <summary>
            An <see cref="T:Mina.Core.Filterchain.IoFilter"/> that sets initial attributes when a new
            <see cref="T:Mina.Core.Session.IoSession"/> is created.  By default, the attribute map is empty when
            an <see cref="T:Mina.Core.Session.IoSession"/> is newly created.  Inserting this filter will make
            the pre-configured attributes available after this filter executes the
            <tt>SessionCreated</tt> event.
            </summary>
        </member>
        <member name="M:Mina.Filter.Util.SessionAttributeInitializingFilter.#ctor">
            <summary>
            Creates a new instance with no default attributes.
            </summary>
        </member>
        <member name="M:Mina.Filter.Util.SessionAttributeInitializingFilter.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new instance with the specified default attributes.
            </summary>
        </member>
        <member name="P:Mina.Filter.Util.SessionAttributeInitializingFilter.Attributes">
            <summary>
            Gets or sets the attribute map.
            </summary>
        </member>
        <member name="M:Mina.Filter.Util.SessionAttributeInitializingFilter.GetAttribute(System.String)">
            <summary>
            Returns the value of user-defined attribute.
            </summary>
            <param name="key">the key of the attribute</param>
            <returns><tt>null</tt> if there is no attribute with the specified key</returns>
        </member>
        <member name="M:Mina.Filter.Util.SessionAttributeInitializingFilter.SetAttribute(System.String,System.Object)">
            <summary>
            Sets a user-defined attribute.
            </summary>
            <param name="key">the key of the attribute</param>
            <param name="value">the value of the attribute</param>
            <returns>the old value of the attribute, or <tt>null</tt> if it is new</returns>
        </member>
        <member name="M:Mina.Filter.Util.SessionAttributeInitializingFilter.SetAttribute(System.String)">
            <summary>
            Sets a user defined attribute without a value.
            This is useful when you just want to put a 'mark' attribute.
            </summary>
            <param name="key">the key of the attribute</param>
            <returns>the old value of the attribute, or <tt>null</tt> if it is new</returns>
        </member>
        <member name="M:Mina.Filter.Util.SessionAttributeInitializingFilter.RemoveAttribute(System.String)">
            <summary>
            Removes a user-defined attribute with the specified key.
            </summary>
            <param name="key">the key of the attribute</param>
            <returns>the old value of the attribute, or <tt>null</tt> if not found</returns>
        </member>
        <member name="M:Mina.Filter.Util.SessionAttributeInitializingFilter.ContainsAttribute(System.String)">
            <summary>
            Returns <tt>true</tt> if this session contains the attribute with
            the specified <tt>key</tt>.
            </summary>
        </member>
        <member name="M:Mina.Filter.Util.SessionAttributeInitializingFilter.SessionCreated(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Handler.Chain.ChainedIoHandler">
            <summary>
            An <see cref="T:Mina.Core.Service.IoHandler"/> which executes an <see cref="T:Mina.Handler.Chain.IoHandlerChain"/>
            on a <tt>messageReceived</tt> event.
            </summary>
        </member>
        <member name="M:Mina.Handler.Chain.ChainedIoHandler.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Handler.Chain.ChainedIoHandler.#ctor(Mina.Handler.Chain.IoHandlerChain)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Handler.Chain.ChainedIoHandler.Chain">
            <summary>
            Gets the associated <see cref="T:Mina.Handler.Chain.IoHandlerChain"/>.
            </summary>
        </member>
        <member name="M:Mina.Handler.Chain.ChainedIoHandler.MessageReceived(Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Handler.Chain.INextCommand">
            <summary>
            Represents an indirect reference to the next <see cref="T:Mina.Handler.Chain.IoHandlerCommand"/> of
            the <see cref="T:Mina.Handler.Chain.IoHandlerChain"/>.
            </summary>
        </member>
        <member name="T:Mina.Handler.Chain.IoHandlerChain">
            <summary>
            A chain of <see cref="T:Mina.Handler.Chain.IoHandlerCommand"/>s.
            </summary>
        </member>
        <member name="M:Mina.Handler.Chain.IoHandlerChain.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Handler.Chain.IoHandlerChain.Execute(Mina.Handler.Chain.INextCommand,Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Chain.IoHandlerChain.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Handler.Chain.IoHandlerCommand">
            <summary>
            A <see cref="T:Mina.Handler.Chain.IoHandlerCommand"/> encapsulates a unit of processing work to be
            performed, whose purpose is to examine and/or modify the state of a
            transaction that is represented by custom attributes provided by
            <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
        </member>
        <member name="T:Mina.Handler.Demux.DemuxingIoHandler">
            <summary>
            A <see cref="T:Mina.Core.Service.IoHandler"/> that demuxes <code>MessageReceived</code> events
            to the appropriate <see cref="T:Mina.Handler.Demux.IMessageHandler"/>.
            </summary>
        </member>
        <member name="M:Mina.Handler.Demux.DemuxingIoHandler.AddReceivedMessageHandler``1(Mina.Handler.Demux.IMessageHandler{``0})">
            <summary>
            Registers a <see cref="T:Mina.Handler.Demux.IMessageHandler`1"/> that handles the received messages of
            the specified <typeparamref name="T"/>.
            </summary>
            <returns>the old handler if there is already a registered handler for the specified type</returns>
        </member>
        <member name="M:Mina.Handler.Demux.DemuxingIoHandler.RemoveReceivedMessageHandler``1(Mina.Handler.Demux.IMessageHandler{``0})">
            <summary>
            Deregisters a <see cref="T:Mina.Handler.Demux.IMessageHandler`1"/> that handles the received messages of
            the specified <typeparamref name="T"/>.
            </summary>
            <returns>the removed handler if successfully removed, null otherwise</returns>
        </member>
        <member name="M:Mina.Handler.Demux.DemuxingIoHandler.AddSentMessageHandler``1(Mina.Handler.Demux.IMessageHandler{``0})">
            <summary>
            Registers a <see cref="T:Mina.Handler.Demux.IMessageHandler`1"/> that handles the sent messages of
            the specified <typeparamref name="T"/>.
            </summary>
            <returns>the old handler if there is already a registered handler for the specified type</returns>
        </member>
        <member name="M:Mina.Handler.Demux.DemuxingIoHandler.RemoveSentMessageHandler``1(Mina.Handler.Demux.IMessageHandler{``0})">
            <summary>
            Deregisters a <see cref="T:Mina.Handler.Demux.IMessageHandler`1"/> that handles the sent messages of
            the specified <typeparamref name="T"/>.
            </summary>
            <returns>the removed handler if successfully removed, null otherwise</returns>
        </member>
        <member name="M:Mina.Handler.Demux.DemuxingIoHandler.AddExceptionHandler``1(Mina.Handler.Demux.IExceptionHandler{``0})">
            <summary>
            Registers a <see cref="T:Mina.Handler.Demux.IMessageHandler`1"/> that handles exceptions of
            the specified <typeparamref name="E"/>.
            </summary>
            <returns>the old handler if there is already a registered handler for the specified type</returns>
        </member>
        <member name="M:Mina.Handler.Demux.DemuxingIoHandler.RemoveExceptionHandler``1">
            <summary>
            Deregisters a <see cref="T:Mina.Handler.Demux.IMessageHandler`1"/> that handles exceptions of
            the specified <typeparamref name="E"/>.
            </summary>
            <returns>the removed handler if successfully removed, null otherwise</returns>
        </member>
        <member name="M:Mina.Handler.Demux.DemuxingIoHandler.MessageReceived(Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Demux.DemuxingIoHandler.MessageSent(Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Demux.DemuxingIoHandler.ExceptionCaught(Mina.Core.Session.IoSession,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Handler.Demux.ExceptionHandler`1">
            <summary>
            Default implementation of <see cref="T:Mina.Handler.Demux.IExceptionHandler"/>.
            </summary>
        </member>
        <member name="M:Mina.Handler.Demux.ExceptionHandler`1.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Handler.Demux.ExceptionHandler`1.#ctor(System.Action{Mina.Core.Session.IoSession,`0})">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Handler.Demux.ExceptionHandler`1.ExceptionCaught(Mina.Core.Session.IoSession,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Handler.Demux.IExceptionHandler">
            <summary>
            A handler interface that <see cref="T:Mina.Handler.Demux.DemuxingIoHandler"/> forwards
            <code>ExceptionCaught</code> events to.
            </summary>
        </member>
        <member name="M:Mina.Handler.Demux.IExceptionHandler.ExceptionCaught(Mina.Core.Session.IoSession,System.Exception)">
            <summary>
            Invoked when the specific type of exception is caught from the
            specified <code>session</code>.
            </summary>
        </member>
        <member name="T:Mina.Handler.Demux.IExceptionHandler`1">
            <summary>
            A handler interface that <see cref="T:Mina.Handler.Demux.DemuxingIoHandler"/> forwards
            <code>ExceptionCaught</code> events to.
            </summary>
            <typeparam name="E"></typeparam>
        </member>
        <member name="M:Mina.Handler.Demux.IExceptionHandler`1.ExceptionCaught(Mina.Core.Session.IoSession,`0)">
            <summary>
            Invoked when the specific type of exception is caught from the
            specified <code>session</code>.
            </summary>
        </member>
        <member name="T:Mina.Handler.Demux.IMessageHandler">
            <summary>
            A handler interface that <see cref="T:Mina.Handler.Demux.DemuxingIoHandler"/> forwards
            <tt>MessageReceived</tt> or <tt>MessageSent</tt> events to.
            </summary>
        </member>
        <member name="M:Mina.Handler.Demux.IMessageHandler.HandleMessage(Mina.Core.Session.IoSession,System.Object)">
            <summary>
            Invoked when the specific type of message is received from or sent to
            the specified <code>session</code>.
            </summary>
            <param name="session">the associated <see cref="T:Mina.Core.Session.IoSession"/></param>
            <param name="message">the message to decode</param>
        </member>
        <member name="T:Mina.Handler.Demux.IMessageHandler`1">
            <summary>
            A handler interface that <see cref="T:Mina.Handler.Demux.DemuxingIoHandler"/> forwards
            <tt>MessageReceived</tt> or <tt>MessageSent</tt> events to.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mina.Handler.Demux.IMessageHandler`1.HandleMessage(Mina.Core.Session.IoSession,`0)">
            <summary>
            Invoked when the specific type of message is received from or sent to
            the specified <code>session</code>.
            </summary>
            <param name="session">the associated <see cref="T:Mina.Core.Session.IoSession"/></param>
            <param name="message">the message to decode. Its type is set by the implementation</param>
        </member>
        <member name="T:Mina.Handler.Demux.MessageHandler`1">
            <summary>
            Default implementation of <see cref="T:Mina.Handler.Demux.IMessageHandler"/>.
            </summary>
        </member>
        <member name="M:Mina.Handler.Demux.MessageHandler`1.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Handler.Demux.MessageHandler`1.#ctor(System.Action{Mina.Core.Session.IoSession,`0})">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Handler.Demux.MessageHandler`1.HandleMessage(Mina.Core.Session.IoSession,`0)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Handler.Stream.IoSessionStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> that buffers data read from
            <see cref="M:Mina.Core.Service.IoHandler.MessageReceived(Mina.Core.Session.IoSession,System.Object)"/> events,
            and forwards all write operations to the associated <see cref="T:Mina.Core.Session.IoSession"/>.
            </summary>
        </member>
        <member name="M:Mina.Handler.Stream.IoSessionStream.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Handler.Stream.IoSessionStream.#ctor(Mina.Core.Session.IoSession)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Handler.Stream.IoSessionStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Handler.Stream.IoSessionStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Handler.Stream.IoSessionStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Handler.Stream.IoSessionStream.Length">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Stream.IoSessionStream.ReadByte">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Stream.IoSessionStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Stream.IoSessionStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Stream.IoSessionStream.Close">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Stream.IoSessionStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Stream.IoSessionStream.Write(Mina.Core.Buffer.IoBuffer)">
            <summary>
            Writes the given buffer.
            </summary>
        </member>
        <member name="P:Mina.Handler.Stream.IoSessionStream.Exception">
            <summary>
            Sets an exception and notifies threads wating for this object.
            </summary>
        </member>
        <member name="P:Mina.Handler.Stream.IoSessionStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Stream.IoSessionStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Stream.IoSessionStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Handler.Stream.StreamIoHandler">
            <summary>
            A <see cref="T:Mina.Core.Service.IoHandler"/> that adapts asynchronous MINA events to stream I/O.
            </summary>
        </member>
        <member name="P:Mina.Handler.Stream.StreamIoHandler.ReadTimeout">
            <summary>
            Gets or sets read timeout in seconds.
            </summary>
        </member>
        <member name="P:Mina.Handler.Stream.StreamIoHandler.WriteTimeout">
            <summary>
            Gets or sets write timeout in seconds.
            </summary>
        </member>
        <member name="M:Mina.Handler.Stream.StreamIoHandler.SessionOpened(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Stream.StreamIoHandler.SessionClosed(Mina.Core.Session.IoSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Stream.StreamIoHandler.MessageReceived(Mina.Core.Session.IoSession,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Stream.StreamIoHandler.ExceptionCaught(Mina.Core.Session.IoSession,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Stream.StreamIoHandler.SessionIdle(Mina.Core.Session.IoSession,Mina.Core.Session.IdleStatus)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Handler.Stream.StreamIoHandler.ProcessStreamIo(Mina.Core.Session.IoSession,System.IO.Stream,System.IO.Stream)">
            <summary>
            Implement this method to execute your stream I/O logic.
            </summary>
            <param name="session"></param>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="T:Mina.Transport.Loopback.LoopbackAcceptor">
            <summary>
            Binds the specified <see cref="T:Mina.Core.Service.IoHandler"/> to the specified
            <see cref="T:Mina.Transport.Loopback.LoopbackEndPoint"/>.
            </summary>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackAcceptor.#ctor">
            <summary>
            Instantiates.
            </summary>
        </member>
        <member name="P:Mina.Transport.Loopback.LoopbackAcceptor.TransportMetadata">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackAcceptor.BindInternal(System.Collections.Generic.IEnumerable{System.Net.EndPoint})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackAcceptor.UnbindInternal(System.Collections.Generic.IEnumerable{System.Net.EndPoint})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackAcceptor.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Transport.Loopback.LoopbackConnector">
            <summary>
            Connects to <see cref="T:Mina.Core.Service.IoHandler"/>s which is bound on the specified
            <see cref="T:Mina.Transport.Loopback.LoopbackEndPoint"/>.
            </summary>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackConnector.#ctor">
            <summary>
            Instantiates.
            </summary>
        </member>
        <member name="P:Mina.Transport.Loopback.LoopbackConnector.TransportMetadata">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackConnector.Connect0(System.Net.EndPoint,System.Net.EndPoint,System.Action{Mina.Core.Session.IoSession,Mina.Core.Future.IConnectFuture})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackConnector.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackFilterChain.#ctor(Mina.Core.Session.AbstractIoSession)">
            <summary>
            </summary>
        </member>
        <member name="T:Mina.Transport.Loopback.LoopbackEndPoint">
            <summary>
            An endpoint which represents loopback port number.
            </summary>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackEndPoint.#ctor(System.Int32)">
            <summary>
            Creates a new instance with the specifid port number.
            </summary>
        </member>
        <member name="P:Mina.Transport.Loopback.LoopbackEndPoint.Port">
            <summary>
            Gets the port number.
            </summary>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackEndPoint.CompareTo(Mina.Transport.Loopback.LoopbackEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackEndPoint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackEndPoint.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackEndPoint.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Transport.Loopback.LoopbackSession">
            <summary>
            A <see cref="T:Mina.Core.Session.IoSession"/> for loopback transport.
            </summary>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackSession.#ctor(Mina.Core.Service.IoService,Mina.Transport.Loopback.LoopbackEndPoint,Mina.Core.Service.IoHandler,Mina.Transport.Loopback.LoopbackPipe)">
            <summary>
            Constructor for client-side session.
            </summary>
        </member>
        <member name="M:Mina.Transport.Loopback.LoopbackSession.#ctor(Mina.Transport.Loopback.LoopbackSession,Mina.Transport.Loopback.LoopbackPipe)">
            <summary>
            Constructor for server-side session.
            </summary>
        </member>
        <member name="T:Mina.Transport.Serial.DefaultSerialSessionConfig">
            <summary>
            The default configuration for a serial session 
            </summary>
        </member>
        <member name="T:Mina.Transport.Serial.ISerialSession">
            <summary>
            An <see cref="T:Mina.Core.Session.IoSession"/> for serial communication transport.
            </summary>
        </member>
        <member name="P:Mina.Transport.Serial.ISerialSession.Config">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Serial.ISerialSession.RtsEnable">
            <summary>
            <seealso cref="P:System.IO.Ports.SerialPort.RtsEnable"/>
            </summary>
        </member>
        <member name="P:Mina.Transport.Serial.ISerialSession.DtrEnable">
            <summary>
            <seealso cref="P:System.IO.Ports.SerialPort.DtrEnable"/>
            </summary>
        </member>
        <member name="T:Mina.Transport.Serial.ISerialSessionConfig">
            <summary>
            An <see cref="T:Mina.Core.Session.IoSessionConfig"/> for serial transport type.
            </summary>
        </member>
        <member name="P:Mina.Transport.Serial.ISerialSessionConfig.ReadTimeout">
            <summary>
            Gets or set read timeout in seconds.
            </summary>
        </member>
        <member name="P:Mina.Transport.Serial.ISerialSessionConfig.WriteBufferSize">
            <summary>
            <seealso cref="P:System.IO.Ports.SerialPort.WriteBufferSize"/>
            </summary>
        </member>
        <member name="P:Mina.Transport.Serial.ISerialSessionConfig.ReceivedBytesThreshold">
            <summary>
            <seealso cref="P:System.IO.Ports.SerialPort.ReceivedBytesThreshold"/>
            </summary>
        </member>
        <member name="T:Mina.Transport.Serial.SerialConnector">
            <summary>
            <see cref="T:Mina.Core.Service.IoConnector"/> for serial communication transport.
            </summary>
        </member>
        <member name="M:Mina.Transport.Serial.SerialConnector.#ctor">
            <summary>
            Instantiates.
            </summary>
        </member>
        <member name="P:Mina.Transport.Serial.SerialConnector.SessionConfig">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Serial.SerialConnector.TransportMetadata">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Serial.SerialConnector.Connect0(System.Net.EndPoint,System.Net.EndPoint,System.Action{Mina.Core.Session.IoSession,Mina.Core.Future.IConnectFuture})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Serial.SerialConnector.Dispose(System.Boolean)">
            <summary>
            Disposes.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Mina.Transport.Serial.SerialEndPoint">
            <summary>
            An endpoint for a serial port communication.
            </summary>
        </member>
        <member name="M:Mina.Transport.Serial.SerialEndPoint.#ctor(System.String,System.Int32)">
            <summary>
            Instantiates.
            </summary>
            <param name="portName">the port name</param>
            <param name="baudRate">the baud rate</param>
        </member>
        <member name="M:Mina.Transport.Serial.SerialEndPoint.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
            <summary>
            Instantiates.
            </summary>
            <param name="portName">the port name</param>
            <param name="baudRate">the baud rate</param>
            <param name="parity">the <see cref="P:Mina.Transport.Serial.SerialEndPoint.Parity"/></param>
            <param name="dataBits">the data bits</param>
            <param name="stopBits">the <see cref="P:Mina.Transport.Serial.SerialEndPoint.StopBits"/></param>
        </member>
        <member name="P:Mina.Transport.Serial.SerialEndPoint.PortName">
            <summary>
            Gets the serial port name.
            </summary>
        </member>
        <member name="P:Mina.Transport.Serial.SerialEndPoint.BaudRate">
            <summary>
            Gets the baud rate.
            </summary>
        </member>
        <member name="P:Mina.Transport.Serial.SerialEndPoint.Parity">
            <summary>
            Gets the parity.
            </summary>
        </member>
        <member name="P:Mina.Transport.Serial.SerialEndPoint.DataBits">
            <summary>
            Gets the data bits.
            </summary>
        </member>
        <member name="P:Mina.Transport.Serial.SerialEndPoint.StopBits">
            <summary>
            Gets the stop bits.
            </summary>
        </member>
        <member name="T:Mina.Transport.Socket.AsyncDatagramAcceptor">
            <summary>
            <see cref="T:Mina.Core.Service.IoAcceptor"/> for datagram transport (UDP/IP).
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramAcceptor.#ctor">
            <summary>
            Instantiates.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncDatagramAcceptor.SessionConfig">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncDatagramAcceptor.LocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncDatagramAcceptor.DefaultLocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncDatagramAcceptor.TransportMetadata">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncDatagramAcceptor.ReuseBuffer">
            <summary>
            Gets or sets a value indicating whether to reuse the read buffer
            sent to <see cref="P:Mina.Transport.Socket.SocketSession.FilterChain"/> by
            <see cref="M:Mina.Core.Filterchain.IoFilterChain.FireMessageReceived(System.Object)"/>.
            </summary>
            <remarks>
            If any thread model, i.e. an <see cref="T:Mina.Filter.Executor.ExecutorFilter"/>,
            is added before filters that process the incoming <see cref="T:Mina.Core.Buffer.IoBuffer"/>
            in <see cref="M:Mina.Core.Filterchain.IoFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)"/>,
            this must be set to <code>false</code> to avoid undetermined state
            of the read buffer. The default value is <code>true</code>.
            </remarks>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncDatagramAcceptor.SessionRecycler">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramAcceptor.BindInternal(System.Collections.Generic.IEnumerable{System.Net.EndPoint})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramAcceptor.UnbindInternal(System.Collections.Generic.IEnumerable{System.Net.EndPoint})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramAcceptor.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramAcceptor.Add(Mina.Transport.Socket.AsyncDatagramSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramAcceptor.Write(Mina.Transport.Socket.AsyncDatagramSession,Mina.Core.Write.IWriteRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramAcceptor.Flush(Mina.Transport.Socket.AsyncDatagramSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramAcceptor.Remove(Mina.Transport.Socket.AsyncDatagramSession)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramAcceptor.UpdateTrafficControl(Mina.Transport.Socket.AsyncDatagramSession)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Transport.Socket.AsyncDatagramConnector">
            <summary>
            <see cref="T:Mina.Core.Service.IoConnector"/> for datagram transport (UDP/IP).
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramConnector.#ctor">
            <summary>
            Instantiates.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncDatagramConnector.SessionConfig">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncDatagramConnector.TransportMetadata">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramConnector.NewSocket(System.Net.Sockets.AddressFamily)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramConnector.BeginConnect(Mina.Transport.Socket.AbstractSocketConnector.ConnectorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Transport.Socket.AsyncDatagramSession">
            <summary>
            An <see cref="T:Mina.Core.Session.IoSession"/> for datagram transport (UDP/IP).
            </summary>
        </member>
        <member name="F:Mina.Transport.Socket.AsyncDatagramSession.Metadata">
            <summary>
            Transport metadata for async datagram session.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramSession.#ctor(Mina.Core.Service.IoService,Mina.Core.Service.IoProcessor{Mina.Transport.Socket.AsyncDatagramSession},Mina.Transport.Socket.AsyncDatagramAcceptor.SocketContext,System.Net.EndPoint,System.Boolean)">
            <summary>
            Creates a new acceptor-side session instance.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncDatagramSession.TransportMetadata">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramSession.BeginSend(Mina.Core.Write.IWriteRequest,Mina.Core.Buffer.IoBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramSession.BeginSendFile(Mina.Core.Write.IWriteRequest,Mina.Core.File.IFileRegion)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramSession.#ctor(Mina.Core.Service.IoService,Mina.Core.Service.IoProcessor{Mina.Transport.Socket.SocketSession},System.Net.Sockets.Socket,System.Net.EndPoint,Mina.Transport.Socket.SocketAsyncEventArgsBuffer,Mina.Transport.Socket.SocketAsyncEventArgsBuffer,System.Boolean)">
            <summary>
            Creates a new connector-side session instance.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramSession.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Processes send events.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramSession.BeginReceive">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncDatagramSession.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Processes receive events.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Mina.Transport.Socket.IDatagramAcceptor">
            <summary>
            <see cref="T:Mina.Core.Service.IoAcceptor"/> for socket transport (TCP/IP).  This class handles incoming TCP/IP based socket connections.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.IDatagramAcceptor.SessionConfig">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.IDatagramAcceptor.LocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.IDatagramAcceptor.DefaultLocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.IDatagramAcceptor.SessionRecycler">
            <summary>
            Gets or sets the <see cref="T:Mina.Core.Session.IoSessionRecycler"/> for this service.
            </summary>
        </member>
        <member name="T:Mina.Transport.Socket.IDatagramConnector">
            <summary>
            <see cref="T:Mina.Core.Service.IoConnector"/> for socket transport (UDP/IP)
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.IDatagramConnector.SessionConfig">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.IDatagramConnector.DefaultRemoteEndPoint">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Transport.Socket.IDatagramSessionConfig">
            <summary>
            An <see cref="T:Mina.Core.Session.IoSessionConfig"/> for datagram transport type.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.IDatagramSessionConfig.EnableBroadcast">
            <summary>
            <see cref="P:System.Net.Sockets.Socket.EnableBroadcast"/>
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.IDatagramSessionConfig.ExclusiveAddressUse">
            <summary>
            <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse"/>
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.IDatagramSessionConfig.ReuseAddress">
            <summary>
            Gets or sets if <see cref="F:System.Net.Sockets.SocketOptionName.ReuseAddress"/> is enabled.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.IDatagramSessionConfig.ReceiveBufferSize">
            <summary>
            <see cref="P:System.Net.Sockets.Socket.ReceiveBufferSize"/>
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.IDatagramSessionConfig.SendBufferSize">
            <summary>
            <see cref="P:System.Net.Sockets.Socket.SendBufferSize"/>
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.IDatagramSessionConfig.TrafficClass">
            <summary>
            Gets or sets traffic class or <see cref="F:System.Net.Sockets.SocketOptionName.TypeOfService"/> in the IP datagram header.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.IDatagramSessionConfig.MulticastOption">
            <summary>
            Gets or sets <see cref="T:System.Net.Sockets.MulticastOption"/>.
            </summary>
        </member>
        <member name="T:Mina.Transport.Socket.AbstractSocketAcceptor">
            <summary>
            Base class of socket acceptor.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketAcceptor.#ctor">
            <summary>
            Instantiates with default max connections of 1024.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketAcceptor.#ctor(System.Int32)">
            <summary>
            Instantiates.
            </summary>
            <param name="maxConnections">the max connections allowed</param>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketAcceptor.SessionConfig">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketAcceptor.LocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketAcceptor.DefaultLocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketAcceptor.TransportMetadata">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketAcceptor.ReuseAddress">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketAcceptor.Backlog">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketAcceptor.MaxConnections">
            <summary>
            Gets or sets the number of max connections.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketAcceptor.ReuseBuffer">
            <summary>
            Gets or sets a value indicating whether to reuse the read buffer
            sent to <see cref="P:Mina.Transport.Socket.SocketSession.FilterChain"/> by
            <see cref="M:Mina.Core.Filterchain.IoFilterChain.FireMessageReceived(System.Object)"/>.
            </summary>
            <remarks>
            If any thread model, i.e. an <see cref="T:Mina.Filter.Executor.ExecutorFilter"/>,
            is added before filters that process the incoming <see cref="T:Mina.Core.Buffer.IoBuffer"/>
            in <see cref="M:Mina.Core.Filterchain.IoFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)"/>,
            this must be set to <code>false</code> to avoid undetermined state
            of the read buffer. The default value is <code>true</code>.
            </remarks>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketAcceptor.BindInternal(System.Collections.Generic.IEnumerable{System.Net.EndPoint})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketAcceptor.UnbindInternal(System.Collections.Generic.IEnumerable{System.Net.EndPoint})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketAcceptor.NewSession(Mina.Core.Service.IoProcessor{Mina.Transport.Socket.SocketSession},System.Net.Sockets.Socket)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketAcceptor.BeginAccept(Mina.Transport.Socket.AbstractSocketAcceptor.ListenerContext)">
            <summary>
            Begins an accept operation.
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketAcceptor.EndAccept(System.Net.Sockets.Socket,Mina.Transport.Socket.AbstractSocketAcceptor.ListenerContext)">
            <summary>
            Ends an accept operation.
            </summary>
            <param name="socket">the accepted client socket</param>
            <param name="listener">the <see cref="T:Mina.Transport.Socket.AbstractSocketAcceptor.ListenerContext"/></param>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketAcceptor.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Transport.Socket.AbstractSocketAcceptor.ListenerContext">
            <summary>
            Provides context info for a socket acceptor.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketAcceptor.ListenerContext.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Instantiates.
            </summary>
            <param name="socket">the associated socket</param>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketAcceptor.ListenerContext.Socket">
            <summary>
            Gets the associated socket.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketAcceptor.ListenerContext.Tag">
            <summary>
            Gets or sets a tag.
            </summary>
        </member>
        <member name="T:Mina.Transport.Socket.AbstractSocketConnector">
            <summary>
            Base class of socket connector.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketConnector.#ctor(Mina.Core.Session.IoSessionConfig)">
            <summary>
            Instantiates.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketConnector.DefaultRemoteEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketConnector.ReuseBuffer">
            <summary>
            Gets or sets a value indicating whether to reuse the read buffer
            sent to <see cref="P:Mina.Transport.Socket.SocketSession.FilterChain"/> by
            <see cref="M:Mina.Core.Filterchain.IoFilterChain.FireMessageReceived(System.Object)"/>.
            </summary>
            <remarks>
            If any thread model, i.e. an <see cref="T:Mina.Filter.Executor.ExecutorFilter"/>,
            is added before filters that process the incoming <see cref="T:Mina.Core.Buffer.IoBuffer"/>
            in <see cref="M:Mina.Core.Filterchain.IoFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)"/>,
            this must be set to <code>false</code> to avoid undetermined state
            of the read buffer. The default value is <code>true</code>.
            </remarks>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketConnector.Processor">
            <summary>
            Gets the <see cref="T:Mina.Core.Service.IoProcessor"/>.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketConnector.Connect0(System.Net.EndPoint,System.Net.EndPoint,System.Action{Mina.Core.Session.IoSession,Mina.Core.Future.IConnectFuture})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketConnector.NewSocket(System.Net.Sockets.AddressFamily)">
            <summary>
            Creates a socket according to the address family.
            </summary>
            <param name="addressFamily">the <see cref="T:System.Net.Sockets.AddressFamily"/></param>
            <returns>the socket created</returns>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketConnector.BeginConnect(Mina.Transport.Socket.AbstractSocketConnector.ConnectorContext)">
            <summary>
            Begins connecting.
            </summary>
            <param name="connector">the context of current connector</param>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketConnector.EndConnect(Mina.Core.Session.IoSession,Mina.Transport.Socket.AbstractSocketConnector.ConnectorContext)">
            <summary>
            Ends connecting.
            </summary>
            <param name="session">the connected session</param>
            <param name="connector">the context of current connector</param>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketConnector.EndConnect(System.Exception,Mina.Transport.Socket.AbstractSocketConnector.ConnectorContext)">
            <summary>
            Ends connecting.
            </summary>
            <param name="cause">the exception occurred</param>
            <param name="connector">the context of current connector</param>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketConnector.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Transport.Socket.AbstractSocketConnector.ConnectorContext">
            <summary>
            Provides context info for a socket connector.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketConnector.ConnectorContext.#ctor(System.Net.Sockets.Socket,System.Net.EndPoint,System.Action{Mina.Core.Session.IoSession,Mina.Core.Future.IConnectFuture})">
            <summary>
            Instantiates.
            </summary>
            <param name="socket">the associated socket</param>
            <param name="remoteEP">the remote endpoint</param>
            <param name="sessionInitializer">the funciton to initialize session</param>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketConnector.ConnectorContext.Socket">
            <summary>
            Gets the associated socket.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketConnector.ConnectorContext.RemoteEP">
            <summary>
            Gets the remote endpoint.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.AbstractSocketConnector.ConnectorContext.SessionInitializer">
            <summary>
            Gets the funciton to initialize session.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketConnector.ConnectorContext.Cancel">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AbstractSocketConnector.ConnectorContext.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Transport.Socket.AsyncSocketAcceptor">
            <summary>
            <see cref="T:Mina.Core.Service.IoAcceptor"/> for socket transport (TCP/IP).
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketAcceptor.#ctor">
            <summary>
            Instantiates with default max connections of 1024.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketAcceptor.#ctor(System.Int32)">
            <summary>
            Instantiates.
            </summary>
            <param name="maxConnections">the max connections allowed</param>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketAcceptor.BindInternal(System.Collections.Generic.IEnumerable{System.Net.EndPoint})">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketAcceptor.BeginAccept(Mina.Transport.Socket.AbstractSocketAcceptor.ListenerContext)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketAcceptor.NewSession(Mina.Core.Service.IoProcessor{Mina.Transport.Socket.SocketSession},System.Net.Sockets.Socket)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Transport.Socket.AsyncSocketConnector">
            <summary>
            <see cref="T:Mina.Core.Service.IoConnector"/> for socket transport (TCP/IP).
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketConnector.#ctor">
            <summary>
            Instantiates.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncSocketConnector.SessionConfig">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncSocketConnector.TransportMetadata">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketConnector.NewSocket(System.Net.Sockets.AddressFamily)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketConnector.BeginConnect(Mina.Transport.Socket.AbstractSocketConnector.ConnectorContext)">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Transport.Socket.ISocketAcceptor">
            <summary>
            <see cref="T:Mina.Core.Service.IoAcceptor"/> for socket transport (TCP/IP).  This class handles incoming TCP/IP based socket connections.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketAcceptor.SessionConfig">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketAcceptor.LocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketAcceptor.DefaultLocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketAcceptor.ReuseAddress">
            <summary>
            Gets or sets the Reuse Address flag.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketAcceptor.Backlog">
            <summary>
            Gets or sets the size of the backlog. This can only be set when this class is not bound.
            </summary>
        </member>
        <member name="T:Mina.Transport.Socket.ISocketConnector">
            <summary>
            <see cref="T:Mina.Core.Service.IoConnector"/> for socket transport (TCP/IP).
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketConnector.SessionConfig">
            <summary>
            Gets the default configuration of the new SocketSessions
            created by this connect service.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketConnector.DefaultRemoteEndPoint">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Transport.Socket.ISocketSessionConfig">
            <summary>
            An <see cref="T:Mina.Core.Session.IoSessionConfig"/> for socket transport type.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketSessionConfig.ExclusiveAddressUse">
            <summary>
            <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse"/>
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketSessionConfig.ReuseAddress">
            <summary>
            Gets or sets if <see cref="F:System.Net.Sockets.SocketOptionName.ReuseAddress"/> is enabled.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketSessionConfig.ReceiveBufferSize">
            <summary>
            <see cref="P:System.Net.Sockets.Socket.ReceiveBufferSize"/>
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketSessionConfig.SendBufferSize">
            <summary>
            <see cref="P:System.Net.Sockets.Socket.SendBufferSize"/>
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketSessionConfig.TrafficClass">
            <summary>
            Gets or sets traffic class or <see cref="F:System.Net.Sockets.SocketOptionName.TypeOfService"/> in the IP datagram header.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketSessionConfig.KeepAlive">
            <summary>
            Enables or disables <see cref="F:System.Net.Sockets.SocketOptionName.KeepAlive"/>.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketSessionConfig.OobInline">
            <summary>
            Enables or disables <see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline"/>.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketSessionConfig.NoDelay">
            <summary>
            <see cref="P:System.Net.Sockets.Socket.NoDelay"/>
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.ISocketSessionConfig.SoLinger">
            <summary>
            <see cref="P:System.Net.Sockets.Socket.LingerState"/>
            </summary>
        </member>
        <member name="T:Mina.Transport.Socket.SocketAsyncEventArgsBuffer">
            <summary>
            <see cref="T:Mina.Core.Buffer.IoBuffer"/> that use <see cref="P:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.SocketAsyncEventArgs"/>
            as internal implementation.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.#ctor(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.#ctor(Mina.Core.Buffer.IoBufferAllocator,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.#ctor(Mina.Core.Buffer.IoBufferAllocator,System.Byte[],System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.SocketAsyncEventArgs">
            <summary>
            Gets the inner <see cref="P:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.SocketAsyncEventArgs"/>.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.ReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.HasArray">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.SetBuffer">
            <summary>
            Sets data buffer for inner <see cref="P:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.SocketAsyncEventArgs"/>.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.Get">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.Get(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.Get(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.GetRemaining">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.Shrink">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.Offset(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.GetInternal(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.PutInternal(System.Int32,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.PutInternal(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.PutInternal(Mina.Core.Buffer.IoBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.Compact">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.Free">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.Dispose">
            <summary>
            Dispose resources.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.Dispose(System.Boolean)">
            <summary>
            Dispose resources.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.Slice0">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.AsReadOnlyBuffer0">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBuffer.Duplicate0">
            <inheritdoc/>
        </member>
        <member name="T:Mina.Transport.Socket.SocketAsyncEventArgsBufferAllocator">
            <summary>
            An <see cref="T:Mina.Core.Buffer.IoBufferAllocator"/> which allocates <see cref="T:Mina.Transport.Socket.SocketAsyncEventArgsBuffer"/>.
            </summary>
        </member>
        <member name="F:Mina.Transport.Socket.SocketAsyncEventArgsBufferAllocator.Instance">
            <summary>
            Static instance.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBufferAllocator.Allocate(System.Int32)">
            <summary>
            Returns the buffer which is capable of the specified size.
            </summary>
            <param name="capacity">the capacity of the buffer</param>
            <returns>the allocated buffer</returns>
            <exception cref="T:System.ArgumentException">If the <paramref name="capacity"/> is a negative integer</exception>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBufferAllocator.Wrap(System.Byte[])">
            <summary>
            Wraps the specified byte array into a <see cref="T:Mina.Transport.Socket.SocketAsyncEventArgsBuffer"/>.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.SocketAsyncEventArgsBufferAllocator.Wrap(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Wraps the specified byte array into a <see cref="T:Mina.Transport.Socket.SocketAsyncEventArgsBuffer"/>.
            </summary>
        </member>
        <member name="T:Mina.Transport.Socket.AsyncSocketSession">
            <summary>
            An <see cref="T:Mina.Core.Session.IoSession"/> for socket transport (TCP/IP).
            </summary>
        </member>
        <member name="F:Mina.Transport.Socket.AsyncSocketSession.Metadata">
            <summary>
            Transport metadata for async socket session.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketSession.#ctor(Mina.Core.Service.IoService,Mina.Core.Service.IoProcessor{Mina.Transport.Socket.SocketSession},System.Net.Sockets.Socket,System.Net.EndPoint,System.Net.EndPoint,Mina.Transport.Socket.SocketAsyncEventArgsBuffer,Mina.Transport.Socket.SocketAsyncEventArgsBuffer,System.Boolean)">
            <summary>
            Instantiates.
            </summary>
            <param name="service">the service this session belongs to</param>
            <param name="processor">the processor to process this session</param>
            <param name="socket">the associated socket</param>
            <param name="localEP">the local EndPoint</param>
            <param name="remoteEP">the remote EndPoint</param>
            <param name="readBuffer">the <see cref="T:Mina.Transport.Socket.SocketAsyncEventArgsBuffer"/> as reading buffer</param>
            <param name="writeBuffer">the <see cref="T:Mina.Transport.Socket.SocketAsyncEventArgsBuffer"/> as writing buffer</param>
            <param name="reuseBuffer">whether or not reuse internal buffer, see <seealso cref="P:Mina.Transport.Socket.SocketSession.ReuseBuffer"/> for more</param>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncSocketSession.ReadBuffer">
            <summary>
            Gets the reading buffer belonged to this session.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncSocketSession.WriteBuffer">
            <summary>
            Gets the writing buffer belonged to this session.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncSocketSession.TransportMetadata">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.AsyncSocketSession.Secured">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketSession.BeginSend(Mina.Core.Write.IWriteRequest,Mina.Core.Buffer.IoBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketSession.BeginSendFile(Mina.Core.Write.IWriteRequest,Mina.Core.File.IFileRegion)">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketSession.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Processes send events.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketSession.BeginReceive">
            <inheritdoc/>
        </member>
        <member name="M:Mina.Transport.Socket.AsyncSocketSession.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Processes receive events.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Mina.Transport.Socket.SocketSession">
            <summary>
            Base implementation of <see cref="T:Mina.Core.Session.IoSession"/> for socket transport (TCP/IP).
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.SocketSession.#ctor(Mina.Core.Service.IoService,Mina.Core.Service.IoProcessor,Mina.Core.Session.IoSessionConfig,System.Net.Sockets.Socket,System.Net.EndPoint,System.Net.EndPoint,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.SocketSession.Processor">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.SocketSession.Active">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.SocketSession.FilterChain">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.SocketSession.LocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.SocketSession.RemoteEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Mina.Transport.Socket.SocketSession.Socket">
            <summary>
            Gets the <see cref="T:System.Net.Sockets.Socket"/>
            associated with this session.
            </summary>
        </member>
        <member name="P:Mina.Transport.Socket.SocketSession.ReuseBuffer">
            <summary>
            Gets or sets a value indicating whether to reuse the internal
            read buffer as the buffer sent to <see cref="P:Mina.Transport.Socket.SocketSession.FilterChain"/>
            by <see cref="M:Mina.Core.Filterchain.IoFilterChain.FireMessageReceived(System.Object)"/>.
            </summary>
            <remarks>
            If any thread model, i.e. an <see cref="T:Mina.Filter.Executor.ExecutorFilter"/>,
            is added before filters that process the incoming <see cref="T:Mina.Core.Buffer.IoBuffer"/>
            in <see cref="M:Mina.Core.Filterchain.IoFilter.MessageReceived(Mina.Core.Filterchain.INextFilter,Mina.Core.Session.IoSession,System.Object)"/>,
            this must be set to <code>false</code> since the internal read buffer
            will be reset every time a session begins to receive.
            </remarks>
            <seealso cref="P:Mina.Transport.Socket.AbstractSocketAcceptor.ReuseBuffer"/>
        </member>
        <member name="M:Mina.Transport.Socket.SocketSession.Start">
            <summary>
            Starts this session.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.SocketSession.Flush">
            <summary>
            Flushes this session.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.SocketSession.BeginSend(Mina.Core.Write.IWriteRequest,Mina.Core.Buffer.IoBuffer)">
            <summary>
            Begins send operation.
            </summary>
            <param name="request">the current write request</param>
            <param name="buf">the buffer to send</param>
        </member>
        <member name="M:Mina.Transport.Socket.SocketSession.BeginSendFile(Mina.Core.Write.IWriteRequest,Mina.Core.File.IFileRegion)">
            <summary>
            Begins to send a file.
            </summary>
            <param name="request">the current write request</param>
            <param name="file">the file to send</param>
        </member>
        <member name="M:Mina.Transport.Socket.SocketSession.EndSend(System.Int32)">
            <summary>
            Ends send operation.
            </summary>
            <param name="bytesTransferred">the bytes transferred in last send operation</param>
        </member>
        <member name="M:Mina.Transport.Socket.SocketSession.EndSend(System.Net.Sockets.SocketException)">
            <summary>
            Ends send operation by a <see cref="T:System.Net.Sockets.SocketException"/>.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.SocketSession.EndSend(System.Exception)">
            <summary>
            Ends send operation.
            </summary>
            <param name="ex">the exception caught</param>
        </member>
        <member name="M:Mina.Transport.Socket.SocketSession.EndSend(System.Exception,System.Boolean)">
            <summary>
            Ends send operation.
            </summary>
            <param name="ex">the exception caught</param>
            <param name="discardWriteRequest">discard the current write quest or not</param>
        </member>
        <member name="M:Mina.Transport.Socket.SocketSession.BeginReceive">
            <summary>
            Begins receive operation.
            </summary>
        </member>
        <member name="M:Mina.Transport.Socket.SocketSession.EndReceive(Mina.Core.Buffer.IoBuffer)">
            <summary>
            Ends receive operation.
            </summary>
            <param name="buf">the buffer received in last receive operation</param>
        </member>
        <member name="M:Mina.Transport.Socket.SocketSession.EndReceive(System.Net.Sockets.SocketException)">
            <summary>
            Ends receive operation by a <see cref="T:System.Net.Sockets.SocketException"/>.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Mina.Transport.Socket.SocketSession.EndReceive(System.Exception)">
            <summary>
            Ends receive operation.
            </summary>
            <param name="ex">the exception caught</param>
        </member>
        <member name="T:Mina.Util.BufferManager">
            <summary>
            This class creates a single large buffer which can be divided up and assigned to SocketAsyncEventArgs objects for use
            with each socket I/O operation.  This enables bufffers to be easily reused and gaurds against fragmenting heap memory.
            
            The operations exposed on the BufferManager class are not thread safe.
            </summary>
        </member>
        <member name="M:Mina.Util.BufferManager.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mina.Util.BufferManager"/> class.
            </summary>
            <param name="totalBytes">the total bytes</param>
            <param name="bufferSize">the size of one buffer</param>
        </member>
        <member name="M:Mina.Util.BufferManager.InitBuffer">
            <summary>
            Allocates buffer space used by the buffer pool
            </summary>
        </member>
        <member name="M:Mina.Util.BufferManager.SetBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Assigns a buffer from the buffer pool to the specified SocketAsyncEventArgs object
            </summary>
            <returns>true if the buffer was successfully set, else false</returns>
        </member>
        <member name="M:Mina.Util.BufferManager.FreeBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Removes the buffer from a SocketAsyncEventArg object.  This frees the buffer back to the 
            buffer pool
            </summary>
        </member>
        <member name="T:Mina.Util.DelegateUtils">
            <summary>
            Delegate Utilities.
            </summary>
        </member>
        <member name="M:Mina.Util.DelegateUtils.SafeInvoke(System.EventHandler,System.Object)">
            <summary>
            Safely invokes an <see cref="T:System.EventHandler"/>.
            All catched exceptions will be forwarded to <see cref="T:Mina.Util.ExceptionMonitor"/>.
            </summary>
        </member>
        <member name="M:Mina.Util.DelegateUtils.SafeInvoke``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Safely invokes an <see cref="T:System.EventHandler`1"/>.
            All catched exceptions will be forwarded to <see cref="T:Mina.Util.ExceptionMonitor"/>.
            </summary>
        </member>
        <member name="M:Mina.Util.DelegateUtils.SafeInvoke(System.Action)">
            <summary>
            Safely invokes an <see cref="T:System.Action"/>.
            All catched exceptions will be forwarded to <see cref="T:Mina.Util.ExceptionMonitor"/>.
            </summary>
        </member>
        <member name="M:Mina.Util.DelegateUtils.SafeInvoke``1(System.Action{``0},``0)">
            <summary>
            Safely invokes an <see cref="T:System.Action`1"/>.
            All catched exceptions will be forwarded to <see cref="T:Mina.Util.ExceptionMonitor"/>.
            </summary>
        </member>
        <member name="M:Mina.Util.DelegateUtils.SafeInvoke``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Safely invokes an <see cref="T:System.Action`2"/>.
            All catched exceptions will be forwarded to <see cref="T:Mina.Util.ExceptionMonitor"/>.
            </summary>
        </member>
        <member name="M:Mina.Util.DelegateUtils.SafeInvoke``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Safely invokes an <see cref="T:System.Action`3"/>.
            All catched exceptions will be forwarded to <see cref="T:Mina.Util.ExceptionMonitor"/>.
            </summary>
        </member>
        <member name="T:Mina.Util.ExceptionMonitor">
            <summary>
            Monitors uncaught exceptions.
            </summary>
        </member>
        <member name="P:Mina.Util.ExceptionMonitor.Instance">
            <summary>
            Gets or sets the current exception monitor.
            </summary>
        </member>
        <member name="M:Mina.Util.ExceptionMonitor.ExceptionCaught(System.Exception)">
            <summary>
            Invoked when there are any uncaught exceptions.
            </summary>
        </member>
        <member name="T:Mina.Util.IQueue`1">
            <summary>
            Represents a FIFO queue.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Mina.Util.IQueue`1.IsEmpty">
            <summary>
            Checks if this queue is empty.
            </summary>
        </member>
        <member name="M:Mina.Util.IQueue`1.Enqueue(`0)">
            <summary>
            Enqueue an item.
            </summary>
        </member>
        <member name="M:Mina.Util.IQueue`1.Dequeue">
            <summary>
            Dequeue an item.
            </summary>
        </member>
        <member name="P:Mina.Util.IQueue`1.Count">
            <summary>
            Gets the count of items in this queue.
            </summary>
        </member>
        <member name="T:Mina.Util.Pool`1">
            <summary>
            Represents a collection of resusable SocketAsyncEventArgs objects.  
            </summary>
        </member>
        <member name="M:Mina.Util.Pool`1.#ctor">
            <summary>
            Initializes the object pool to the specified size
            </summary>
        </member>
        <member name="M:Mina.Util.Pool`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes the object pool to the specified size
            <param name="collection"></param>
            </summary>
        </member>
        <member name="M:Mina.Util.Pool`1.Push(`0)">
            <summary>
            Add a SocketAsyncEventArg instance to the pool
            </summary>
            <param name="item">The SocketAsyncEventArgs instance to add to the pool</param>
        </member>
        <member name="M:Mina.Util.Pool`1.Pop">
            <summary>
            Removes a SocketAsyncEventArgs instance from the pool
            </summary>
            <returns>The object removed from the pool</returns>
        </member>
        <member name="P:Mina.Util.Pool`1.Count">
            <summary>
            The number of SocketAsyncEventArgs instances in the pool
            </summary>
        </member>
    </members>
</doc>
